#+TITLE: GPU 硬件设计过程中的相关术语
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com
#+DATE: 2021-03-20
#+UPDATED: 2021-05-20
#+LAYOUT: post
#+EXCERPT:  GPU 硬件设计中，很多硬件相关的术语，这些术语都代表什么意思呢？
#+DESCRIPTION: GPU 硬件设计中，很多硬件相关的术语，这些术语都代表什么意思呢？
#+TAGS: gpu, ic
#+CATEGORIES: gpu, ic
#+PROPERTY:    header-args        :comments org
#+PROPERTY:    header-args        :mkdirp yes
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil \n:t
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+BIND:        org-preview-latex-image-directory ""
#+OPTIONS:     tex:magick
#+LATEX_HEADER:\usepackage{xeCJK}
#+LATEX_HEADER:\setCJKmainfont{Heiti SC}

**** 像素时钟信号
     在整体 GPU 芯片设计中，需要将最终的内容显示到显示器上。显示器有自己的分辨率，并且需要按照一定的顺序和时钟才能对像素进行正常的读写。
     像素时钟信号是一个非常重要的时钟信号。像素时钟信号的频率与液晶面板的工作模式有关，液晶面板分辨率越高，像素时钟信号的频率也越高。

     只要是数字信号处理电路，就必须有时钟信号。在一行内，像素时钟的个数与液晶面板一行内所具有的像素数量相等。
     例如，对于1024×768的液晶面板，一行有1024个像素，则在一行中（对应于有效视频区间）像素时钟的个数也是1024个。

     像素时钟信号主要有两个作用：

     - 指挥 RGB 信号按照顺序进行传输。数字的 RGB 信号在像素时钟信号的作用下，按照一定的顺序，由驱动板传输到液晶面板中。
     - 确保数据传输的有效性。所有的 RGB 相关的信号，只有在像素时钟的上升沿或者下降沿，才能进行操作。

**** 晶振
     晶振又称晶体振荡器，主要原料是石英晶体。

     在石英晶体上按一定方位切下薄片，将薄片两端抛光并涂上导电的银层，再从银层上连出两个电极并封装起来，这样构成的元件叫石英晶体谐振器，简称石英晶体。

     晶体具有压电效应，即在晶片两极外加电压后，晶体会产生变形；反过来如果在晶片两极施加外力，导致晶体变形，晶体的两极又会产生电压。

     因为晶振的物理特性，晶振在两端有电压的时候，会让晶体产生形变，形变又会触发电压的变化，所以这种情况下会产生震荡，所以可以
     使用晶体的这种特性制作固定频率的信号。
     
     如果给晶片上加上适当的交流电压，晶片就会产生谐振（谐振频率跟晶体的加工工艺，大小等特性有关系，且频率一定）。
     晶振利用一种能把电能和机械能相互转化的晶体，在共振的状态下工作可以提供稳定、精确的单频振荡。在通常的工作条件下，晶振的绝对精度可达
     百万分之五十。

**** 分频
     分频是通过分频电路，将输入信号的频率降低后再进行输出。经过处理后，如果输出的频率是输入频率的 1/2 ,我们称之为 2 分频。
     如果是输入频率的 1/3, 我们称之为 3 分频。如果是 1/n, 我们称之为 n 分频。比如 2 分频的原理旧时让输入脉冲时，输出端才输出
     一个脉冲。假如说输入时钟频率为 1000 Hz, 那么 2 分频后的频率就是 500 Hz.

     分频一般有如下几种做法：

     - D 触发器
     - 循环计数（逢十进一）
       
**** 倍频
     倍频指通过倍频电路，将输入信号的频率提高后再进行输出。实现输出频率为 2、3、4、n 倍的电路分别称之为：2 倍频，3 倍频，
     4 倍频， n 倍频。一般使用锁相环（PLL）的方式来实现倍频。本质上 PLL 就是一个闭环的反馈控制系统。它可以让 PLL 输出，相对于输入在一个固定的相位关系。

**** 上电复位（POR）

     上电复位（POR， Power-On Reset)电路已被广泛地集成到SoC芯片中。
     一个电路系统在上电初期，电源电压还未达到稳定的预期状态，电路节点电压和逻辑状态是不稳定的，可能会造成系统的错误运行。
     为了使系统从一个预定的初始状态开始工作，需要使用上电复位电路在上电初期产生一 个POR信号，使系统初始化。

     上电复位本质上是一个电压检测的过程。当输入电压 Vcc > Vpor 的时候， 上电复位模拟模块将输出 POR 信号给全芯片使用。

     POR 的过程是一个复位到复位释放的过程。

**** 软复位 vs 硬复位
     硬复位，一般指通过硬件给整个系统一个复位信号，比如在电路板上设计一个复位电路，通过按钮就可以给整个系统完成一个复位。而无论软件在执行什么样的操作。
     硬复位一般是全局的，可能会初始化芯片，各个模块，还有一些配置芯片。
     软复位一般指的软件复位，是通过软件给系统一个复位信号。比如往某些模块的配置寄存器写特殊值，来复位某些模块。

**** 时钟树
     
     所谓时钟树，就是从一个基础的参考时钟，能 “长” 出整个系统中各个模块所需要的时钟信号。这个这些不同的时钟信号能能满足各个模块的需要，
     并且多个模块之间也能完成协同工作。具体可以参考 [[https://zhuanlan.zhihu.com/p/77781947][想成为数字IC时钟树综合（clock tree synthesis）专家，建议好好看看这个！]]

**** 内存屏障（Memory Barrier）
     内存屏障（Memory Barrier）也称内内存栅栏（Membar），内存栅障（Memory Fence），屏障指令（Fence Instruction），是一类同步屏障指令。
     它使得 CPU 或者编译器在对内存进行操作的时候，严格的按照一定的顺序来执行。也就是说 memory barrier 前和指令和 memory barrier
     后的指令，不会因为指令优化，指令调度产生乱序的情况。

     之所以需要有内存屏障指令是因为现在的计算机为了提高性能，都采用练习执行的模型，所以需要某种强制的机制来保证整个执行的顺序。

     语义上，所有内存屏障前的所有操作都要写入内存；内存屏障之后的所有读操作都可以获取内存屏障之前写操作的结果。所以对于一些敏感的数据块，会插入
     内存屏障类的指令。比如 C 语言中的 volatile, 就会在编译阶段向指令中插入内存屏障类的指令。

**** PCI-E bar
     BAR 的全称是 Base Address Register。是 PCI-E 中的配置寄存器。每个PCIe设备，都有自己的内部空间，这部分空间如果开放给Host（软件或者CPU)访问，那么Host怎样才能往这部分空间写入数据，或者读数据呢？
     具体的做法就是：在系统上电的时候，系统把 PCIe 设备中开发的的空间（系统软件可见）映射到内存空间。CPU 需要访问该 PCIe 设备空间，只需要访问这个内存空间即可。

     一个 PCIe 设备可能会有多个不同大小，不同属性的开放空间（有些支持预读，有些不支持），在设备出场的时候，这些空间的大小，和属性都会写入到设备的 Configration BAR 寄存器中。在系统上电的时候，系统软件
     读取这些配置，分别为其分配对应的系统内存空间。并将分配地址的内存基址写回 BAR 中。

     PCIe 协议规定了一个设备可以有 6 个 32 bit 的 BAR 空间， 或者三个 64 bit 的 BAR 空间。

     详情参考 [[http://www.ssdfans.com/?p=8210][老男孩读PCIe之六：配置和地址空间]]

**** 高速 serdes
     serdes 是 serializer deserializer 的简称。为什么这个词会成为一个专有名词，并且在芯片 IP 中占有很重要的位置呢？
     主要的原因是硬件信号。我们知道信号分为两种：串行信号，和并行信号。刚开始高速信号的频率都不是特别高，所以刚开始高速信号
     的传输效率的提升是通过同样是中频率下多添加数据线来实现的。也就是并行信号，比如 DDR(DDR 5 之前)。

     随着信号传输量和速率的提高，我们需要更高的频率和更宽的数据线来满足传输需求。当频率升高后，并行信号就显得力不从心
     主要有如下几个点：

     1. 数据线越多，需要处理的多个数据线同步和时钟偏移就会越多
     2. 只有最后一跟数据线传输后才能进行数据的锁存，信号速率很难提升
     3. 同步开关噪声
     4. 时钟周期抖动
	
     后来技术发展出了 CDR (Clock Data Recovery), 能从数据中恢复时钟。SerDes 在接收端集成了 CDR, 利用 CDR 中数据边沿信息抽取时钟，
     这样 serdes 就不用传输时钟信号，只通过一对差分线进行数据的传输。因为只有一对差分线，所以信号的频率可以作的非常高。比如在电路板上设计一个复位电路
     PCIe 4.0 就可以做到单 lane 16Gbps。而且不会受时钟偏移的影响。
	
     参考 [[https://zhuanlan.zhihu.com/p/113737215][SerDes 简单介绍]]

**** 硬件加速
     所谓的硬件加速，从字面意思上理解，就是用硬件去加快整个执行流程。但是有同学可能会问，所有的最终不都是硬件去做的么？
     是的，最终都是由硬件去完成执行。但是每种硬件都有自己擅长的领域，有的比较擅长图形计算（并行计算）， 有的比较适合
     复杂任务的处理（质数分解），所以所谓的硬件加速就是使用比当前运行平台更快的硬件加速器去加速整个运行过程。

     CPU 不是非常适合处理并发量特别大的任务，比如图形处理。所有的像素最终都需要单独完成运算，最终生成一张照片，这个过程
     完全可以使用并发的处理逻辑进行计算。这个时候就使用 GPU 进行对应的加速处理。
     
**** 2D & 3D 加速
     所谓的 2D 加速主要指的是，通过使用硬件加速器处理平面图形图像的场景。这种情况，通过 mesa, 或者 xserver 直接去操作，
     GPU 的图形处理管线的最后单元硬件－－－raster operators 来完成加速。常见的使用场景：比如浏览器窗口的滚动，滚动地层
     的实质就是将图片向某个方向移动一定距离－－－将每一个像素平移，以及更其他内容完成融合。完全可以使用 GPU 的并行处理
     能力进行 2D 加速。

     所谓 3D 加速其实就是处理 3D 场景的很多任务，CPU 直接分发给 GPU 进行处理，CPU 只使用最后的结果。

     3D 场景中会由很多的模型，这些模型需要经过很多的变换，然后进行着色，最终显示，这中间涉及到海量的顶点的同质计算，
     非常适合 GPU 高并发的执行，所以通常会用 GPU 来加速 3D 模型的渲染过程。

**** 软核，固核，硬核
     IP(Intellectural Property), 就是常说的知识产权。美国 Dataquest 将半导体行业里的 IP 定义为：用于 ASIC(Application Specific Integrated Circuit),
     ASSP(Application Specific Standard Product), PLD(Programable Logic Device ) 中，并且是预先设计好的电路模块。
     IP 模块一般有： 行为（Behaviour）， 结构（Structure）， 物理（Physical）三级不同程度的设计。对应描述不同程度的设计分为三类：软核，固核，硬核。

     软核（Soft IP core）：描述行为。描述具体的行为逻辑的HDL(Hardware Description Language) 的代码，不包含任何物理实现相关的信息。常见的交付方式是：RTL(Register Transfer Level) 代码。
     固核（Firm IP core）：描述结构；介于软核和硬核之间，除了完成软核的所有设计之外，还完成了门级电路综合和时序仿真等环节。常见的交付方式是：门级网表。
     硬核（Hard IP core）：基于物理描述，并且经过相关工艺验证的硬核。 常见的交付方式是，基于工艺（TSMC 14nm）的电路物理结构掩模。可以拿来给用。

**** LVDS  
     Low Voltage Differencial Signaling, 低压差分信号，可以满足高性能，资料传输的需求，同时电压比较低至 2V, 可以用到显示接口中 

**** 存储器修复（memory repair）
     repair 是一个过程，是存储器用来修复缺陷（短路，断路...）的过程。由于制造过程工艺各种各样的问题，晶圆上会随机分布一些源生的缺陷。

     存储器作为一个芯片的非常重要的模块，我们不能因为整个存储器中一点点缺点，使得整个芯片报废。所以在硬件设计的过程中都会有冗余。在存储器制造的过程中，
     一般会存在冗余的信号线和单元，通过 DFT (MBIST) 来定位出现问题的地方，从而用冗余的信号和单元来替换有缺陷的模块。保证存储器正常使用。

     repair 一般分为 hard repair , soft repair. hard repair 一般是在芯片出厂前，检查出问题的单元，通过 efuse 或者其他手段将出问题的单元信息保存下来，
     后续在芯片上电初始化阶段，读取问题单元信息，加载到 repair register, 从而实现用冗余模块替换问题模块，保证存储器正常使用。出厂后问题单元信息不会发生改变，所以叫 hard repair

     soft repair 指在运行了一段时间后，存储内部不断的老化，有些单元或者信号线老化，从而不能正常的工作，这种情况下，我们需要使用 soft repair 进行内存的修复。

     soft repair 和 hard repair 都是在芯片上电初始化过程中进行的。

**** 热插拔（Hot Plug Detect）
     热插拔是允许用户在不关闭系统，在不切断电源的情况下，插入或者拔出硬件，从而提高系统的可用性，扩展性和灵活性。
     常见的热插拔有 HDMI, DP。

     HDMI 有两个端：源端（Source）和数据接收端（Sink）。HPD 信号是由 Sink 端生成，并送到 Source 端的一个检测信号。
     当显示器连接时， HPD 信号拉高（高于 2v, source 端认为设备插入），这个时候 Source 认为设备插入，开始设备初始化流程
     。包括读取设备 ID, 开启传输 TMDS 信号（Transition Minimized Differencial Signal）。

     详细请参考[[https://www.cnblogs.com/yuanqiangfei/p/10387169.html][HDMI接口之HPD（热拔插）]]
