#+TITLE: Git 常见问题
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com
#+DATE: <2021-02-15>
#+UPDATED: <2021-02-22>
#+LAYOUT: post
#+EXCERPT: 很大一块代码，如何分开添加，提交？如何随心所欲的想添加哪里就添加哪里？看完这篇文章你就知晓了。  
#+DESCRIPTION:  很大一块代码，如何分开添加，提交？如何随心所欲的想添加哪里就添加哪里？看完这篇文章你就知晓了。
#+TAGS: git
#+CATEGORIES: git
#+PROPERTY:    header-args        :comments org
#+PROPERTY:    header-args        :mkdirp yes
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil \n:t
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+BIND:        org-preview-latex-image-directory "git_faq"
#+OPTIONS:     tex:magick
#+LATEX_HEADER:\usepackage{xeCJK}
#+LATEX_HEADER:\setCJKmainfont{Heiti SC}

*** 交互的添加代码（想加什么就加什么）
   
    #+BEGIN_SRC shell :eval never :exports code
      git add -p
    #+END_SRC

    在交互模形式下，支持如下所示的一些命令：

    #+BEGIN_SRC text :eval never :exports code
      y - stage this hunk(添加当前代码块)
      n - do not stage this hunk(不添加当前代码块)
      q - quit; do not stage this hunk or any of the remaining ones(退出当前交互式添加)
      a - stage this hunk and all later hunks in the file(当前文件到结束的所有内容都添加)
      d - do not stage this hunk or any of the later hunks in the file(当前文件到结束，都不添加)
      g - select a hunk to go to(在多个修改之间进行跳转，进行编辑)
      / - search for a hunk matching the given regex(同上，使用正则表达式跳转)
      j - leave this hunk undecided, see next undecided hunk(跳转下一个没有添加的代码块)
      J - leave this hunk undecided, see next hunk(跳转到下一个代码块)
      K - leave this hunk undecided, see previous hunk(跳转到上一个代码块)
      e - manually edit the current hunk(编辑当前代码块)
      ? - print help
    #+END_SRC
    git 会将所有更改拆分成小块，然后对每一个小的代码会，询问你是否添加，以及更改当前代码块。


*** 很大一块代码，如何分开添加，提交

    很多时候我们发现即便我们使用交互式的方式去提交代码，但是我们的一段代码中，还是会出现不应该出现在一个 commit 记录中的代码，这种
    情况下，我们可以使用两种方式来进行添加。
    
    1. 交互式添加中的 split 方式

       #+BEGIN_SRC diff :eval never :exports code
	 + 这是 story 1 中添加的代码。
	 这里没有发生过变更
	 + 这个是修复代码，但是不应该出现在本次的提交中。
       #+END_SRC
       
       对于上面的代码段，在交互添加的时候，这段代码会一起来让用户决定是否添加到当前提交的变更中。但是我们
       变更中想添加第一行。此时我们可以使用 s(split) 命令。split 会变成如下的提示方式，让用户进行选择

       #+BEGIN_SRC diff :eval never :exports code
	 --- a/xxxx
	 +++ b/xxxx
	 @@ -12,2 +12,3 @@
	 + 这是 story 1 中添加的代码。
	   这里没有发生过变更
  
	 (1/2) Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]?n
       #+END_SRC

       #+BEGIN_SRC diff :eval never :exports code
	 --- a/xxxx
	 +++ b/xxxx
	 @@ -12,2 +12,3 @@
	 + 这个是修复代码，但是不应该出现在本次的提交中。
  
	 (1/2) Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]?n
       #+END_SRC
    2. 手动编辑当前代码块
       #+BEGIN_SRC diff :eval never :exports code
	 --- a/xxxx
	 +++ b/xxxx
	 @@ -12,0 +12,7 @@
	 + 这段代码非常大
	 + 非常大
	 + 非常大
	 + 非常非常大
	 + 你看我大不大
	 + 到这里就结束了
	 + 不应该出现在这里的代码，我们不应该添加
	 (1/2) Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]?
       #+END_SRC
       
       此时我们使用 e(edit) 命令进行相应的处理。在 e 的时候，会有如下的提示：
       #+BEGIN_SRC diff :eval never :exports code
	 # Manual hunk edit mode -- see bottom for a quick guide.
	 1 @@ -190,6 +788,11 @@
	 + 这段代码非常大
	 + 非常大
	 + 非常大
	 + 非常非常大
	 + 你看我大不大
	 - 删掉了不大的代码，暂时也不需要添加
	 + 到这里就结束了
	 + 不应该出现在这里的代码，我们不应该添加
	 # ---
	 # To remove '-' lines, make them ' ' lines (context). "如果不想添加 删除掉的某一行，将 - 替换成 ' ' 空格"
	 # To remove '+' lines, delete them.(如果不像要 + 行，直接删除)
	 # Lines starting with # will be removed.
	 #
	 # If the patch applies cleanly, the edited hunk will immediately be
	 # marked for staging.
	 # If it does not apply cleanly, you will be given an opportunity to
	 # edit again.  If all lines of the hunk are removed, then the edit is
	 # aborted and the hunk is left unchanged.
       #+END_SRC
       
       此时会进入编辑模式，会根据 git 配置的编辑器，启动编辑器。对于上面的代码块，我们只需要删除“不应该出现在这里代码”，然后将其标示为：如下的形式，保存即可。

       #+BEGIN_SRC diff :eval never :exports code
	 # Manual hunk edit mode -- see bottom for a quick guide.
	 1 @@ -190,6 +788,11 @@
	 + 这段代码非常大
	 + 非常大
	 + 非常大
	 + 非常非常大
	 + 你看我大不大
	 删掉了不大的代码，暂时也不需要添加
	 + 到这里就结束了

       #+END_SRC






*** 如何管理 stash
    我们可以通过 git 的 stash 机制来完成一些临时更改的暫存操作。也可以临时的找回这些修改。
**** 压栈 & 弹栈
     #+BEGIN_SRC shell :eval never :exports code
       git stash
       git stash pop
     #+END_SRC

**** 查看 stash
     #+BEGIN_SRC shell :eval never :exports code
       git stash list
       git stash show "stach@{1}"
     #+END_SRC

**** 冲突处理
     
     很多时候我们的工作流程可能是如下的：
     1. 别人有更改了，我的代码还没有改完，此时我们将我们本地的代码 stash 掉
     2. 将别人的代码 git pull --reb 到本地。（检查是否有冲突）
     3. 将我们的修改 git stash pop 出来
	
     有些时候我们发现，我们 stash pop 出来我们修改的时候，和远端最新的代码有冲突。这种情况如何处理？
     
     当我们在 stash pop 的时候，git 会发现冲突，所以这种情况下 git stash 中的记录，不会被删除。
     这种情况下我们需要首先处理 stash pop 后的冲突问题。接下来，因为 git stash 中的记录没有被删除（因为 conflict），但是，其实我们
     已经处理过冲突了，此时，我们只需要使用 git stash drop 将 stash 中的最近的记录删掉就可以了。
     #+BEGIN_SRC shell :eval never :exports code
       git stash drop
     #+END_SRC
     首先我们需要


*** 如何找到丢失的记录
    很多时候，我们一顿操作猛如虎，结果发现我们的有些记录不见了，这种时候，有一个命令可以帮我们看下是否能找到我们的提交记录。
    #+BEGIN_SRC shell :eval never :exports code
      git reflog
    #+END_SRC

    git 会将我们对本地仓库的一些更新操作记录下来。我们可以通过这些记录，就可以通过一些命令将东西找回来
    #+BEGIN_SRC shell :eval never :exports code
      git cherry-pick xxxx
    #+END_SRC


*** 如何合并提交
    多人协作的项目，我们需要有一个良好的协作习惯－－－我们在 push 代码之前，一定要确保我们的代码是可以正常编译的。所以很多时候我们的 push 代码的流程可能是
    1. git pull --reb (获取远端最新的提交)
    2. make && make test
    3. 如果测试通过 git push, 否则修复
    
    此时突然发现，远端的代码发生了变更，导致我们本地的代码不能正常的编译。这种情况下，我们往往有两种选择：
    第一种：修复编译失败，并且提交一个新的 commit, 并加上类似于 fix compile error after merge 等等的信息。
   
    第二种，也是本人比较推荐的一种是修复编译失败，然后将修复编辑的更改 amend(修正) 当前提交上。 因为本质上来讲，这个是属于我们前面提交的 commit 基于的版本是有
    歧义的版本。所以我们这些更改编译错误，其实是在修复这个歧义。另外 fix compile error 这种其实很难提供这种上下文，来说明这次提交做了什么事情。所以个人更加倾向使用这种方式。
    
    #+BEGIN_SRC shell :eval never :exports code
      git add .
      git commit --amend --no-edit
    #+END_SRC


*** 如何覆盖远程提交记录（不推荐）
    很多时候我们发现一些更改不需要存在，但是我们发现我们已经提交到远端了，这种情况下我们可以使用强制覆盖的方式来覆盖远端的记录
    #+BEGIN_SRC shell :eval never :exports code
      git push -f
    #+END_SRC


*** 该删的代码就删，有各种机制找回
    很多时候，我们代码种出现了各种注释掉的代码，这些代码往往是可能不需要的代码，但是因为考虑到，后续可能还可能会参考类似代码，所以很多人选择将代码注释掉。
    但是这种做法时间长了之后，会让我们的代码变得比较臃肿。这种情况可以直接删除代码，我们有各种个样的机制来找回我们删除的代码，如下就有几种方式
    #+BEGIN_SRC shell :eval never :exports code
      # 展示当前文件发生过的所有更改的 commit 记录
      git log -- file

      # 展示文件的每一行的更改记录

      git blame file
    #+END_SRC

*** 回滚操作
    当团队比较大的时候，我们自己的提交可能有时候会让持续集成（CI)的测试失败。 很多人会被 block 不能提交，这种情况下，一个快速
    的修复方式就是把我们自己导致失败的那次提交回滚。然后在本地构造相应的环境进行修复。常见的操作步骤如下：

    1. git log 找到导致失败的 commit hash
    2. 回滚（git revert hash)
    3. git push 
     
    通过上面三个步骤，我们完成了回滚我们的提交。但是如何将我们上次的更改再次拿回来，然后在本地进行相应的测试修复，一般有几种做法：
    
    1. git cherry-pick commit-hash&& git reset HEAD~
    2. git show commit-hash |git apply

    第一种方式，将原来的提交继续拿到本地，然后可以 reset 或者不 reset, 然后通过 --amend 的方式来进行修复。
    第二种方式，直接将出问题的变更重新应用到当前工作区，然后，需要修复后，重新添加更改，提交。

