#+TITLE: 理解计算机大小端（字节序） 
#+AUTHOR: 孙建康（rising.lambda）
#+EMAIL:  rising.lambda@gmail.com
#+DATE: 2021-03-11
#+UPDATED: 2021-03-11
#+LAYOUT: post
#+EXCERPT:  相信大小端大家都不陌生，但是很多时候会混淆，什么是大端，什么是小端，本文从大小端的历史出发，提出一种方便记忆的方式，并且给出一些判断大小端的方式。
#+DESCRIPTION: 相信大小端大家都不陌生，但是很多时候会混淆，什么是大端，什么是小端，本文从大小端的历史出发，提出一种方便记忆的方式，并且给出一些判断大小端的方式。
#+TAGS: encoding, ic  
#+CATEGORIES: encoding, ic
#+PROPERTY:    header-args        :comments org
#+PROPERTY:    header-args        :mkdirp yes
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil \n:t
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+BIND:        org-preview-latex-image-directory "endianess"
#+OPTIONS:     tex:magick
#+LATEX_HEADER:\usepackage{xeCJK}
#+LATEX_HEADER:\setCJKmainfont{Heiti SC}

相信大小端大家都不陌生，常见的定义如下：
小端模式（Little Endian）：数据的低位保存在低地址，数据的高位保存在高地址。
大端模式（Big Endian）： 数据的低位保存在高地址，数据的高位保存在低地址。

*** 为什么会有大小端
    我们知道在计算机中，最基础的数只有 0, 1。所有的其他数都是有 0, 1 的组合来表示。比如我们可以使用 0b1111 来代表 15
    可以用 0b1011 来 代表 11。但是当我们 0b1101 在两个计算机之间传输的时候，问题就出现了。在计算机与计算机传输的过程中，很多时候往往只有一跟数据线，所以很多时候都是以 bit 为单位进行传输的。
    这种时候问题就来了，我们想传输一个数，到底是先传输高位，还是先传输最低位，如下所示

    1. 先传输最高位，依次传输，最后传输最低位
    2. 先传输最低位，依次传输，最后传输最高位

    其实两种方式都是可以的。具体实际的取决与协议。我们把这种情况叫做比特序。bit order

    从历史的观点来看，一个字节表示的是编码单个字符所需要的 bit 数量，ascii 表中总共有 256 个字符，所以总共需要 8 个 bit 来表示字符，所以现在我们使用的一个字节就是 8 个 bit. 通常我们使用 byte
    作为信息计量的单位。比如表示一个 0-65536 之间的数，就需要两个 byte. 往往这些信息需要存储在内存中。内存地址的编址如下所示：

    [[./endianess/mem.png]]
    
    那么我们在内存中如何写入一个 short(2 byte) 的数字，并且我们还能在正确的把这个数字从内存中读出来？

    按照人类的习惯，我们在表示数字的时候都是 0x1122 这种形式，这个 0x1122 代表的是信息。11 是信息的高位，22 是信息的低位。从上图可以看出我们的存储是以字节为单位的，所以在存储的时候，高位的 11 在高地址，还是在低地址？
    这种时候我们需要一个协议来完成信息的传递，我们称这样的协议为大小端。

    大小端的定义如下：

    - 大端字节序：高位字节在前，低位字节在后，这是人类读写数值的方法。
    - 小端字节序：低位字节在前，高位字节在后，即以0x1122形式储存。
    
    具体存储如下图所示：

    [[./endianess/big_small_endian.png]]


    细心的同学一定会发现，如果我们大家都按照一种顺序来进行存储和读取完全是不会出问题了，为什么我们不统一一下呢？ 答案是大小端在硬件设计中各有自己的优缺点，不同场景下可能会有不同的选择。另外
    由于一些历史原因， 所以大小端至今依然是并存的。

*** 大小端各自的优势
    在讨论优势前，我们需要知道地是处理器在访问存储地时候，都是从低地址向高地址读取的。
**** 大端优势
     - 符号位（最高位）在低地址，这样 cpu 在处理的时候，能非常快的值的正负情况
**** 小端优势
     - 最低位在低地址，最高位在高地址，这样在强制类型转换的时候，不需要调整内存的顺序。
     - CPU 在从低地址读取操作数进行运算，低地址是低位，这样依次计算完成进位，会更加高效。
*** 如何记忆大小端
    一直我对大小端的记忆都比较模糊，也容易混淆。究其原因是大小端的翻译容易混淆。大小端在英语中是 endian, 取自一个故事：到底是从小头开始吃鸡蛋，还是大头开始吃鸡蛋。
    
    所谓大小端，其实应该翻译成大小开端，即高位开始，还是从低位开始。从内存地址开始读取/写入，第一个字节是高位，还是低位（内存地址的读写是从低地址到高地址）。

    大端 == 高位开始（当前内存地址开始读取为高位，下一个内存地址为次高位）
    小端 == 低位开始（当前内存地址开始读取为低位，下一个内存地址为次低位）

    如下图所示
    [[./endianess/memo.png]]
    
*** 如何判断大小端   
    
**** 命令行

   1. 使用 octal, decimal, hex, ascii dump 工具
     #+BEGIN_SRC shell :eval never :exports code
       echo -n I | od -o | head -n1 | cut -f2 -d" " | cut -c6
     #+END_SRC
     输出 1 为小端模式， 输出为 0, 为大端模式。
   2. 使用 lscpu
      #+BEGIN_SRC shell :eval never :exports code
	lscpu | grep -i byte
      #+END_SRC
      会直接输出大小端。

**** 代码
     
***** 使用强制在转换
      #+BEGIN_SRC cpp :eval never :exports code
	#include <stdio.h>
	#include <iostream>
	using namespace std;

	int main()
	{
	  int num = 1;
	  if(*(char*)&num ==1)
	    {
	      printf("小端字节序\n");
	    }
	  else
	    {
	      printf("大端字节序\n");
	    }

	  return 0;
	}
      #+END_SRC


      
***** 使用 union
      #+BEGIN_SRC cpp :eval never :exports code
	#include <iostream>
	using namespace std;

	union A{
	  char c;
	  int a;	
	}A;

	int main()
	{
	  A.a = 1;
	  if(A.c == 1)
	    {
	      cout<<"小端字节序"<<endl;
	    }
	  else 
	    {
	      cout<<"大端字节序"<<endl;
	    }

	  return 0;
	}
      #+END_SRC

***** 使用 union 2
      #+BEGIN_SRC cpp :eval never :exports code
	#include <stdio.h>
	#include <iostream>
	using namespace std;

	union{
	  int i;
	  char c[sizeof(int)];
	}num;

	int main()
	{
	  num.i = 1;
	  if(num.c[0] == 0)
	    {
	      printf("小端字节序\n");
	    }
	  else 
	    {
	      printf("大端字节序\n");
	    }

	  return 0;
	}
      #+END_SRC

