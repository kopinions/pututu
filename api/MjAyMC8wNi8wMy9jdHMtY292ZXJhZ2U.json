{"title":"cts 的测试范围","date":"2020-06-03T08:52:00.000Z","date_formatted":{"ll":"2020年6月3日","L":"2020/06/03","MM-DD":"06-03"},"link":"2020/06/03/cts-coverage","tags":["cts","opengl"],"categories":["cts","opengl"],"updated":"2020-06-05T09:00:00.000Z","content":"<html><head></head><body><div id=\"content\">\n\n<div id=\"outline-container-org9b5cb09\" class=\"outline-2\">\n<h2 id=\"org9b5cb09\">cts runner 实现原理</h2>\n<div class=\"outline-text-2\" id=\"text-org9b5cb09\">\n<ul class=\"org-ul\">\n<li>–type 指定测试的范围（gl43,es32,es3等）<br></li>\n<li>如果是 gl 系列的 api, 比如 gl43, 则会在 glcts/data/mustpuss/gl/khronos_mustpass/4.6.0.x/ 中寻找对应的满足条件的测试集（glcTestRunner.cpp:454）<br></li>\n<li>同时还会在 glcts/data/mustpuss/gl/khronos_mustpass_noctx/4.6.0.x/ 中查找<br></li>\n<li><p>\n查找的方式为： glcKhronosMustpassGlNoContext.hpp/glcKhronosMustpassGl.hpp 中定义了参数，如下所示<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span>* mustpassDir = <span class=\"string\">\"gl_cts/data/mustpass/gl/khronos_mustpass_noctx/4.6.1.x/\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> RunParams khronos_mustpass_gl_nocontext_first_cfg[] =</span><br><span class=\"line\">  {</span><br><span class=\"line\">   { glu::ApiType::<span class=\"built_in\">core</span>(<span class=\"number\">3</span>, <span class=\"number\">0</span>), <span class=\"string\">\"khr-master\"</span>, DE_NULL, <span class=\"string\">\"unspecified\"</span>, <span class=\"number\">1</span>, DE_NULL, <span class=\"number\">64</span>, <span class=\"number\">64</span> },</span><br><span class=\"line\">   { glu::ApiType::<span class=\"built_in\">core</span>(<span class=\"number\">4</span>, <span class=\"number\">0</span>), <span class=\"string\">\"khr-master\"</span>, DE_NULL, <span class=\"string\">\"unspecified\"</span>, <span class=\"number\">1</span>, DE_NULL, <span class=\"number\">64</span>, <span class=\"number\">64</span> },</span><br><span class=\"line\">   { glu::ApiType::<span class=\"built_in\">core</span>(<span class=\"number\">4</span>, <span class=\"number\">3</span>), <span class=\"string\">\"khr-master\"</span>, DE_NULL, <span class=\"string\">\"unspecified\"</span>, <span class=\"number\">1</span>, DE_NULL, <span class=\"number\">64</span>, <span class=\"number\">64</span> },</span><br><span class=\"line\">   { glu::ApiType::<span class=\"built_in\">core</span>(<span class=\"number\">4</span>, <span class=\"number\">5</span>), <span class=\"string\">\"khr-master\"</span>, DE_NULL, <span class=\"string\">\"unspecified\"</span>, <span class=\"number\">1</span>, DE_NULL, <span class=\"number\">64</span>, <span class=\"number\">64</span> },</span><br><span class=\"line\">  };</span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\n如果当前指定的 api 的 version, 支持 cfg 中定义的 version , 则将 mustpassDir+\"khr-master\"+\".txt\" 中的参数作为运行一次<br>\ndeqp 的参数，运行相应的测试，启动 api version 是否支持 cfg 的函数如下所示<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">contextSupports</span> <span class=\"params\">(ContextType ctxType, ApiType requiredApiType)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\t<span class=\"comment\">// \\todo [2014-10-06 pyry] Check exact forward-compatible restrictions.</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">bool</span> forwardCompatible = (ctxType.<span class=\"built_in\">getFlags</span>() &amp; CONTEXT_FORWARD_COMPATIBLE) != <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">isContextTypeES</span>(ctxType))</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"built_in\">DE_ASSERT</span>(!forwardCompatible);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> requiredApiType.<span class=\"built_in\">getProfile</span>() == PROFILE_ES &amp;&amp;</span><br><span class=\"line\">\t\t\t   <span class=\"built_in\">versionGreaterOrEqual</span>(ctxType.<span class=\"built_in\">getAPI</span>(), requiredApiType);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">isContextTypeGLCore</span>(ctxType))</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (forwardCompatible)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ctxType.<span class=\"built_in\">getAPI</span>() == requiredApiType;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> requiredApiType.<span class=\"built_in\">getProfile</span>() == PROFILE_CORE &amp;&amp;</span><br><span class=\"line\">\t\t\t\t   <span class=\"built_in\">versionGreaterOrEqual</span>(ctxType.<span class=\"built_in\">getAPI</span>(), requiredApiType);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">isContextTypeGLCompatibility</span>(ctxType))</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"built_in\">DE_ASSERT</span>(!forwardCompatible);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (requiredApiType.<span class=\"built_in\">getProfile</span>() == PROFILE_CORE || requiredApiType.<span class=\"built_in\">getProfile</span>() == PROFILE_COMPATIBILITY) &amp;&amp;</span><br><span class=\"line\">\t\t\t   <span class=\"built_in\">versionGreaterOrEqual</span>(ctxType.<span class=\"built_in\">getAPI</span>(), requiredApiType);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"built_in\">DE_ASSERT</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n</div></li>\n<li>生成的log 命名格式为： config-\\({apiname}-\\){configname}-cfg-\\({configIdx}-run-\\){runId}-width-\\({width}-height-\\){height} 其中 apiname 示例为 gl43, configname 取值为 master,hkr-master<br>\nconfigIdx 为 eglGetConfigs 中遍历的序号，cts 会对 EGL 支持的所有的 config 都会进行相应的测试。runId 为 测试的在 glcKhronosMustpassGlNoContext.hpp/glcKhronosMustpassGl.hpp 中 cfg 中定义的序号。比如 gl43 在 glcKhronosMustpassGlNoContext.hpp<br>\n中的序号是3, 所以运行 gl43 的时候， runId 就是3. width 和 height 分别是 cfg 中指定的宽高。<br></li>\n<li><p>\ncts runner 会生成一系列的 glcts 运行命令，从而运行 glcts 进行对应的实际测试<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">glcts --deqp-caselist-file=glcts/data/mustpass/gl/khronos_mustpass/4.6.0.x/gl43-master.txt \\</span><br><span class=\"line\">      --deqp-screen-rotation=unspecified --deqp-surface-width=64 --deqp-surface-height=64 \\</span><br><span class=\"line\">      --deqp-watchdot=<span class=\"built_in\">disable</span> --deqp-base-seed=1 --deqp-surface-type=window --deqp-gl-config-id=1 \\</span><br><span class=\"line\">      --deqp-gl-context-type=egl --deqp-log-filename=config-gl43-master-cfg-1-run-12-width-64-seed-1.qpa \\</span><br><span class=\"line\">      --deqp-log-images=<span class=\"built_in\">disable</span> --deqp-log-shader-sources=<span class=\"built_in\">disable</span></span><br></pre></td></tr></tbody></table></figure>\n</div></li>\n</ul>\n</div>\n</div>\n\n\n<div id=\"outline-container-orgb054bde\" class=\"outline-2\">\n<h2 id=\"orgb054bde\">glcts 的实现原理</h2>\n<div class=\"outline-text-2\" id=\"text-orgb054bde\">\n<p>\nglcts 从命令行参数中接收接收接收需要运行的测试用例列表，并进行解析。<br>\n</p>\n\n<p>\n对于 OpenGL 的某一个版本来说（gl43）， 这种情况下 CTS 会使用如下两个列表进行测试用例的初始化<br>\n</p>\n<ol class=\"org-ol\">\n<li>khronos_mustpass_noctx/4.6.0.x/gl43-khr-master.txt<br></li>\n<li>khronos_mustpass/4.6.0.x/gl43-master.txt<br></li>\n</ol>\n\n<p>\n上述文件的示例如下：<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">KHR-GL43.info.vendor</span><br><span class=\"line\">KHR-GL43.info.renderer</span><br><span class=\"line\">KHR-GL43.info.version</span><br><span class=\"line\">KHR-GL43.info.shading_language_version</span><br><span class=\"line\">KHR-GL43.info.extensions</span><br><span class=\"line\">KHR-GL43.info.render_target</span><br><span class=\"line\">KHR-GL43.clip_distance.coverage</span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\nglcts 会包含所有的测试用例，并且在启动的时候会将所有的测试用例以树的形式添加到存储中。示例代码如下<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RegisterCTSPackages</span></span><br><span class=\"line\">{</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">RegisterCTSPackages</span>(<span class=\"type\">void</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\tglcts::<span class=\"built_in\">registerPackages</span>();</span><br><span class=\"line\">\t}</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\">RegisterCTSPackages g_registerCTS;</span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\n其中 glcts::registerPackages 的实现如下<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">registerPackages</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">  tcu::TestPackageRegistry* registry = tcu::TestPackageRegistry::<span class=\"built_in\">getSingleton</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"CTS-Configs\"</span>, createConfigPackage);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> DE_OS != DE_OS_ANDROID</span></span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"dEQP-EGL\"</span>, createdEQPEGLPackage);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-GLES2\"</span>, createES2Package);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> DE_OS != DE_OS_ANDROID</span></span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"dEQP-GLES2\"</span>, createdEQPES2Package);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> defined(DEQP_GTF_AVAILABLE)</span></span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"GTF-GLES2\"</span>, createES2GTFPackage);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-GLES3\"</span>, createES30Package);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> DE_OS != DE_OS_ANDROID</span></span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"dEQP-GLES3\"</span>, createdEQPES30Package);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> defined(DEQP_GTF_AVAILABLE)</span></span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"GTF-GLES3\"</span>, createES30GTFPackage);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> DE_OS != DE_OS_ANDROID</span></span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"dEQP-GLES31\"</span>, createdEQPES31Package);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-GLES31\"</span>, createES31Package);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-GLESEXT\"</span>, createESEXTPackage);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> defined(DEQP_GTF_AVAILABLE)</span></span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"GTF-GLES31\"</span>, createES31GTFPackage);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-GLES32\"</span>, createES32Package);</span><br><span class=\"line\"></span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-NoContext\"</span>, createNoDefaultCustomContextPackage);</span><br><span class=\"line\"></span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-Single-GL45\"</span>, createSingleConfigGL45TestPackage);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-Single-GL46\"</span>, createSingleConfigGL46TestPackage);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-Single-GLES32\"</span>, createSingleConfigES32TestPackage);</span><br><span class=\"line\"></span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-GL30\"</span>, createGL30Package);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-GL31\"</span>, createGL31Package);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-GL32\"</span>, createGL32Package);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-GL33\"</span>, createGL33Package);</span><br><span class=\"line\"></span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-GL40\"</span>, createGL40Package);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-GL41\"</span>, createGL41Package);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-GL42\"</span>, createGL42Package);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-GL43\"</span>, createGL43Package);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-GL44\"</span>, createGL44Package);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-GL45\"</span>, createGL45Package);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"KHR-GL46\"</span>, createGL46Package);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> defined(DEQP_GTF_AVAILABLE)</span></span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"GTF-GL30\"</span>, createGL30GTFPackage);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"GTF-GL31\"</span>, createGL31GTFPackage);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"GTF-GL32\"</span>, createGL32GTFPackage);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"GTF-GL33\"</span>, createGL33GTFPackage);</span><br><span class=\"line\"></span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"GTF-GL40\"</span>, createGL40GTFPackage);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"GTF-GL41\"</span>, createGL41GTFPackage);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"GTF-GL42\"</span>, createGL42GTFPackage);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"GTF-GL43\"</span>, createGL43GTFPackage);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"GTF-GL44\"</span>, createGL44GTFPackage);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"GTF-GL45\"</span>, createGL45GTFPackage);</span><br><span class=\"line\">  registry-&gt;<span class=\"built_in\">registerPackage</span>(<span class=\"string\">\"GTF-GL46\"</span>, createGL46GTFPackage);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\n通过这段代码，将 cts 所有支持的测试全部加载到内存，通过上面的列表进行过滤，运行的测试就是这些注册过的测试。<br>\n</p>\n</div>\n</div>\n\n\n\n<div id=\"outline-container-orge80b6c9\" class=\"outline-2\">\n<h2 id=\"orge80b6c9\">CTS 测试的覆盖范围</h2>\n<div class=\"outline-text-2\" id=\"text-orge80b6c9\">\n</div>\n<div id=\"outline-container-orgad87645\" class=\"outline-3\">\n<h3 id=\"orgad87645\">gl43</h3>\n<div class=\"outline-text-3\" id=\"text-orgad87645\">\n<ol class=\"org-ol\">\n<li>info(glGetString)<br></li>\n<li>clip_distance api 覆盖测试(glGetIntegerv, glEnable/glDisable CLIP_DISTANCE0-7, clip_distance in vertex/fragment shader, clip distance from vert-&gt;frag)<br></li>\n<li>clip_distance 功能测试<br></li>\n<li>clip_distance negative 边界测试<br></li>\n<li>shader 数据隐式转换（int-&gt;uint, unit-int….）<br></li>\n<li>shader 函数重载<br></li>\n<li>重载shader 浮点编码， xxxBitsToFloat<br></li>\n<li>glsl 无透视投影下的功能测试，包括shader,texture,vertexattrib array, program, buffer 相关的测试<br></li>\n<li>xfb<br></li>\n<li>常见问题测试：<br>\n<ol class=\"org-ol\">\n<li>变量不能更改测试<br></li>\n<li>vert 无效输入测试<br></li>\n<li>保留关键字测试<br></li>\n</ol></li>\n<li>shader 数组构造函数测试（bvec, fvec）<br></li>\n<li>vert,frag 之间数据共享 array 数据index 测试<br></li>\n<li>shader 深度测试，写入，读取，uniform 写入等等<br></li>\n<li>shader 中各种循环测试，for, while, dowhile<br></li>\n<li>shader preprocessor 测试<br></li>\n<li>shader struct local/uniform(uniform struct)<br></li>\n<li>shader switch case test<br></li>\n<li>shader uniform block<br></li>\n<li>shader integer mix(mix function for vectors)<br></li>\n<li>shader 边界测试（初始化，常量）<br></li>\n<li>eline_statistics_query_tests_ARB<br></li>\n<li>cull_distance, api 覆盖，功能测试，边界测试<br></li>\n<li>texutre_swizzle api 覆盖， 功能测试， 边界测试<br></li>\n<li>draw_elements_base_vertext(gl*Draw*Elements*BaseVertex), 包括边界测试，功能测试<br></li>\n<li>shader fp64 相关测试，操作符，函数，uniform 等等<br></li>\n<li>texture_gather<br></li>\n<li>draw_indirect (glDrawArraysIndirect, glDrawElementsIndirect….)<br></li>\n<li>draw count 系列边界测试<br></li>\n<li>clip control arb<br></li>\n<li>shader_subroutine<br></li>\n<li>texture_barrier<br></li>\n<li>exposted_extensions<br></li>\n<li>ertex_attrib_64bit,<br></li>\n<li>viewport array<br></li>\n<li>map_buffer<br></li>\n<li>shader atomic_counters<br></li>\n<li>shader image load store<br></li>\n<li>shading_languate_420pack (GL_ARB_shading_language_420pack)<br></li>\n<li>texture view<br></li>\n<li>arrays of arrays (测试基础数据类型的多层 array , int a[2][2][2][2], 总共可以达到8 层，以及 shader 中 array 的各种使用情况做验证)<br></li>\n<li>copy image<br></li>\n<li>draw_indirect 43 (computer shader 相关)<br></li>\n<li>program interface query<br></li>\n<li>computer shader<br></li>\n<li>buffer access 和边界测试<br></li>\n<li>shader storage buffer object(storage 相关 api, shader 语法检查)<br></li>\n<li>vertex_attrib binding<br></li>\n<li>shader image size<br></li>\n<li>explicit uniform location<br></li>\n<li>blend(preprocessor, equation…)<br></li>\n<li>shader bitfield operation , 所有的 var.xy== operation(a.xy, b.xy) 之类的，operation 有 ldexp, frexp, uaddCarry 之类的<br></li>\n<li>stencil&amp; texturing 功能测试<br></li>\n<li>spare_buffer tests(GL_ARB_sparse_buffer)<br></li>\n<li>sparse_texture_tests (GL_ARB_spare_texture)<br></li>\n<li>shader_ballot_tests , shader ballot arb test<br></li>\n<li>const_expression 测试， 各种 const 的定义，返回等测试<br></li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n</body></html>","prev":{"title":"macos 蓝牙键盘切换乱码问题记录","link":"2020/06/16/garbled-code-macos"},"next":{"title":"OpenGL TransformFeedback 案例和实现考量","link":"2020/04/10/xfb"},"plink":"https://kopinions.com/2020/06/03/cts-coverage/","toc":[{"id":"org9b5cb09","title":"cts runner 实现原理","index":"1"},{"id":"orgb054bde","title":"glcts 的实现原理","index":"2"},{"id":"orge80b6c9","title":"CTS 测试的覆盖范围","index":"3","children":[{"id":"orgad87645","title":"gl43","index":"3.1"}]}],"reading_time":"1491 字约 10 分钟"}