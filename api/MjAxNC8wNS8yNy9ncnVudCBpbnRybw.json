{"title":"Grunt 配置","date":"2014-05-27T13:20:20.000Z","date_formatted":{"ll":"2014年5月27日","L":"2014/05/27","MM-DD":"05-27"},"link":"2014/05/27/grunt intro","tags":["frontend"],"categories":["frontend"],"updated":"2022-09-29T15:48:22.609Z","content":"<p>grunt是一个node下的自动构建工具。<br>\n他可以实现任务构建的自动化。</p>\n<h3 id=\"1.-安装\">1. 安装<a title=\"#1.-安装\" href=\"#1.-安装\"></a></h3>\n<p>grunt作为node平台下的自动构建工具，可以直接使用node原生的包管理工具Npm来安装。<br>\n首先安装grunt的全局的启动脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g grunt-cli</span><br></pre></td></tr></table></figure>\n<p>这条命令为你在全局安装了一个启动grunt的脚本，使得你可以在任何目录都可以运行grunt命令。但是此时我们还需要再我们项目本地安装grunt。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install grunt --save-dev</span><br></pre></td></tr></table></figure>\n<p>此处假设你的项目中已经有了npm 的配置文件package.json. 因为我们的构建是在开发环境中使用的，所以我们的依赖一概是dev-dependence, 所以我们使用–save-dev 将这个安装保存为开发依赖。<br>\n此时我们的grunt就安装成功了。</p>\n<h3 id=\"2.-配置\">2. 配置<a title=\"#2.-配置\" href=\"#2.-配置\"></a></h3>\n<p>一个标准的Grunt的配置文件主要包括几大块：</p>\n<ol>\n<li>\n<p>一个Wrapper函数</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function(grunt)&#123;</span><br><span class=\"line\">\t// grunt的所有配置都应该在这个wrapper方法里面完成。</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>任务配置</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.initConfig(&#123;</span><br><span class=\"line\">\tmocha: &#123; </span><br><span class=\"line\">       option: &#123;  \t</span><br><span class=\"line\">       \t\treporter: &#x27;mocha&#x27;</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       src: [&#x27;test/**/*.js&#x27;],</span><br><span class=\"line\">       dst: &quot;.tmp&quot;,</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如前面所讲，这坨代码也是在wrapper函数中的。有些构建任务在构建的时候，需要一些参数。比如我们想要跑一个自动化测试的任务，那我们需要告诉任务：</p>\n<ol>\n<li>我们的测试代码在哪里</li>\n<li>我们的测试依赖的东西有哪些</li>\n<li>我们测试生成的东西放哪里</li>\n</ol>\n<p>这些参数都是通过grunt.initConfig来初始化的。 initConfig接受一个对象作为参数，来完成认为配置的初始化。<br>\n需要注意的是这里的mocha，mocha作为任务配置的一项，必须与注册的任务使用同样的名字。</p>\n</li>\n<li>\n<p>载入构建任务</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(&quot;grunt-mocha&quot;);</span><br></pre></td></tr></table></figure>\n<p>加载grunt-mocha插件，这个插件为我们的项目提供了mocha的构建任务。在加载之前我们需要先将我们所依赖的插件安装到本地。继续使用npm来安装我们的依赖</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install grunt-mocha --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"3.-运行\">3. 运行<a title=\"#3.-运行\" href=\"#3.-运行\"></a></h3>\n<p>我们的配置文件放在项目根目录的Gruntfile.js中，此时我们就可以切换到项目的根目录通过运行下面的命令来完成我们的测试任务的构建了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt mocha</span><br></pre></td></tr></table></figure>\n<h3 id=\"4.-自定义任务\">4. 自定义任务<a title=\"#4.-自定义任务\" href=\"#4.-自定义任务\"></a></h3>\n<p>如果标准的插件不能提供你所要功能，比如你想要一个任务(start-app)，这个任务需要完成下面的三个子任务：</p>\n<ol>\n<li>首先对所有的代码进行一遍检查（jshint）</li>\n<li>运行所有的测试代码（mocha）</li>\n<li>启动程序(start)</li>\n</ol>\n<p>此时可以使用如下方式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.registerTask(&quot;start-app&quot;, [&#x27;jshint&#x27;, &#x27;mocha&#x27;, &#x27;start&#x27;]);</span><br></pre></td></tr></table></figure>\n<p>上面的代码注册了一个名为“start-app”的任务，这个任务可以划分为三个子任务，分别为：“jshint”, “unittest”, “start”.当运行start-app任务时，三个子任务会根据数组的顺序依次执行。三个子任务分别为插件注册的任务，代码如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(&#x27;grunt-contrib-jshint&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">grunt.registerTask(&#x27;start&#x27;, &#x27;start app&#x27;, function() &#123;</span><br><span class=\"line\">\tgrunt.log.writeln(&quot;start app&quot;);</span><br><span class=\"line\">\tactualStartCmd();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4.-例子\">4. 例子<a title=\"#4.-例子\" href=\"#4.-例子\"></a></h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function(grunt) &#123;</span><br><span class=\"line\">\tgrunt.initConfig(&#123;</span><br><span class=\"line\">\t\tmocha: &#123; </span><br><span class=\"line\">\t       option: &#123;  \t</span><br><span class=\"line\">\t       \t\treporter: &#x27;mocha&#x27;</span><br><span class=\"line\">\t       &#125;,</span><br><span class=\"line\">\t       src: [&#x27;test/**/*.js&#x27;],</span><br><span class=\"line\">\t       dst: &quot;.tmp&quot;,</span><br><span class=\"line\">\t   \t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tgrunt.loadNpmTasks(&quot;grunt-mocha&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"NodeJS Express 入门","link":"2014/07/07/express-intro"},"next":{"title":"SF Best -- A campaign can not fail.","link":"2014/04/20/sf-best"},"plink":"https://kopinions.com/2014/05/27/grunt intro/","toc":[{"id":"1.-安装","title":"1. 安装","index":"1"},{"id":"2.-配置","title":"2. 配置","index":"2"},{"id":"3.-运行","title":"3. 运行","index":"3"},{"id":"4.-自定义任务","title":"4. 自定义任务","index":"4"},{"id":"4.-例子","title":"4. 例子","index":"5"}],"reading_time":"858 字约 6 分钟"}