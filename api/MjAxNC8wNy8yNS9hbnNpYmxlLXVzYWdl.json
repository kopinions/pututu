{"title":"Devops之Ansible 入门","date":"2014-07-25T08:17:59.000Z","date_formatted":{"ll":"2014年7月25日","L":"2014/07/25","MM-DD":"07-25"},"link":"2014/07/25/ansible-usage","tags":["devops"],"categories":["devops"],"updated":"2022-09-29T15:48:22.605Z","content":"<p>ansible是个什么东西呢？官方的title是“Ansible is Simple IT Automation”——简单的自动化IT工具。这个工具的目标有这么几项：自动化部署APP；自动化管理配置项；自动化的持续交互；自动化的（AWS）云服务管理<br>\nAnsible 的免安装特性，使得 ansible 在 devops 中获得了非常广泛的使用。</p>\n<h3 id=\"inventory-配置\">inventory 配置<a title=\"#inventory-配置\" href=\"#inventory-配置\"></a></h3>\n<hr>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local ansible_ssh_host=127.0.0.1 ansible_ssh_port=2222</span><br><span class=\"line\"></span><br><span class=\"line\">ci ansible_ssh_host=127.0.0.1 ansible_ssh_port=2221</span><br><span class=\"line\"></span><br><span class=\"line\">[localenv]</span><br><span class=\"line\">local</span><br><span class=\"line\"></span><br><span class=\"line\">[cienv]</span><br><span class=\"line\">ci</span><br><span class=\"line\"></span><br><span class=\"line\">[all_groups:children]</span><br><span class=\"line\">localenv</span><br><span class=\"line\">cienv</span><br></pre></td></tr></table></figure>\n<h3 id=\"playbook\">Playbook<a title=\"#playbook\" href=\"#playbook\"></a></h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: localenv</span><br><span class=\"line\">  user: vagrant</span><br><span class=\"line\">  sudo: True</span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">    - name: update env </span><br><span class=\"line\">      apt: update_cache=yes </span><br><span class=\"line\"></span><br><span class=\"line\">    - name: install postgres</span><br><span class=\"line\">      apt: pkg=&#123;&#123;item&#125;&#125; state=present</span><br><span class=\"line\">      with_items:</span><br><span class=\"line\">        - postgresql</span><br><span class=\"line\">        - postgresql-contrib</span><br><span class=\"line\">        - python-psycopg2</span><br><span class=\"line\"></span><br><span class=\"line\">    - name: Make sure postgres running</span><br><span class=\"line\">      service: name=postgresql state=started enabled=yes</span><br><span class=\"line\"></span><br><span class=\"line\">    - name: mange postgres user</span><br><span class=\"line\">      sudo_user: postgres</span><br><span class=\"line\">      postgresql_user: name=twer password=twer role_attr_flags=SUPERUSER </span><br><span class=\"line\">    - name: create default db</span><br><span class=\"line\">      sudo_user: postgres</span><br><span class=\"line\">      postgresql_db: name=order</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n<h3 id=\"include-tasks\">Include tasks<a title=\"#include-tasks\" href=\"#include-tasks\"></a></h3>\n<hr>\n<p>我们可以将我们所有的task都写在一个文件中，就如上面所示，让这个文件处理我们整个环境的初始化，这样做是可以被ansible所支持的。但是如果这样做我们的初始化脚本将很难扩展与复用。比如我们的整个环境的部署中需要安装1. java，2. postgres，如果我们将他们都写在一个文件中，如果我现在需要安装1. java 2. mysql，我必须重新写一个Playbook，这个playbook必须包括java安装，和mysql的安装。不能复用我们以前就有的java安装的逻辑。此时就可以将我们安装java和postgres</p>\n<ol>\n<li>\n<p>安装java</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># tasks/java.yml</span><br><span class=\"line\">- name: placeholder for install java</span><br><span class=\"line\">  apt: pkg=java</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>安装postgres</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># tasks/postgres.yml</span><br><span class=\"line\">- name: placeholder for install postgres</span><br><span class=\"line\">  postgres_user: name=test password=test </span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>复用java模块</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tasks:</span><br><span class=\"line\">  - include tasks/java.yml</span><br><span class=\"line\">  - name: install mysql</span><br><span class=\"line\">  \t# to install mysql here</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果在我们task中需要使用某种参数，那么此时在我们includetask的时候我们可以通过以下的几种方式来传递参数,在tasks/java.yml中可以直接使用来使用参数</p>\n<ol>\n<li>\n<p>直接传递</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tasks:</span><br><span class=\"line\">  - include tasks/java.yml dest=/user/local/java</span><br><span class=\"line\">  - include tasks/postgres.yml dest=/user/local/postgres</span><br><span class=\"line\"># ansible 1.4之后参数可以为复合参数</span><br><span class=\"line\">tasks:</span><br><span class=\"line\">  - &#123;include: tasks/java.yml, dest=/user/local/java check=[javac, java]&#125;</span><br><span class=\"line\">  # include 中参数可以为List，也可以为dictory</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>通过vars模块来传递</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tasks:</span><br><span class=\"line\">  - include tasks/java.yml</span><br><span class=\"line\">    vars:</span><br><span class=\"line\">       dest: /user/local/java</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"role-in-ansible\">Role in ansible<a title=\"#role-in-ansible\" href=\"#role-in-ansible\"></a></h3>\n<p>ansible中的role的机制很简单。他的作用就是基于指定的目录结构，自动加载的相应的文件var_files, tasks,handlers，其实就相当于自动的include。指定的目录结构如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site.yml</span><br><span class=\"line\">webservers.yml</span><br><span class=\"line\">fooservers.yml</span><br><span class=\"line\">roles/</span><br><span class=\"line\">   common/</span><br><span class=\"line\">     files/</span><br><span class=\"line\">     templates/</span><br><span class=\"line\">     tasks/</span><br><span class=\"line\">     handlers/</span><br><span class=\"line\">     vars/</span><br><span class=\"line\">     meta/</span><br><span class=\"line\">     defaults/</span><br><span class=\"line\">   webservers/</span><br><span class=\"line\">     files/</span><br><span class=\"line\">     templates/</span><br><span class=\"line\">     tasks/</span><br><span class=\"line\">     handlers/</span><br><span class=\"line\">     vars/</span><br><span class=\"line\">     meta/</span><br><span class=\"line\">     defaults/</span><br></pre></td></tr></table></figure>\n<p>webserver的写法如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: webservers</span><br><span class=\"line\">  roles:</span><br><span class=\"line\">    - common</span><br><span class=\"line\">    - webservers</span><br></pre></td></tr></table></figure>\n<p>具体的加载规则(来自<a href=\"http://docs.ansible.com/playbooks_roles.html#roles\" target=\"_blank\">ansible官网</a>)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If roles/x/tasks/main.yml exists, tasks listed therein will be added to the play</span><br><span class=\"line\">If roles/x/handlers/main.yml exists, handlers listed therein will be added to the play</span><br><span class=\"line\">If roles/x/vars/main.yml exists, variables listed therein will be added to the play</span><br><span class=\"line\">If roles/x/meta/main.yml exists, any role dependencies listed therein will be added to the list of roles (1.3 and later)</span><br><span class=\"line\">Any copy tasks can reference files in roles/x/files/ without having to path them relatively or absolutely</span><br><span class=\"line\">Any script tasks can reference scripts in roles/x/files/ without having to path them relatively or absolutely</span><br><span class=\"line\">Any template tasks can reference files in roles/x/templates/ without having to path them relatively or absolutely</span><br><span class=\"line\">Any include tasks can reference files in roles/x/tasks/ without having to path them relatively or absolutely</span><br></pre></td></tr></table></figure>\n<h5 id=\"参数化role\">参数化role<a title=\"#参数化role\" href=\"#参数化role\"></a></h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: webservers</span><br><span class=\"line\">  roles:</span><br><span class=\"line\">    - common</span><br><span class=\"line\">    - &#123; role: foo_app_instance, dir: &#x27;/opt/a&#x27;,  port: 5000 &#125;</span><br><span class=\"line\">    - &#123; role: foo_app_instance, dir: &#x27;/opt/b&#x27;,  port: 5001 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#给webservers添加tag</span><br><span class=\"line\">---</span><br><span class=\"line\">- hosts: webservers</span><br><span class=\"line\">  roles:</span><br><span class=\"line\">    - &#123; role: foo, tags: [&quot;bar&quot;, &quot;baz&quot;] &#125;    </span><br></pre></td></tr></table></figure>\n<h5 id=\"执行顺序\">执行顺序<a title=\"#执行顺序\" href=\"#执行顺序\"></a></h5>\n<p>如果在playbook中，没有特别指定的tasks，则role总是会被首先执行。如果需要在role执行前执行特定的任务，可以使用pre_tasks,post_tasks来指定</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">- hosts: webservers</span><br><span class=\"line\"></span><br><span class=\"line\">  pre_tasks:</span><br><span class=\"line\">    - shell: echo &#x27;hello&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  roles:</span><br><span class=\"line\">    - &#123; role: some_role &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">    - shell: echo &#x27;still busy&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  post_tasks:</span><br><span class=\"line\">    - shell: echo &#x27;goodbye&#x27;</span><br></pre></td></tr></table></figure>\n<h5 id=\"role-默认参数\">Role 默认参数<a title=\"#role-默认参数\" href=\"#role-默认参数\"></a></h5>\n<p>Role有时候需要一些默认的参数，用来当使用者没有指定相应参数的时候可以完成预定的初始化。这些默认的参数放在role/defaults/main.yml,这些参数的优先级是最低的，当在其他地方指定相同的参数的时候，这个默认的参数就会被覆盖。</p>\n<h5 id=\"role-dependence\">role dependence<a title=\"#role-dependence\" href=\"#role-dependence\"></a></h5>\n<p>如果我们的app需要依赖java，我们的java安装作为一个role存在，这种情况下就用到role的dependence. dependence被存在role/meta/main.yml中，格式如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">dependencies:</span><br><span class=\"line\">  - &#123; role: java, dest: /usr/local/java &#125;</span><br></pre></td></tr></table></figure>\n<p>如果java此时还有依赖，如下所示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">dependencies:</span><br><span class=\"line\">  - &#123; role: xxx&#125;</span><br></pre></td></tr></table></figure>\n<p>则在加载我们app的时候，会递归的加载dependence。加载顺序如下<br>\n<strong>xxx -&gt; java -&gt; app</strong></p>\n<h3 id=\"实例---rails-+-postgres\">实例 --rails + postgres<a title=\"#实例---rails-+-postgres\" href=\"#实例---rails-+-postgres\"></a></h3>\n<h3 id=\"rails\">rails<a title=\"#rails\" href=\"#rails\"></a></h3>\n<hr>\n<h6 id=\"安装make,因为gem-的有的模块需要编译\">安装make,因为gem 的有的模块需要编译<a title=\"#安装make,因为gem-的有的模块需要编译\" href=\"#安装make,因为gem-的有的模块需要编译\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-</span><br><span class=\"line\"> name: install env </span><br><span class=\"line\">      apt: pkg=&#123;&#123;item&#125;&#125; state=present</span><br><span class=\"line\">      with_items:</span><br><span class=\"line\">        - make</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意事项\">注意事项<a title=\"#注意事项\" href=\"#注意事项\"></a></h3>\n<hr>\n<h6 id=\"add-java-repository-no-writable-keyring-found:-eof\">add java repository no writable keyring found: eof<a title=\"#add-java-repository-no-writable-keyring-found:-eof\" href=\"#add-java-repository-no-writable-keyring-found:-eof\"></a></h6>\n<p>需要使用sudo来进行repository的添加</p>\n<h6 id=\"role中必须有一个目录不为空，负责会报错\">role中必须有一个目录不为空，负责会报错<a title=\"#role中必须有一个目录不为空，负责会报错\" href=\"#role中必须有一个目录不为空，负责会报错\"></a></h6>\n<h6 id=\"死活都找不到bundle的解决方法\">死活都找不到bundle的解决方法<a title=\"#死活都找不到bundle的解决方法\" href=\"#死活都找不到bundle的解决方法\"></a></h6>\n<p>gem install 的bundle在我们bundle install的时候总是会找不到我们的bundle，尽管我们使用rbenv 装的ruby，此时可以通过(添加sudo_user的方法)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- name: install gems for app</span><br><span class=\"line\">  gem: name=&#123;&#123;item&#125;&#125; state=present</span><br><span class=\"line\">  sudo_user: vagrant</span><br><span class=\"line\">  with_items:</span><br><span class=\"line\">    - bundler</span><br></pre></td></tr></table></figure>\n<h6 id=\"could-not-find-a-javascript-runtime\">Could not find a JavaScript runtime<a title=\"#could-not-find-a-javascript-runtime\" href=\"#could-not-find-a-javascript-runtime\"></a></h6>\n<p>gem ‘therubyracer’<br>\ngem ‘execjs’</p>\n<h6 id=\"make:-g++:-command-not-found\">make: g++: Command not found<a title=\"#make:-g++:-command-not-found\" href=\"#make:-g++:-command-not-found\"></a></h6>\n<p>apt-get install g++</p>\n<h6 id=\"migration-are-pending\">migration are pending<a title=\"#migration-are-pending\" href=\"#migration-are-pending\"></a></h6>\n<p>rake db:migrate</p>\n<h6 id=\"run-rails-server-in-production-and-daemon-mode\">run rails server in production and daemon mode<a title=\"#run-rails-server-in-production-and-daemon-mode\" href=\"#run-rails-server-in-production-and-daemon-mode\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails server -e production -d </span><br></pre></td></tr></table></figure>\n<h6 id=\"can't-find-the-'libpq-fe.h-header\">Can’t find the 'libpq-fe.h header<a title=\"#can't-find-the-'libpq-fe.h-header\" href=\"#can't-find-the-'libpq-fe.h-header\"></a></h6>\n<p>安装pg gem包的时候需要编译，编译过程中可能需要依赖文件，pg gem会进行一层包装，所有的依赖都在libpq-dev. 使用apt模块安装即可。</p>\n<h6 id=\"missing-secret_key_base-for-'production'-environment,-set-this-value-in-config/secrets.yml\">Missing <code>secret_key_base</code> for ‘production’ environment, set this value in <code>config/secrets.yml</code><a title=\"#missing-secret_key_base-for-'production'-environment,-set-this-value-in-config/secrets.yml\" href=\"#missing-secret_key_base-for-'production'-environment,-set-this-value-in-config/secrets.yml\"></a></h6>\n<p>此时可以通过dotenv-rails管理env配置文件。所有的配置都会卸载一个.env的配置文件中。<br>\ngem ‘dotenv-rails’</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// file .env</span><br><span class=\"line\">SECRET_KEY_BASE=3eb6db5a9026c547c72708438d496d942e976b252138db7e4e0ee5edd7539457d3ed0fa02ee5e7179420ce5290462018591adaf5f42adcf855da04877827def2</span><br></pre></td></tr></table></figure>\n<p>在config/enviroment.rb中添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require &#x27;dotenv&#x27;</span><br><span class=\"line\">Dotenv.load</span><br></pre></td></tr></table></figure>\n<h6 id=\"用以下代码来生成secret_key_base\">用以下代码来生成secret_key_base<a title=\"#用以下代码来生成secret_key_base\" href=\"#用以下代码来生成secret_key_base\"></a></h6>\n<p>require ‘securerandom’<br>\nSecureRandom.hex(64)</p>\n<p>ssh -i /Users/twer/.vagrant.d/insecure_private_key <a href=\"mailto:vagrant@127.0.0.1\">vagrant@127.0.0.1</a> -p 2222</p>\n<p>scp -P 2222 -i /Users/twer/.vagrant.d/insecure_private_key ./.env <a href=\"mailto:vagrant@127.0.0.1\">vagrant@127.0.0.1</a>:~</p>\n<h6 id=\"rails-migrate-db\">rails migrate db<a title=\"#rails-migrate-db\" href=\"#rails-migrate-db\"></a></h6>\n<p><code>rake db:migrate RAILS_ENV=production</code></p>\n<h6 id=\"peer-authentication-failed-for-user-&quot;twer&quot;\">Peer authentication failed for user “twer”<a title=\"#peer-authentication-failed-for-user-&quot;twer&quot;\" href=\"#peer-authentication-failed-for-user-&quot;twer&quot;\"></a></h6>\n<p>尝试psql -U twer -W -h localhost -d database, 如果这条命令可以正确执行，则配置database的配置如下</p>\n<p>rdms production database configuration</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">production:</span><br><span class=\"line\">  adapter: postgresql</span><br><span class=\"line\">  pool: 5</span><br><span class=\"line\">  timeout: 5000</span><br><span class=\"line\">  database: order</span><br><span class=\"line\">  username: twer</span><br><span class=\"line\">  password: twer</span><br><span class=\"line\">  host: localhost</span><br></pre></td></tr></table></figure>\n<p>mongoid production configration</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">production:</span><br><span class=\"line\">  sessions:</span><br><span class=\"line\">    # Defines the default session. (required)</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      # Defines the name of the default database that Mongoid can connect to.</span><br><span class=\"line\">      # (required).</span><br><span class=\"line\">      database: mongodb_production</span><br><span class=\"line\">      # Provides the hosts the default session can connect to. Must be an array</span><br><span class=\"line\">      # of host:port pairs. (required)</span><br><span class=\"line\">      hosts:</span><br><span class=\"line\">        - localhost:27017</span><br><span class=\"line\">      options:</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>xml test</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash.from_xml(x)[&quot;message&quot;][&quot;param&quot;].inject(&#123;&#125;) do |result, elem| </span><br><span class=\"line\">  result[elem[&quot;name&quot;]] = elem[&quot;value&quot;] </span><br><span class=\"line\">  result </span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n","prev":{"title":"为什么我们需要NoSQL -- mongodb","link":"2014/07/28/why_mongodb"},"next":{"title":"时间驱动建模","link":"2014/07/20/accounting-driven-modeling"},"plink":"https://kopinions.com/2014/07/25/ansible-usage/","toc":[{"id":"inventory-配置","title":"inventory 配置","index":"1"},{"id":"playbook","title":"Playbook","index":"2"},{"id":"include-tasks","title":"Include tasks","index":"3"},{"id":"role-in-ansible","title":"Role in ansible","index":"4"},{"id":"实例---rails-+-postgres","title":"实例 --rails + postgres","index":"5"},{"id":"rails","title":"rails","index":"6"},{"id":"注意事项","title":"注意事项","index":"7"}],"reading_time":"1747 字约 12 分钟"}