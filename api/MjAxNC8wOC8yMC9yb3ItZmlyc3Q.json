{"title":"初尝ruby on rails","date":"2014-08-20T14:44:20.000Z","date_formatted":{"ll":"2014年8月20日","L":"2014/08/20","MM-DD":"08-20"},"link":"2014/08/20/ror-first","tags":["framework","language"],"categories":["framework","language"],"updated":"2022-09-29T15:48:22.621Z","content":"<p>Ruby on Rails（官方简称为Rails，亦被简称为RoR），是一个使用Ruby语言写的开源Web应用框架，它是严格按照MVC结构开发的。它努力使自身保持简单，来使实际的应用开发时的代码更少，使用最少的配置。</p>\n<!-- more -->\n<h3 id=\"rails-rspec\">rails Rspec<a title=\"#rails-rspec\" href=\"#rails-rspec\"></a></h3>\n<h6 id=\"1.-配置rspec环境\">1. 配置rspec环境<a title=\"#1.-配置rspec环境\" href=\"#1.-配置rspec环境\"></a></h6>\n<ol>\n<li>echo ‘gem “rspec-rails”, :group =&gt; [:development, :test]’ &gt;&gt; Gemfile</li>\n<li>bundle install</li>\n<li>rails generate rspec:install</li>\n<li>rails generate scaffold product</li>\n<li>rails generate rspec:controller product 为product controller生成测试文件</li>\n<li>rake db:migrate &amp;&amp; rake db:test:prepare</li>\n<li>rake spec</li>\n</ol>\n<p>测试中总是会出现： circular require considered harmful<br>\n此时可以修改.rspec文件，将该文件中的–warnings配置删除</p>\n<h6 id=\"2.-用rspec测试api的时候经常会出现以下现象：\">2. 用rspec测试api的时候经常会出现以下现象：<a title=\"#2.-用rspec测试api的时候经常会出现以下现象：\" href=\"#2.-用rspec测试api的时候经常会出现以下现象：\"></a></h6>\n<ol>\n<li>在浏览器中返回结果正常</li>\n<li>在rspec中死活都接受不到json数据</li>\n</ol>\n<p>此时可以加入下面一条语句：render_views</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe ProductController do</span><br><span class=\"line\">\trender_views</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"3.-rails-rspect-testing-double\">3. rails rspect testing double<a title=\"#3.-rails-rspect-testing-double\" href=\"#3.-rails-rspect-testing-double\"></a></h6>\n<p><a href=\"https://github.com/rspec/rspec-mocks\" target=\"_blank\">rspec-mocks</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect(Product).to receive(:new).with(&#123;:name =&gt; &quot;name&quot;&#125;).and_call_original</span><br><span class=\"line\">expect_any_instance_of(Product).to receive(:save).once.and_call_original</span><br><span class=\"line\">expect(Product).to receive(:find) &#123;Product.new(:name =&gt; &quot;name&quot;, :id =&gt; 1)&#125;</span><br><span class=\"line\">当需要stub一个find的exception的时候</span><br><span class=\"line\">expect(Price).to receive(:find).with(2).and_raise(ActiveRecord::RecordNotFound)</span><br></pre></td></tr></table></figure>\n<h6 id=\"4.-测试api-get\">4. 测试API GET<a title=\"#4.-测试api-get\" href=\"#4.-测试api-get\"></a></h6>\n<ol>\n<li>\n<p>经常我们需要测试API的json的结果，所以此时我们的代码里就不免的出现很多的JSON.parse，此时我们可以使用Monkey Patch，来讲我们的Request来扩展。代码如下：<br>\n在Spec目录下新建文件夹：support, 即/spec/support/request_helper.rb</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module Requests</span><br><span class=\"line\">  module JsonHelpers</span><br><span class=\"line\">    def json</span><br><span class=\"line\">      @json ||= JSON.parse(response.body)</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>配置rspec为我们的controller测试添加我们的扩展helper，在rails_helper中添加，</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 我们不需要手动的require刚才写的模块，因为在我们放的目录在rail_helper中已经被require过了。</span><br><span class=\"line\">Dir[Rails.root.join(&quot;spec/support/**/*.rb&quot;)].each &#123; |f| require f &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">config.include Requests::JsonHelpers,:type=&gt;:controller</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在controller的spec中使用json方法</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect(json).tohave_key(&#x27;test_key&#x27;)</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在测试中我们需要检查uri，此时就不免会用到uri_for,此时需要注意的是，这些products，show,都必须是小写，convension over configration <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url_for(&#123;:controller =&gt; &#x27;products&#x27;, :action =&gt; &#x27;show&#x27;, :id =&gt; @product.id.to_s&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>404的时候可以使用mock来测试</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect(Order).to receive(:find).with(1).and_return(Order.new)</span><br></pre></td></tr></table></figure>\n<p>但是需要注意的是如果controller中使用到父资源，也需要测试父资源的404，而且在测试中需要注意的是Mock的时候需要Mock两个ActiveRecord的对象，不然会因为一些Exception导致测试失败。<br>\n5.</p>\n<h6 id=\"5.-测试api-post\">5. 测试API POST<a title=\"#5.-测试api-post\" href=\"#5.-测试api-post\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect(Product).to receive(:new).with(hash_including(&#x27;name&#x27; =&gt; &#x27;name&#x27;, &#x27;location&#x27;=&gt; &#x27;location&#x27;))</span><br><span class=\"line\">post :create, &#123;format: :json, &#x27;name&#x27; =&gt; &#x27;name&#x27;, &#x27;location&#x27; =&gt; &#x27;location&#x27;&#125;</span><br><span class=\"line\">      expect(response).to have_http_status 201</span><br></pre></td></tr></table></figure>\n<h6 id=\"6.\">6.<a title=\"#6.\" href=\"#6.\"></a></h6>\n<h6 id=\"7.-circular-dependcen\">7. circular dependcen<a title=\"#7.-circular-dependcen\" href=\"#7.-circular-dependcen\"></a></h6>\n<p>有可能是因为文件名称和module名称不一致导致</p>\n<h6 id=\"8.-配置rubymine-可能是因为ruby的sdk版本不一致的原因，所以ruby需要将ruby版本调至与terminal使用ruby版本，此时就可以正常的work\">8. 配置rubymine 可能是因为ruby的sdk版本不一致的原因，所以ruby需要将ruby版本调至与terminal使用ruby版本，此时就可以正常的work<a title=\"#8.-配置rubymine-可能是因为ruby的sdk版本不一致的原因，所以ruby需要将ruby版本调至与terminal使用ruby版本，此时就可以正常的work\" href=\"#8.-配置rubymine-可能是因为ruby的sdk版本不一致的原因，所以ruby需要将ruby版本调至与terminal使用ruby版本，此时就可以正常的work\"></a></h6>\n<h3 id=\"rails-rabl\">Rails Rabl<a title=\"#rails-rabl\" href=\"#rails-rabl\"></a></h3>\n<h6 id=\"1.-安装\">1. 安装<a title=\"#1.-安装\" href=\"#1.-安装\"></a></h6>\n<p>gem ‘rabl’</p>\n<h6 id=\"2.-配置的tips\">2. 配置的tips<a title=\"#2.-配置的tips\" href=\"#2.-配置的tips\"></a></h6>\n<p>在config/initializers下新建文件rabl_init.rb</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require &#x27;rabl&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Rabl.configure do |config|</span><br><span class=\"line\">  config.include_json_root = false</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>其中我们会经常用到的配置主要有：<br>\n1.include_json_root = false，当为false的时候会告诉rabl默认不为每个元素创建根</p>\n<pre><code>object @product\n// include_json_root == true\n&#123;&quot;product&quot;: &#123;&quot;name&quot;: &quot;name&quot;&#125;&#125;\n// incldue_json_root == false\n&#123;&quot;name&quot;: &quot;name&quot;&#125;\n</code></pre>\n<ol start=\"2\">\n<li>replace_nil_values_with_empty_strings 替换我们在json里的null,替换为空字符串</li>\n<li>include_child_root 默认显示child的根，但是如果设置为false，此时不在结果里显示child的根</li>\n</ol>\n<h6 id=\"3.-返回detail对象，不包括根对象\">3. 返回detail对象，不包括根对象<a title=\"#3.-返回detail对象，不包括根对象\" href=\"#3.-返回detail对象，不包括根对象\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object false</span><br><span class=\"line\">node(:name)&#123; @product.name&#125;</span><br><span class=\"line\">node(:id) &#123;@product.id&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2.-返回集合对象，但是集合中的对象不需要有root对象\">2. 返回集合对象，但是集合中的对象不需要有root对象<a title=\"#2.-返回集合对象，但是集合中的对象不需要有root对象\" href=\"#2.-返回集合对象，但是集合中的对象不需要有root对象\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">collection @prices, :object_root=&gt;false</span><br></pre></td></tr></table></figure>\n<h6 id=\"3.-返回对象的uri\">3. 返回对象的uri<a title=\"#3.-返回对象的uri\" href=\"#3.-返回对象的uri\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object false</span><br><span class=\"line\">node(&quot;price&quot;) &#123;@price.price&#125;</span><br><span class=\"line\">node :uri do</span><br><span class=\"line\">    product_price_url</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h6 id=\"4.-返回集合对象的uri\">4. 返回集合对象的uri<a title=\"#4.-返回集合对象的uri\" href=\"#4.-返回集合对象的uri\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">collection @prices, :object_root=&gt;false</span><br><span class=\"line\">attributes :price, :id</span><br><span class=\"line\">node :uri do |price|</span><br><span class=\"line\">    product_price_url :id =&gt; price.id</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h3 id=\"rails-postgresql\">rails postgresql<a title=\"#rails-postgresql\" href=\"#rails-postgresql\"></a></h3>\n<h6 id=\"1.-rails-new-myapp---database=postgresql\">1. rails new myapp --database=postgresql<a title=\"#1.-rails-new-myapp---database=postgresql\" href=\"#1.-rails-new-myapp---database=postgresql\"></a></h6>\n<p>如果一个项目没有用上面的命令创建的，此时我们也可以通过修改配置来使用postgres<br>\n修改Gemfile，将其中的sqllite的gem 删除,加入 gem ‘pg’<br>\n然后修改database.yml将其中的adapter: sqllite3改为 adapter: postgresql. 然后把db的名称改了就好。样本如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default: &amp;default</span><br><span class=\"line\">  adapter: postgresql</span><br><span class=\"line\">  pool: 5</span><br><span class=\"line\">  timeout: 5000</span><br><span class=\"line\"></span><br><span class=\"line\">development:</span><br><span class=\"line\">  &lt;&lt;: *default</span><br><span class=\"line\">  database: leave_development</span><br></pre></td></tr></table></figure>\n<h6 id=\"2.-bundle-install\">2. bundle install<a title=\"#2.-bundle-install\" href=\"#2.-bundle-install\"></a></h6>\n<p>其中有可能出问题的是</p>\n<ol>\n<li>ERROR: Failed to build gem native extension  checking for pg_config… no<br>\n此时是因为postgres的配置程序找不到的原因，可以配置postgres的bin的路径到path中，然后再次安装就可以了</li>\n<li>pg_ext.bundle: [BUG] Segmentation fault<br>\n此时有可能是因为在1.9.3环境下装的pg，所以pg是使用1.9.3的环境来编译的，但是如果切换到2.1.1的ruby环境，此时就会发现1.9.3编译的pg，是不能用的，所以就会报段错误。</li>\n<li>可以只安装指定环境的依赖如<br>\nbundle install --without test development</li>\n</ol>\n<h6 id=\"3.-createuser-test0629--p--d\">3. createuser test0629 -P -d<a title=\"#3.-createuser-test0629--p--d\" href=\"#3.-createuser-test0629--p--d\"></a></h6>\n<p>-d的意思是可以允许test0629创建新的database<br>\n-P的意思指定密码，可以允许test0629登录</p>\n<h6 id=\"4.-配置database.yml文件,加入usename和password配置，配置好的文件如下\">4. 配置database.yml文件,加入usename和password配置，配置好的文件如下<a title=\"#4.-配置database.yml文件,加入usename和password配置，配置好的文件如下\" href=\"#4.-配置database.yml文件,加入usename和password配置，配置好的文件如下\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default: &amp;default</span><br><span class=\"line\">  adapter: postgresql</span><br><span class=\"line\">  encoding: unicode</span><br><span class=\"line\">  database: ruby-development</span><br><span class=\"line\">  pool: 5</span><br><span class=\"line\">  username: test0629</span><br><span class=\"line\">  password: test0629</span><br><span class=\"line\"></span><br><span class=\"line\">development:</span><br><span class=\"line\">  &lt;&lt;: *default</span><br><span class=\"line\">  datebase: ruby-test</span><br></pre></td></tr></table></figure>\n<h6 id=\"5.-rake-db:setup-此时rails就可以将database-setup起来\">5. rake db:setup 此时rails就可以将database setup起来<a title=\"#5.-rake-db:setup-此时rails就可以将database-setup起来\" href=\"#5.-rake-db:setup-此时rails就可以将database-setup起来\"></a></h6>\n<p>setup</p>\n<h6 id=\"6.-rails-generate-model-model-name:string\">6. rails generate model Model name:string<a title=\"#6.-rails-generate-model-model-name:string\" href=\"#6.-rails-generate-model-model-name:string\"></a></h6>\n<h6 id=\"7.-rake-db:migrate-此时所有的db的工作就完成了\">7. rake db:migrate 此时所有的db的工作就完成了<a title=\"#7.-rake-db:migrate-此时所有的db的工作就完成了\" href=\"#7.-rake-db:migrate-此时所有的db的工作就完成了\"></a></h6>\n<p>Model.create! 加感叹号的意思是如果因为validation失败，model没有创建成功，此时会抛出异常。</p>\n<h3 id=\"rails-mongo\">Rails Mongo<a title=\"#rails-mongo\" href=\"#rails-mongo\"></a></h3>\n<h6 id=\"1.-rails-new-app---skip-active-record\">1. rails new app --skip-active-record<a title=\"#1.-rails-new-app---skip-active-record\" href=\"#1.-rails-new-app---skip-active-record\"></a></h6>\n<p>跳过默认生成activerecord的模块</p>\n<h6 id=\"2.-安装能支持rails-4-的mogoid模块\">2. 安装能支持rails 4 的mogoid模块<a title=\"#2.-安装能支持rails-4-的mogoid模块\" href=\"#2.-安装能支持rails-4-的mogoid模块\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem &#x27;mongoid&#x27;, &#x27;~&gt; 4.0.0&#x27;</span><br><span class=\"line\">gem &#x27;bson_ext&#x27;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3.-生成monogid的默认的配置文件\">3. 生成monogid的默认的配置文件<a title=\"#3.-生成monogid的默认的配置文件\" href=\"#3.-生成monogid的默认的配置文件\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rails generate mongoid:config</span><br></pre></td></tr></table></figure>\n<h6 id=\"4.-修改spec_helper.rb,每个测试都重新准备数据\">4. 修改spec_helper.rb,每个测试都重新准备数据<a title=\"#4.-修改spec_helper.rb,每个测试都重新准备数据\" href=\"#4.-修改spec_helper.rb,每个测试都重新准备数据\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RSpec.configure do |config|</span><br><span class=\"line\">  config.before(:each) do</span><br><span class=\"line\">    Mongoid::Sessions.default.collections.select &#123;|c| c.name !~ /system/ &#125;.each(&amp;:drop)</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h6 id=\"5.-测试404只坑\">5. 测试404只坑<a title=\"#5.-测试404只坑\" href=\"#5.-测试404只坑\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect(Product).to receive(:find).and_raise(Mongoid::Errors::DocumentNotFound.new(Product, &#x27;&#x27;))</span><br></pre></td></tr></table></figure>\n<p>当mongoid mock一个没有找到的错误的时候需要raise一个Mongoid::Errors::DocumentNotFound对象。但是这个对象和我们在ActiveRecord遇到的不同，这个raise的对象必须是被初始化的。</p>\n<h6 id=\"6.-mongoid-relation\">6. mongoid relation<a title=\"#6.-mongoid-relation\" href=\"#6.-mongoid-relation\"></a></h6>\n<ol>\n<li>\n<p>embeds_one + embeded_in</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Computer</span><br><span class=\"line\">\tinclude Mongoid::Document</span><br><span class=\"line\">\tembeds_one :cpu</span><br><span class=\"line\">end</span><br><span class=\"line\">class Cpu</span><br><span class=\"line\">\tinclude Mongoid::Document</span><br><span class=\"line\">\tembeded_in :computer</span><br><span class=\"line\">\tfield :name, type: String</span><br><span class=\"line\">end</span><br><span class=\"line\">// 存储的数据结构</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;_id&quot; : ObjectId(&quot;4d3ed089fb60ab534684b7e9&quot;),</span><br><span class=\"line\">  &quot;cpu&quot; : &#123;</span><br><span class=\"line\">    &quot;_id&quot; : ObjectId(&quot;4d3ed089fb60ab534684b7e0&quot;),</span><br><span class=\"line\">    &quot;name&quot; : &quot;Intel&quot;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>可以使用cpu.computer 来获取或者cpu.computer= 来为cpu的parent（computer）来赋值，需要手动的save<br>\n可以使用compter.cpu获取compter的cpu，或者使用computer.cpu = 来赋值cpu。这种情况下如果computer已经存储过，则cpu赋值后会被自动的save<br>\n2. embeds_many + embeded_in</p>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Computer</span><br><span class=\"line\">\tinclude Mongoid::Document</span><br><span class=\"line\">\tembeds_many :cpus</span><br><span class=\"line\">end</span><br><span class=\"line\">class Cpu</span><br><span class=\"line\">\tinclude Mongoid::Document</span><br><span class=\"line\">\tembeded_in :computer</span><br><span class=\"line\">\tfield :name, type: String</span><br><span class=\"line\">end\t</span><br><span class=\"line\">// 存储的数据结构</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   &quot;_id&quot; : ObjectId(&quot;4d3ed089fb60ab534684b7e9&quot;),</span><br><span class=\"line\">  &quot;cpus&quot; : [</span><br><span class=\"line\">  \t&#123;</span><br><span class=\"line\">    \t&quot;_id&quot; : ObjectId(&quot;4d3ed089fb60ab534684b7e0&quot;),</span><br><span class=\"line\">\t    &quot;name&quot; : &quot;Intel&quot;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n同embeds_one，mongoid也为我们提供了很多函数用来维护relation。  \n1. computer.cpus 获取所有computer的cpu，computer.cpus = [Cpu.new] || computer.cpus = nil 为computer赋值，如果nil，则删除cpu。如果computer已经被save过，则computer.cpus 的赋值操作会被自动保存。  \n2. cpu.computer || cpu.computer = Cpu.new 为cpu指定parent(computer), 不需要手动保存，因为这个关系会在保存computer的时候自动保存。\n3. computer.cpus &lt;&lt; Cpu.new || computer.cpus.push(Cpu.new),如果computer已经被持久化，那么此时cpus的赋值会被自动保存。\n4. computer.cpus.find(id) find cpus by id\n</code></pre>\n<ol start=\"3\">\n<li>\n<p>has_one + belongs_to</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Computer</span><br><span class=\"line\">\tinclude Mongoid::Document</span><br><span class=\"line\">\thas_one :display</span><br><span class=\"line\">end</span><br><span class=\"line\">class Cpu</span><br><span class=\"line\">\tinclude Mongoid::Document</span><br><span class=\"line\">\tbelongs_to :computer</span><br><span class=\"line\">\tfield :name, type: String</span><br><span class=\"line\">end\t</span><br><span class=\"line\">// 存储的数据结构</span><br><span class=\"line\">// computer</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;4d3ed089fb60ab534684b7e9&quot;) &#125;</span><br><span class=\"line\">// display</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;_id&quot; : ObjectId(&quot;4d3ed089fb60ab534684b7f1&quot;),</span><br><span class=\"line\">  &quot;computer_id&quot; : ObjectId(&quot;4d3ed089fb60ab534684b7e9&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>可以执行的操作基本上跟embeds_one一样</p>\n<ol start=\"4\">\n<li>\n<p>has_many + belongs_to</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Computer</span><br><span class=\"line\">\tinclude Mongoid::Document</span><br><span class=\"line\">\thas_many :keyboard</span><br><span class=\"line\">end</span><br><span class=\"line\">class Cpu</span><br><span class=\"line\">\tinclude Mongoid::Document</span><br><span class=\"line\">\tbelongs_to :computer</span><br><span class=\"line\">\tfield :name, type: String</span><br><span class=\"line\">end\t</span><br><span class=\"line\">// 存储的数据结构</span><br><span class=\"line\">// computer</span><br><span class=\"line\">&#123; &quot;_id&quot; : ObjectId(&quot;4d3ed089fb60ab534684b7e9&quot;) &#125;</span><br><span class=\"line\">// keyboard，虽然在形式上没有表现出来一对多的关系，但是在存储的collection中多个keybord的computer_id对应到同一个computer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;_id&quot; : ObjectId(&quot;4d3ed089fb60ab534684b7f1&quot;),</span><br><span class=\"line\">  &quot;computer_id&quot; : ObjectId(&quot;4d3ed089fb60ab534684b7e9&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"rails-activerecode-validation\">Rails ActiveRecode validation<a title=\"#rails-activerecode-validation\" href=\"#rails-activerecode-validation\"></a></h3>\n<h6 id=\"1.-不为空验证\">1. 不为空验证<a title=\"#1.-不为空验证\" href=\"#1.-不为空验证\"></a></h6>\n<p>presence: true 告诉Model的validtor，上面的字段都必须存在，并且都不为空。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">validates :title, :description, :image_url, presence: true</span><br></pre></td></tr></table></figure>\n<h6 id=\"2.-数字valiation\">2. 数字valiation<a title=\"#2.-数字valiation\" href=\"#2.-数字valiation\"></a></h6>\n<p>验证price必须大于0， numericality用来验证数字</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">validates :price, numericality: &#123;greater_than_or_equal_to: 0.01&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"3.-唯一性验证\">3. 唯一性验证<a title=\"#3.-唯一性验证\" href=\"#3.-唯一性验证\"></a></h6>\n<p>验证我们的title必须是唯一的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">validates :title, uniqueness: true</span><br></pre></td></tr></table></figure>\n<h6 id=\"4.-正则表达式验证后缀\">4. 正则表达式验证后缀<a title=\"#4.-正则表达式验证后缀\" href=\"#4.-正则表达式验证后缀\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">validates :image_url, allow_blank: true, format: </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">   with: %r&#123;\\.( gif | jpg | png)\\ Z&#125; i, </span><br><span class=\"line\">   message: &#x27;must be a URL for GIF, JPG or PNG image.&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"rails-model-active-测试\">Rails Model Active 测试<a title=\"#rails-model-active-测试\" href=\"#rails-model-active-测试\"></a></h3>\n<h6 id=\"1.-使用error,invalid?\">1. 使用error,invalid?<a title=\"#1.-使用error,invalid?\" href=\"#1.-使用error,invalid?\"></a></h6>\n<p>使用error和invalid? 来完成model的测试，我们可以通过any?来查看是否有相应attribute的error</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test &quot;product attributes must not be empty&quot; do </span><br><span class=\"line\">\tproduct = Product.new</span><br><span class=\"line\">\tassert product.invalid? </span><br><span class=\"line\">\tassert product.errors[: title]. any? </span><br><span class=\"line\">\tassert product.errors[: description]. any? </span><br><span class=\"line\">\tassert product.errors[: price]. any? </span><br><span class=\"line\">\tassert product.errors[: image_url]. any? </span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h6 id=\"2.-error-message\">2. Error message<a title=\"#2.-error-message\" href=\"#2.-error-message\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test &quot;product price must be positive&quot; do </span><br><span class=\"line\">\tproduct = Product.new( title: &quot;My Book Title&quot;, description: &quot;yyy&quot;, image_url: &quot;zzz.jpg&quot;) </span><br><span class=\"line\">\tproduct.price = -1 </span><br><span class=\"line\">\tassert product.invalid? </span><br><span class=\"line\">\tassert_equal [&quot;must be greater than or equal to 0.01&quot;], product.errors[: price] </span><br><span class=\"line\">\tproduct.price = 0 </span><br><span class=\"line\">\tassert product.invalid? </span><br><span class=\"line\">\tassert_equal [&quot;must be greater than or equal to 0.01&quot;], product.errors[: price] </span><br><span class=\"line\">\tproduct.price = 1 </span><br><span class=\"line\">\tassert product.valid? </span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h6 id=\"3.-fixtures\">3. Fixtures<a title=\"#3.-fixtures\" href=\"#3.-fixtures\"></a></h6>\n<p>默认的Rails会在fixture下为我们创建model的fixture文件，这个文件的名称和我们model的名字是一一对应的。<br>\n这个数据的格式yaml格式的数据文件。</p>\n<h3 id=\"rails-multipart-form-upload\">Rails MultiPart Form Upload<a title=\"#rails-multipart-form-upload\" href=\"#rails-multipart-form-upload\"></a></h3>\n<h6 id=\"1.-创建一个可以上传文件的form\">1. 创建一个可以上传文件的Form<a title=\"#1.-创建一个可以上传文件的form\" href=\"#1.-创建一个可以上传文件的form\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%= form_tag(uploads_url, :multipart =&gt; true, :method =&gt; :post) do %&gt;</span><br><span class=\"line\">    &lt;%= file_field_tag &#x27;name_field&#x27; %&gt;</span><br><span class=\"line\">    &lt;input type=&quot;submit&quot; value=&quot;submit&quot;/&gt;</span><br><span class=\"line\">&lt;% end %&gt;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2.-指定路径\">2. 指定路径<a title=\"#2.-指定路径\" href=\"#2.-指定路径\"></a></h6>\n<p>如果此时需要两个post作为创建的入口，一个作为批量上传的POST，一个作为单个Form创建的POST，此时可以按照如下方式修改route</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resources :uploads do</span><br><span class=\"line\">    collection do</span><br><span class=\"line\">      post &#x27;upload&#x27;</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br></pre></td></tr></table></figure>\n<h6 id=\"3.-创建可以接受文件的action\">3. 创建可以接受文件的action<a title=\"#3.-创建可以接受文件的action\" href=\"#3.-创建可以接受文件的action\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def upload</span><br><span class=\"line\">\tuploaded_io = params[:picture]</span><br><span class=\"line\">    original_filename = uploaded_io.original_filename</span><br><span class=\"line\">    File.open(Rails.root.join(&#x27;public&#x27;, original_filename), &#x27;wb&#x27;) do |file|</span><br><span class=\"line\">      file.write(uploaded_io.read)</span><br><span class=\"line\">    end</span><br><span class=\"line\">    csv_text = File.read(Rails.root.join(&#x27;public&#x27;, original_filename))</span><br><span class=\"line\">    csv = CSV.parse(csv_text, :headers =&gt; true)</span><br><span class=\"line\">    csv.each do |row|</span><br><span class=\"line\">      # deal with the row</span><br><span class=\"line\">      puts row</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h6 id=\"4.-测试\">4. 测试<a title=\"#4.-测试\" href=\"#4.-测试\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe &#x27;upload&#x27; do</span><br><span class=\"line\">    it &#x27;should upload file&#x27; do</span><br><span class=\"line\">      file = fixture_file_upload(&#x27;price.csv&#x27;, &#x27;text/csv&#x27;)</span><br><span class=\"line\">      post :upload, :picture =&gt; file</span><br><span class=\"line\">      expect(response.status).to eq(200)</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h3 id=\"rails-bootstrap\">Rails bootstrap<a title=\"#rails-bootstrap\" href=\"#rails-bootstrap\"></a></h3>\n<h6 id=\"1.-安装-1\">1. 安装<a title=\"#1.-安装-1\" href=\"#1.-安装-1\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem &quot;twitter-bootstrap-rails&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">rails generate bootstrap:install static</span><br></pre></td></tr></table></figure>\n<h6 id=\"2.-配置\">2. 配置<a title=\"#2.-配置\" href=\"#2.-配置\"></a></h6>\n<p>在app/assets/stylesheets下新建文件application.css.scss, 并在其中添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import &quot;bootstrap-sprockets&quot;;</span><br><span class=\"line\">@import &quot;bootstrap&quot;;</span><br></pre></td></tr></table></figure>\n<p>在app/assets/javascript/application.css.scss中添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//= require jquery</span><br><span class=\"line\">//= require bootstrap-sprockets</span><br></pre></td></tr></table></figure>\n<h6 id=\"3.-编译\">3. 编译<a title=\"#3.-编译\" href=\"#3.-编译\"></a></h6>\n<pre><code>rake assets:precompile\n</code></pre>\n<h6 id=\"4.-heroku-配置\">4. heroku 配置<a title=\"#4.-heroku-配置\" href=\"#4.-heroku-配置\"></a></h6>\n<p>在production.rb里面添加下面的配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.cache_classes = true</span><br><span class=\"line\">config.serve_static_assets = true</span><br><span class=\"line\">config.assets.compile = true</span><br><span class=\"line\">config.assets.digest = true</span><br></pre></td></tr></table></figure>\n<h3 id=\"rails-erb\">Rails erb<a title=\"#rails-erb\" href=\"#rails-erb\"></a></h3>\n<p>csrf<br>\n当使用jquery提交Form的时候，rail会做默认的跨站攻击检查，所以此时我们需要给我们的form表单天剑csrf的header</p>\n<ol>\n<li>\n<p>在application.html.erb中确保有&lt;%= csrf_meta_tag %&gt;</p>\n</li>\n<li>\n<p>为jquery ajax添加csrf header</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123; url: &#x27;YOUR URL HERE&#x27;,</span><br><span class=\"line\">  type: &#x27;POST&#x27;,</span><br><span class=\"line\">  beforeSend: function(xhr) &#123;xhr.setRequestHeader(&#x27;X-CSRF-Token&#x27;, $(&#x27;meta[name=&quot;csrf-token&quot;]&#x27;).attr(&#x27;content&#x27;))&#125;,</span><br><span class=\"line\">  data: &#x27;someData=&#x27; + someData,</span><br><span class=\"line\">  success: function(response) &#123;</span><br><span class=\"line\">    $(&#x27;#someDiv&#x27;).html(response);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h6 id=\"link_to\">link_to<a title=\"#link_to\" href=\"#link_to\"></a></h6>\n<p>用来创建一个连接</p>\n<h6 id=\"button_to\">button_to<a title=\"#button_to\" href=\"#button_to\"></a></h6>\n<p>用来创建一个可以post的form</p>\n<h3 id=\"rails-route\">Rails route<a title=\"#rails-route\" href=\"#rails-route\"></a></h3>\n<p>root “product#index”, as: ‘store’<br>\n这里的as将会为我们创建一个store_path的方法</p>\n<p>如果我们有如下的route</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resources :products do</span><br><span class=\"line\">    resources :prices</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<ol>\n<li>则在访问/products/1的时候，需要的格式为：get :show, id: 100</li>\n<li>在访问/products/1/prices/2的时候需要是哟高 get :show, product_id: 1, id: 2,这里的show是pricecontroller上的show</li>\n<li></li>\n</ol>\n<p>sprintf(“%0.02f”, number) == number_to_currency(nuber)在页面上转换price</p>\n<p>new不是用来创建的，而是用来获得创建的form。</p>\n<p>ActiveSupport::Concern</p>\n<p>session 对象</p>\n<h6 id=\"product_path-vs-product_url\">product_path vs product_url<a title=\"#product_path-vs-product_url\" href=\"#product_path-vs-product_url\"></a></h6>\n<p>product_url是带主机带端口的唯一的表示<br>\n而product_path是一个相对的uri，当我们使用3xx的status的时候，http协议要求我们必须使用完整的url，此时就使用product_url,或者我们需要跳转到其他站点的时候，我们需要使用product_url,其他时候我们可以使用product_path避免产生不必要的字符</p>\n<h6 id=\"strong-parms\">Strong parms<a title=\"#strong-parms\" href=\"#strong-parms\"></a></h6>\n<p>当我们选择strong parameters的时候，只有完全match的东西才会出现在我们的参数中<br>\n比如</p>\n<p>我们使用以下的post来post 数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post :create, user_id: 1, order: &#123;address: &#x27;beijing&#x27;, phone: &#x27;13211112222&#x27;, name: &#x27;kayla&#x27;, order_items: [&#123;product_id: 1, quantity: 2&#125;]&#125;</span><br></pre></td></tr></table></figure>\n<p>然后使用如下的方法去接收数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 接收到的order_items值为&#123;order_items: [&#123;product_id: 1, quantity: 2&#125;]&#125;</span><br><span class=\"line\">order_items = params.require(:order).permit(order_items: [:product_id, :quantity])</span><br><span class=\"line\">// 接收到的order_items 的值为&#123;&#125;</span><br><span class=\"line\">order_items = params.require(:order).permit(order_items: [])</span><br></pre></td></tr></table></figure>\n<h3 id=\"rails-active-record\">Rails Active Record<a title=\"#rails-active-record\" href=\"#rails-active-record\"></a></h3>\n<p>当ActiveRecord被当做外键引用的时候，需要做检查，不然会导致数据不一致。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before_destory: ensure_not_referenced_by_any_line_item</span><br><span class=\"line\"></span><br><span class=\"line\">def ensure_not_referenced_by_any_line_item</span><br><span class=\"line\">\tif line_items.empty?</span><br><span class=\"line\">\t\treturn true</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t\terrors.add(: base, &#x27;Line Items present&#x27;) </span><br><span class=\"line\">\t\treturn false</span><br><span class=\"line\">\tend</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>在上面的代码中我们直接向error中添加了一条错误信息，validation错误的信息也是存在这里。错误的信息可以和某个attribute关联起来。也可以直接和base object 关联起来</p>\n<h6 id=\"名称convensition\">名称convensition<a title=\"#名称convensition\" href=\"#名称convensition\"></a></h6>\n<p>rails默认所有的table名称都为复数，但是object都为单数，当model对象中又camelcase出现的时候，对应的表以下划线分割。如果你不喜欢种种convension，可以使用如下代码来更改对应的表名称。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Sheep &lt; ActiveRecord::Base</span><br><span class=\"line\">\tthis.table_name = &quot;sheep&quot;</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h6 id=\"尽量不要用type作为关键字\">尽量不要用type作为关键字<a title=\"#尽量不要用type作为关键字\" href=\"#尽量不要用type作为关键字\"></a></h6>\n<h3 id=\"rails-日志\">Rails 日志<a title=\"#rails-日志\" href=\"#rails-日志\"></a></h3>\n<p>每一rails的controller都有一个logger，可以直接通过logger来写log</p>\n","prev":{"title":"如何使用Java Jersey MyBatis 编写微服务 REST API","link":"2014/10/10/jersey-mybatis-rest-api"},"next":{"title":"当金数据遇到NGO","link":"2014/08/04/jinshuju-ngo"},"plink":"https://kopinions.com/2014/08/20/ror-first/","toc":[{"id":"rails-rspec","title":"rails Rspec","index":"1"},{"id":"rails-rabl","title":"Rails Rabl","index":"2"},{"id":"rails-postgresql","title":"rails postgresql","index":"3"},{"id":"rails-mongo","title":"Rails Mongo","index":"4"},{"id":"rails-activerecode-validation","title":"Rails ActiveRecode validation","index":"5"},{"id":"rails-model-active-测试","title":"Rails Model Active 测试","index":"6"},{"id":"rails-multipart-form-upload","title":"Rails MultiPart Form Upload","index":"7"},{"id":"rails-bootstrap","title":"Rails bootstrap","index":"8"},{"id":"rails-erb","title":"Rails erb","index":"9"},{"id":"rails-route","title":"Rails route","index":"10"},{"id":"rails-active-record","title":"Rails Active Record","index":"11"},{"id":"rails-日志","title":"Rails 日志","index":"12"}],"reading_time":"3446 字约 23 分钟"}