{"title":"OpenGL 基本概念","date":"2019-08-31T12:40:20.000Z","date_formatted":{"ll":"2019年8月31日","L":"2019/08/31","MM-DD":"08-31"},"link":"2019/08/31/opengl-spec","tags":["graphics","opengl"],"categories":["graphics","opengl"],"updated":"2019-08-31T00:00:00.000Z","content":"<html><head></head><body><div id=\"content\">\n\n<div id=\"outline-container-org8bae076\" class=\"outline-2\">\n<h2 id=\"org8bae076\">OpenGL 基本概念</h2>\n<div class=\"outline-text-2\" id=\"text-org8bae076\">\n</div>\n<div id=\"outline-container-orgadd0641\" class=\"outline-3\">\n<h3 id=\"orgadd0641\">opengl client server 模型</h3>\n<div class=\"outline-text-3\" id=\"text-orgadd0641\">\n<p>\n很多时候我们听到或者看到 OpenGL 是 client server 模型，往往都是在说 OpenGL 的执行模型是 client-server 模型。这里的 client 一般是指用户写的应用程序，应用程序调用了 OpenGL 的相关接口。<br>\n这里的 server 端一般指 OpenGL 的具体实现，这个实现可能是纯软件实现 OpenGL 规范，或者是软件＋GPU实现 OpenGL。这里的 client 会通过 OpenGL 提供的 API 向 OpenGL 发送相应的指令，<br>\nServer 端处理指令。<br>\n</p>\n\n<p>\nClient-Server 的结构一个好处是， client 和 server 没有强制的要求必须要在一台物理机器上，我们可以采用分布式渲染的方法进行渲染。这种情况下 OpenGL 是网络透明的。一个 Server 可以维护<br>\n多个 GL context, 这些 context 保存了 GL 的所有状态。 一个 client 可以链接到 server 端对应的上下文。这种情况下我们需要网络透明的接口，可以通过增强一个当前已经存在的通讯协议比如 X-window 系统，<br>\n或者可以使用单独的一套协议进行远程渲染。<br>\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-orgdaba258\" class=\"outline-3\">\n<h3 id=\"orgdaba258\">opengl buffer 详解</h3>\n<div class=\"outline-text-3\" id=\"text-orgdaba258\">\n<p>\nOpenGL 中所有的数据都会保存到缓存对象 (buffer object) 中。这相当于 OpenGL 维护了一段内存区域，这段内存区域可以放在 client 端（应用程序端， 主存）， 也可以位于 server 端（典型的是显存），一般情况下<br>\n都是位于 server 端，从而提升效率。CPU 将内存中处理好的数据，通过缓存对象放置到 GPU, 一般情况下 CPU 不会再访问这段缓存，GPU 可以独占缓存。GPU 可以使用各种高并发的方法去使用这段缓存，与此同时 CPU 可以做其他的事情。<br>\n</p>\n\n<p>\n几乎所有的对象应该都被放置到 OpenGL 的缓存中。常见的比如各种顶点属性－－位置，颜色，纹理座标，灯光效果，法向量。<br>\n</p>\n\n<p>\n缓存的使用常见通过如下七个步骤：<br>\n</p>\n\n<ol class=\"org-ol\">\n<li>Generate(由OpenGL 生成独一无二的标识符) : glGenBuffer(size, *buffers)<br></li>\n<li>Bind(指定接下来操作的缓存对象): glBindBuffer(target, bufferId)<br></li>\n<li>Buffer Data(为当前缓存对象分配空间，并将数据放置在分配空间中): glBufferData(target, size, data, usage)<br></li>\n<li>Enable(启用对应的缓冲区，告诉OpenGL 在接下来的绘制中，使用缓冲区进行绘制) glEnableVertexAttribArray() 等<br></li>\n<li>Pointer(设置指针， 告诉 OpenGL 缓存中数据类型，以及接下来要访问的数据的偏移 offset）： glVertexAttribPointer(index, size, type, normalized, stride, pointer)<br></li>\n<li>Draw(告诉OpenGL 使用当前绑定的缓冲区进行绘制), glDrawArrays(mode, first, count)<br></li>\n<li>Delete(删除缓冲区): glDeleteBuffer(id)<br></li>\n</ol>\n</div>\n</div>\n\n<div id=\"outline-container-orgbe3d5b1\" class=\"outline-3\">\n<h3 id=\"orgbe3d5b1\">用户态驱动和内核态驱动</h3>\n<div class=\"outline-text-3\" id=\"text-orgbe3d5b1\">\n<p>\n为了安全的原因，一般操作系统会至少将运行程序的安全级别分为两个级别，一个是内核态，一个是用户态。用户态的程序在访问设备或者进行一些操作的时候，必须通过 sys_call 来进行。这种情况下就需要强制 CPU 切换当前执行上下文<br>\n到内核态，这是一个非常慢的操作，需要很多个时钟周期才能完成，并且在这个过程中，CPU 不能进行其他的操作。所以为了减少内核切换的频率，一般相对复杂的驱动都会拆分为两部分，用户态驱动（User Mode Driver）和内核态驱动（<br>\nKernel Mode Driver）。用户态驱动处理应用程序调用，只有在必要的时候，才发起系统调用。<br>\n</p>\n\n<p>\nOpenGL 的驱动也分为用户态和内核态驱动。用户态的驱动负责将 OpenGL 的命令转换成机器码，从而能直接提交给 GPU. 为了减少系统调用 OpenGL 用户态驱动也实现了 Marshal(序列化和反序列化，但是可以序列化后反序列化后还是可执行的）。<br>\n如果 GPU 的 命令缓冲区是满的，GPU 用户态驱动可以将所有的渲染命令缓冲到一个零时缓冲区，当 GPU 命令缓冲区有空间的时候，用户态驱动发起系统调用，从而切换到内核态，一次性的将所有命令传送给 GPU 来提升性能。<br>\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-org84fab90\" class=\"outline-3\">\n<h3 id=\"org84fab90\">transform feedback</h3>\n<div class=\"outline-text-3\" id=\"text-org84fab90\">\n<p>\ntransform feedback 可以捕获顶点着色器的内容，并将其记录到一个或多个缓存对象中，这些缓存对象可以随后用作渲染（用作顶点缓存）或者通过 glMapBuffer() 和 glGetBufferSubData 等函数读取回 CPU 端。<br>\n</p>\n\n<p>\n顶点着色器只是一个相对简单的单输入单输出的着色器阶段，并且不能主动的去创建或者销毁顶点。它只能输出单一的一组数据。（因为顶点着色器是针对每一个顶点处理的一小段代码，所以输入每个，输出就是这个点的相关属性）<br>\n</p>\n\n<p>\n相对于顶点着色器，几何着色器可以产生不同数量的顶点，除此之外，几何着色器还可以产生其他顶点相关的属性信息（纹理座标之类）。<br>\n</p>\n\n<p>\n可以将几何着色器的多重输出的特性和 transform feedback 的特性结合起来就可以实现多重输入，多重输出的特性。<br>\n</p>\n\n<p>\n几何着色器可以声明多组输出顶点数据流，可以通过 layout(stream=x) 的方式进行声明。<br>\n</p>\n\n<p>\n在几何着色器中，可以使用 EmitStreamVertex(int stream) 向指定的流发送顶点数据，在调用该函数后，在函数之前的所有变量声明都会变成为定义，所以这种情况下，正确的发送顶点数据的方式就是：初始化 stream 1 的值，发射 stream1 , 初始化 stream 2 的值，发生 stream 2。<br>\n</p>\n</div>\n</div>\n</div>\n\n\n<div id=\"outline-container-org3fbaa5f\" class=\"outline-2\">\n<h2 id=\"org3fbaa5f\">Textures and Sampllers</h2>\n<div class=\"outline-text-2\" id=\"text-org3fbaa5f\">\n</div>\n<div id=\"outline-container-org0fe8777\" class=\"outline-3\">\n<h3 id=\"org0fe8777\">Textures Objects</h3>\n<div class=\"outline-text-3\" id=\"text-org0fe8777\">\n</div>\n<div id=\"outline-container-orgcc6dda4\" class=\"outline-4\">\n<h4 id=\"orgcc6dda4\">纹理对象和纹理单元</h4>\n<div class=\"outline-text-4\" id=\"text-orgcc6dda4\">\n<p>\n纹理对象指通过 glGenTextures 来生成的问题对象，我们可以通过 glTexImage{n}D, glStorage{n}D 来对纹理对象进行设置或者修改。<br>\n纹理单元指的是 OpenGL 环境中支持在着色器中，使用多个纹理进行渲染，所以一般 OpenGL 会有多个纹理对象的插槽。这样的插槽我们呢称之为纹理单元。<br>\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-org9b80a7e\" class=\"outline-3\">\n<h3 id=\"org9b80a7e\">Samplers</h3>\n<div class=\"outline-text-3\" id=\"text-org9b80a7e\">\n<p>\n在纹理映射的过程中，会用到两类状态性的信息，一类表示维度（1d, 2d, 3d）和图像相关的信息，另一类是图像采样类的信息。<br>\n</p>\n\n<p>\n采样器专门用来进行纹理采样的工作。<br>\n</p>\n\n<p>\n通过关联一个采样器对象和一个纹理单元，，就可以使用 GLSL 内置函数从着色器提取纹素了。<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-org4ea132d\" class=\"outline-3\">\n<h3 id=\"org4ea132d\">Pixel Rectaangles</h3>\n<div class=\"outline-text-3\" id=\"text-org4ea132d\">\n<p>\n使用 TexImage*D 来指定一个包含 颜色, 深度，以及其他属性的矩形数据结构。<br>\n</p>\n\n<p>\n对于像素矩形，一般有几种类型的操作： ReadPixels, PixelStore<br>\n</p>\n\n<p>\nReadPixels 主要用来从 FrameBuffer 中获取像素矩形的值。<br>\nPixStore: 有很多参数来负责设置像素在buffer object 和 client memory(客户端内从，一般指DDR)的编码方式， 以及对应的在主要用来设置在从应用内从放入 framebuffer 之前和从 framebuffer 读取的时候，应该进行怎么样的处理。换句话来说就是 frame buffer 的 read, write, copy<br>\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-orgcd8b070\" class=\"outline-2\">\n<h2 id=\"orgcd8b070\">Vertex Specification and Drawing Commands</h2>\n<div class=\"outline-text-2\" id=\"text-orgcd8b070\">\n<p>\n我们把定义顶点属性，并将其传递给着色器的过程称之为传输（transfering）顶点到 GL<br>\n</p>\n\n<p>\n每个顶点都有很多通用的属性，这些属性一般通过 1, 2, 3, 4 维常量来指定。这些通用属性都可以在着色器中访问。<br>\n</p>\n\n<p>\n  在顶点着色器执行之前，当前状态只有顶点的通用属性。顶点着色器通过处理这些通用属性，产生一些均匀分布的点，或者一些其他的输出，来给<br>\n后面的着色器所使用。<br>\n</p>\n\n<p>\n通过 DrawArrays, DrawElements, Draw* 命令，可以将顶点属性传给 OpenGL.<br>\n</p>\n</div>\n<div id=\"outline-container-org79367ed\" class=\"outline-3\">\n<h3 id=\"org79367ed\">图元类型</h3>\n</div>\n<div id=\"outline-container-org688f234\" class=\"outline-3\">\n<h3 id=\"org688f234\">当前顶点属性</h3>\n<div class=\"outline-text-3\" id=\"text-org688f234\">\n<p>\n通过指定当前顶点的属性，我们可以将相应的属性传递给对应的着色器。<br>\n</p>\n\n\n<p>\n可以通过如下的一些命令来设置当前顶点的属性<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> VertexAttrib{<span class=\"number\">1234</span>}{sfd}(uint index, T values)</span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\n也可以通过如下的一些命令来查询对应的顶点属性<br>\n</p>\n\n<div class=\"org-src-container\">\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> GetVertexAttrib*(){}</span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\n我们所有的状态操作，都需要保证整个状态满足 MAX_VERTEX_ATTRIBS 和 四维向量的约束<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-orgd52fb48\" class=\"outline-3\">\n<h3 id=\"orgd52fb48\">顶点数组</h3>\n<div class=\"outline-text-3\" id=\"text-orgd52fb48\">\n<p>\n顶点数组是存储在服务器空间的数组。这些数组用来指定需要被处理的顶点数据。<br>\n</p>\n\n<p>\n我们可以通过如下的方式指顶点数组属性<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-org37f7dc7\" class=\"outline-3\">\n<h3 id=\"org37f7dc7\">顶点数组对象</h3>\n<div class=\"outline-text-3\" id=\"text-org37f7dc7\">\n<p>\n所有在顶点处理阶段所用到的缓存对象都会被规整到一起，构建出一个顶点数组对象。 顶点数组对象中包含了所有会被顶点着色器使用的数据。<br>\n</p>\n\n<p>\n通过如下的命令创建顶点数组对象<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// generate vertex array name</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">GenVerteArrays</span><span class=\"params\">(sizei n, uint *arrays)</span>;</span><br><span class=\"line\"><span class=\"comment\">// create vertex array</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">BindVertexArray</span><span class=\"params\">(uint <span class=\"built_in\">array</span>)</span></span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\n使用 BindVertexArray 将参数指定的 vertex array object 绑定为当前操作对象，所有的对顶点的操作比如: VertexAttribPointer, EnableVertexAttribArray<br>\nDrawArrays, DrawElements, 以及一些 query 都会作用在参数指定的 vertex array object.<br>\n</p>\n</div>\n</div>\n</div>\n</div>\n</body></html>","prev":{"title":"RPM 安装包制作","link":"2019/09/12/rpm-package-with-rpmbuild"},"next":{"title":"Emacs 奇淫巧计","link":"2019/06/30/emacs"},"plink":"https://kopinions.com/2019/08/31/opengl-spec/","toc":[{"id":"org8bae076","title":"OpenGL 基本概念","index":"1","children":[{"id":"orgadd0641","title":"opengl client server 模型","index":"1.1"},{"id":"orgdaba258","title":"opengl buffer 详解","index":"1.2"},{"id":"orgbe3d5b1","title":"用户态驱动和内核态驱动","index":"1.3"},{"id":"org84fab90","title":"transform feedback","index":"1.4"}]},{"id":"org3fbaa5f","title":"Textures and Sampllers","index":"2","children":[{"id":"org0fe8777","title":"Textures Objects","index":"2.1"},{"id":"org9b80a7e","title":"Samplers","index":"2.2"},{"id":"org4ea132d","title":"Pixel Rectaangles","index":"2.3"}]},{"id":"orgcd8b070","title":"Vertex Specification and Drawing Commands","index":"3","children":[{"id":"org79367ed","title":"图元类型","index":"3.1"},{"id":"org688f234","title":"当前顶点属性","index":"3.2"},{"id":"orgd52fb48","title":"顶点数组","index":"3.3"},{"id":"org37f7dc7","title":"顶点数组对象","index":"3.4"}]}],"reading_time":"2342 字约 16 分钟"}