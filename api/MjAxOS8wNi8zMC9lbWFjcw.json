{"title":"Emacs 奇淫巧计","date":"2019-06-30T12:40:20.000Z","date_formatted":{"ll":"2019年6月30日","L":"2019/06/30","MM-DD":"06-30"},"link":"2019/06/30/emacs","tags":["emacs","productivity"],"categories":["productivity"],"updated":"2021-11-02T00:00:00.000Z","content":"<html><head></head><body><div id=\"content\">\n\n<div id=\"outline-container-org034613c\" class=\"outline-2\">\n<h2 id=\"org034613c\">emacs 快捷键</h2>\n<div class=\"outline-text-2\" id=\"text-org034613c\">\n</div>\n<div id=\"outline-container-orgf1b9a0f\" class=\"outline-3\">\n<h3 id=\"orgf1b9a0f\">ansi-term</h3>\n<div class=\"outline-text-3\" id=\"text-orgf1b9a0f\">\n</div>\n<div id=\"outline-container-org9726802\" class=\"outline-4\">\n<h4 id=\"org9726802\">copy &amp; paste</h4>\n<div class=\"outline-text-4\" id=\"text-org9726802\">\n<p>\n当处于 ansi-term 状态下时， 命令行是只读状态，所以需要使用特定的组合键来完成粘贴 C-c C-y, 或者使用C-x C-j 变成 line-mode, C-c C-k 退出 line mode当处于 ansi-term 状态下时， 命令行是只读状态，所以需要使用特定的组合键来完成粘贴 C-c C-y, 或者使用C-x C-j 变成 line-mode, C-c C-k 退出 line mode当处于 ansi-term 状态下时， 命令行是只读状态，所以需要使用特定的组合键来完成粘贴 C-c C-y, 或者使用C-x C-j 变成 line-mode, C-c C-k 退出 line mode<br>\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-org8873675\" class=\"outline-3\">\n<h3 id=\"org8873675\">mark-ring</h3>\n<div class=\"outline-text-3\" id=\"text-org8873675\">\n<p>\n当用 emacs 进行搜索或者跳转的时候，emacs 会将当前位置做标记，并且保存在 mark-ring 中， 如果想要跳转到原来的位置，可以使用 C-u C-SPC<br>\n如果需要跳转多次，可以使用 C-u C-SPC C-SPC C-SPC 等<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-orgf58bee3\" class=\"outline-3\">\n<h3 id=\"orgf58bee3\">eshell</h3>\n<div class=\"outline-text-3\" id=\"text-orgf58bee3\">\n</div>\n<div id=\"outline-container-orga2b0122\" class=\"outline-4\">\n<h4 id=\"orga2b0122\">history</h4>\n<div class=\"outline-text-4\" id=\"text-orga2b0122\">\n<p>\n可以使用 M-r 搜索 eshell 命令行历史，搜索完结果会直接在当前行显示。使用 M-n , M-p 进行上一个下一个的跳转<br>\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-orgc302954\" class=\"outline-3\">\n<h3 id=\"orgc302954\">navigation</h3>\n<div class=\"outline-text-3\" id=\"text-orgc302954\">\n</div>\n<div id=\"outline-container-org236892a\" class=\"outline-4\">\n<h4 id=\"org236892a\">begin &amp; end of function</h4>\n<div class=\"outline-text-4\" id=\"text-org236892a\">\n<p>\n对于大多数编程语言来讲，可以使用 C-M-a 来移动到函数头，使用 C-M-e 移动到函数尾<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-org28aa2fa\" class=\"outline-4\">\n<h4 id=\"org28aa2fa\">begin &amp; end of parenthetical group</h4>\n<div class=\"outline-text-4\" id=\"text-org28aa2fa\">\n<p>\nC-M-n 向前移动到括号，C-M-p 向后移动到括号<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-orga14c7aa\" class=\"outline-4\">\n<h4 id=\"orga14c7aa\">reposition point</h4>\n<div class=\"outline-text-4\" id=\"text-orga14c7aa\">\n<p>\n很多时候我们仅仅是想将光标移动到上部，或者中部，或者下部，但是不进行文字滚动。此时我们可以使用 M-r 进行光标之间的切换。可以将 position<br>\n移动到 top, bottom, center<br>\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-orgfe86516\" class=\"outline-3\">\n<h3 id=\"orgfe86516\">basic</h3>\n<div class=\"outline-text-3\" id=\"text-orgfe86516\">\n</div>\n<div id=\"outline-container-org0567968\" class=\"outline-4\">\n<h4 id=\"org0567968\">file</h4>\n<div class=\"outline-text-4\" id=\"text-org0567968\">\n<ul class=\"org-ul\">\n<li>插入<br>\n可以在当前文件插入其他文件内容，使用 C-x i 进行插入<br></li>\n<li>在当前位置找文件<br>\n当光标当前位置，猜文件目录，并且找到文件 find-file-at-point, 缩写为 ffap<br></li>\n</ul>\n</div>\n<ul class=\"org-ul\">\n<li><a id=\"org60998e4\"></a>tramp<br>\n<div class=\"outline-text-5\" id=\"text-org60998e4\">\n<p>\n使用 c-x c-f 可以打开文件，当输入的是远程 server 的地址的时候，emacs 可以直接打开远程 server.<br>\n</p>\n</div>\n</li>\n<li><a id=\"org6dae21c\"></a>find file at point<br>\n<div class=\"outline-text-5\" id=\"text-org6dae21c\">\n<p>\n当当前光标是一个文件的时候，我们可以通过 find-file-at-point 来打开文件<br>\n</p>\n</div>\n</li>\n</ul>\n</div>\n<div id=\"outline-container-orgec22674\" class=\"outline-4\">\n<h4 id=\"orgec22674\">link</h4>\n<div class=\"outline-text-4\" id=\"text-orgec22674\">\n<p>\nC-c C-o 可以在指定的位置添加链接，也可以在，链接可以为文件。当为文件的时候，可以指定对应的标签，用来打开文件后跳转到指定的位置。<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-orga1677fd\" class=\"outline-4\">\n<h4 id=\"orga1677fd\">point &amp; mark &amp; region</h4>\n<div class=\"outline-text-4\" id=\"text-orga1677fd\">\n<div class=\"org-src-container\">\n<figure class=\"highlight markdown\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">```</span></span><br><span class=\"line\"><span class=\"code\">Lorem ipsum dolor sit amet</span></span><br><span class=\"line\"><span class=\"code\">      ^ Cursor</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">      Point</span></span><br><span class=\"line\"><span class=\"code\">      |</span></span><br><span class=\"line\"><span class=\"code\">      Mark</span></span><br><span class=\"line\"><span class=\"code\">      |</span></span><br><span class=\"line\"><span class=\"code\">Lorem ipsum dolor sit amet</span></span><br><span class=\"line\"><span class=\"code\">      ^ C-spc</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">      Mark          Point</span></span><br><span class=\"line\"><span class=\"code\">      | ----region--|</span></span><br><span class=\"line\"><span class=\"code\">      |             |</span></span><br><span class=\"line\"><span class=\"code\">Lorem ipsum dolor sit amet</span></span><br><span class=\"line\"><span class=\"code\">\t move       ^</span></span><br><span class=\"line\"><span class=\"code\">\t forward -&gt;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">      Mark          Point</span></span><br><span class=\"line\"><span class=\"code\">      | ----region--|</span></span><br><span class=\"line\"><span class=\"code\">      |             |</span></span><br><span class=\"line\"><span class=\"code\">Lorem ipsum dolor sit amet</span></span><br><span class=\"line\"><span class=\"code\">\t\t    ^</span></span><br><span class=\"line\"><span class=\"code\">\t\t    C-x C-x</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">      Point         Mark</span></span><br><span class=\"line\"><span class=\"code\">      | ----region--|</span></span><br><span class=\"line\"><span class=\"code\">      |             |</span></span><br><span class=\"line\"><span class=\"code\">Lorem ipsum dolor sit amet</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"code\">Point and mark interchanged</span></span><br><span class=\"line\"><span class=\"code\">```</span></span><br></pre></td></tr></tbody></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-orgf3c081d\" class=\"outline-4\">\n<h4 id=\"orgf3c081d\">move to upper expression start</h4>\n<div class=\"outline-text-4\" id=\"text-orgf3c081d\">\n<p>\n当我们处于一个表达式内部，比如处于一个括号内部，我们如何用更快的方法跳转到括号所在的位置？可以使用 C-M-u 跳转到<br>\nupper 的 expression 的地方。 back up expression<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-org60520b3\" class=\"outline-4\">\n<h4 id=\"org60520b3\">移动整体代码块</h4>\n<div class=\"outline-text-4\" id=\"text-org60520b3\">\n<p>\n选中代码块后，可以使用 C-x TAB 来进行对应的缩进操作。背后运行的命令为 indent rigidly. 也可以带参数向左移或者右移<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-org537c32c\" class=\"outline-4\">\n<h4 id=\"org537c32c\">register</h4>\n<div class=\"outline-text-4\" id=\"text-org537c32c\">\n<p>\n可以使用 C-x r SPC 来将当前 point 保存到 register, 然后可以使用 C-x r j 来进行 register 的跳转<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-org24c152d\" class=\"outline-4\">\n<h4 id=\"org24c152d\">arguments</h4>\n<div class=\"outline-text-4\" id=\"text-org24c152d\">\n</div>\n<ul class=\"org-ul\">\n<li><a id=\"org00c9b5a\"></a>negative argument<br>\n<div class=\"outline-text-5\" id=\"text-org00c9b5a\">\n<p>\nemacs arguments 一般都是正向操作，比如 M-c 将下一个单词的首字母大写。但是如果说我们刚输入完一个单词，<br>\n如何当前的 position 已经无法完成当前单词首字母大写，这种情况下可以使用 negative argument, 可以将<br>\nM-c 的生效方向转换成相反方向。<br>\n</p>\n</div>\n</li>\n</ul>\n</div>\n<div id=\"outline-container-org15c662c\" class=\"outline-4\">\n<h4 id=\"org15c662c\">ido-mode</h4>\n<div class=\"outline-text-4\" id=\"text-org15c662c\">\n</div>\n<ul class=\"org-ul\">\n<li><a id=\"org5805925\"></a>停止自动补全<br>\n<div class=\"outline-text-5\" id=\"text-org5805925\">\n<p>\n很多时候，当我们使用C-x C-f 去创建文件的时候，当存在相似文件名的时候，ido-mode 都会为我们选择类似的名字，从而导致不能正常的创建文件，此时可以使用 C-u C-j 来停止自动补全，并且当前输入的文件名作为文件名。不使用补全。<br>\n</p>\n</div>\n</li>\n</ul>\n</div>\n<div id=\"outline-container-org63a594e\" class=\"outline-4\">\n<h4 id=\"org63a594e\">edit</h4>\n<div class=\"outline-text-4\" id=\"text-org63a594e\">\n</div>\n<ul class=\"org-ul\">\n<li><a id=\"org4ade071\"></a>upper case<br>\n<div class=\"outline-text-5\" id=\"text-org4ade071\">\n<p>\n可以使用 upcase-char 或者 upcase-word 命令来将当前光标后的内容转化成大写。upcase-word 命令一般被绑定到 M-u<br>\n可以使用 M-u 进行大写转换。可以使用 C-x M-u 对整个一段进行大小写转换<br>\n</p>\n</div>\n</li>\n<li><a id=\"orgd7b3bfa\"></a>symbol overlay<br>\n<div class=\"outline-text-5\" id=\"text-orgd7b3bfa\">\n<p>\n在编辑代码的时候，我们往往需要将某一个变量或者符号进行高亮显示，这种情况下，我们可以使用 symbol-overlay 插件<br>\n来进行 overlay 的高亮。purcell 的键位绑定是把 m-i 绑定到 symbol-overlay-put 来在当前为止添加 symbol-overlay 添加<br>\n可以使用 symbol-overlay-delete-all 来删除当前文件的所有 symbol-overlay, 这个被绑定到 M-I 上， 可以使用 symbol-overlay-jump-next,<br>\n和 symbol-overlay-jump-prev 进行 symbol 的跳转 通常这两个键位被绑定到 M-p M-n 键位上<br>\n</p>\n</div>\n</li>\n<li><a id=\"orgb9aa67f\"></a>mutliple cursor<br>\n<div class=\"outline-text-5\" id=\"text-orgb9aa67f\">\n<p>\n<i>workspace/6c/CopyQ</i>.gitlab-ci.yml<br>\n在编辑代码的时候，我们经常想要一同编辑一个符号，这种时候我们可以是用 multiple-cursor 插件进行相应的配置。<br>\nmultiple-cursor 所有的 command 都在 mc/ 命名空间下，所以我们可以使用 mc/ 相关的指令进行操作。常用的一些操作被绑定<br>\n到比较方便的快捷键上。比如选中一个单词之后，依次往后选中相同的单词： mc/mark-next-like-this 被绑定到 c-+ 上<br>\nmc/mark-previous-like-this 被绑定到 c-&lt; 上， mc/mark-all-like-this 被绑定到 c-c c-&lt; 上。<br>\n</p>\n</div>\n</li>\n<li><a id=\"org7868980\"></a>fold<br>\n<div class=\"outline-text-5\" id=\"text-org7868980\">\n<p>\n可以使用 origami 来进行折叠相关的操作。在配置中可以将 C-c f 绑定到实际的 fold 方法上 或者可以使用 origami 开头的方法进行 fold 相关的配置<br>\n</p>\n</div>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-org835cf13\" class=\"outline-3\">\n<h3 id=\"org835cf13\">window</h3>\n<div class=\"outline-text-3\" id=\"text-org835cf13\">\n</div>\n<div id=\"outline-container-orgcb62a5b\" class=\"outline-4\">\n<h4 id=\"orgcb62a5b\">split window</h4>\n<div class=\"outline-text-4\" id=\"text-orgcb62a5b\">\n<p>\n     window 相关的操作是一般都是以 split 来命名的。我们可以使用 split-window-horizonly 和 split-window-vertical<br>\n进行 split. window 的操作一般分为： split window, 和切换布局。可以通过 C-x 2 , C-x 3 分别对当前窗口进行垂直和水平切分。也可以通过<br>\nC-| 重新布局成垂直分隔， C-_ 重新分隔为水平布局。<br>\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-org92df4b8\" class=\"outline-3\">\n<h3 id=\"org92df4b8\">org-mode</h3>\n<div class=\"outline-text-3\" id=\"text-org92df4b8\">\n</div>\n<div id=\"outline-container-org4710189\" class=\"outline-4\">\n<h4 id=\"org4710189\">following mode</h4>\n<div class=\"outline-text-4\" id=\"text-org4710189\">\n<p>\n在 org-agenda 模式下，使用 F 开启 following mode. 在这个模式下，当选中一个 org-agenda 事项的时候，会在右侧同时出现该事项的文件内容<br>\n和上下文。使用 F 也可以关闭 following mode<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-orgb31a9a2\" class=\"outline-4\">\n<h4 id=\"orgb31a9a2\">tangle</h4>\n<div class=\"outline-text-4\" id=\"text-orgb31a9a2\">\n<p>\norg mode 可以使用文学编程的方式来完成配置文件的编写。然后使用 org mode 的 tangle 可以将所有的代码抽取为独立的文件。可以使用<br>\norg babel tangle (C-c C-v t) 进行导出。<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-orgf26fcb5\" class=\"outline-4\">\n<h4 id=\"orgf26fcb5\">sparse tree</h4>\n<div class=\"outline-text-4\" id=\"text-orgf26fcb5\">\n<p>\n在 org-mode 中可以使用 sparse tree 来进行搜索，以便与展开匹配项，合起来非匹配项。<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-org8e69108\" class=\"outline-4\">\n<h4 id=\"org8e69108\">code template</h4>\n<div class=\"outline-text-4\" id=\"text-org8e69108\">\n<p>\n可以使用 &lt;s tab 的方式，来使用模板插入内容<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-org78ea08e\" class=\"outline-4\">\n<h4 id=\"org78ea08e\">切换 org-mode buffer</h4>\n<div class=\"outline-text-4\" id=\"text-org78ea08e\">\n<ul class=\"org-ul\">\n<li>在当前文件是 org-mode buffer 的时候，可以使用 org-switchb 来进行 org-mode buffer 的切换<br></li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-orgb658acd\" class=\"outline-4\">\n<h4 id=\"orgb658acd\">org table</h4>\n<div class=\"outline-text-4\" id=\"text-orgb658acd\">\n</div>\n<ul class=\"org-ul\">\n<li><a id=\"orgaeb72eb\"></a>在单元格内完成换行<br>\n<div class=\"outline-text-5\" id=\"text-orgaeb72eb\">\n<p>\n可以使用 M-RET 在单元格内完成换行的操作。<br>\n</p>\n</div>\n</li>\n</ul>\n</div>\n<div id=\"outline-container-org7969f1a\" class=\"outline-4\">\n<h4 id=\"org7969f1a\">org agenda</h4>\n<div class=\"outline-text-4\" id=\"text-org7969f1a\">\n</div>\n<ul class=\"org-ul\">\n<li><a id=\"orgc09533b\"></a>如何将循环任务标记为 done<br>\n<div class=\"outline-text-5\" id=\"text-orgc09533b\">\n<p>\nC-u -1 C-c C-t DONE, 使用 -1 作为 prefix 参数，调用 org-todo 将状态改为 DONE, repeat 的任务会自动被标记为 DONE<br>\n</p>\n</div>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-org6f74db5\" class=\"outline-3\">\n<h3 id=\"org6f74db5\">ivy</h3>\n<div class=\"outline-text-3\" id=\"text-org6f74db5\">\n</div>\n<div id=\"outline-container-org74be1b1\" class=\"outline-4\">\n<h4 id=\"org74be1b1\">ivy search and edit</h4>\n<div class=\"outline-text-4\" id=\"text-org74be1b1\">\n<p>\n当使用 ivy M-? 进行搜索的时候，搜索的结果是单独的窗口中显示的。这种情况下可以使用 C-c C-o 在新窗口打开查找结果。但是新打开的查找结果是只读的。此时需要使用C-x C-q 进入 (ivy-wgrep-change-to-wgrep-mode),<br>\n这种情况下 buffer 会变成可编辑模式。结束编辑后，可以时候用C-c C-c (wgrep-finish-edit) 来完成编辑。<br>\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-orgbbdc424\" class=\"outline-3\">\n<h3 id=\"orgbbdc424\">org agenda</h3>\n<div class=\"outline-text-3\" id=\"text-orgbbdc424\">\n</div>\n<div id=\"outline-container-orge8268e6\" class=\"outline-4\">\n<h4 id=\"orge8268e6\">filter by tag</h4>\n<div class=\"outline-text-4\" id=\"text-orge8268e6\">\n<p>\n可以使用 / 进行 tag 级别的搜索， 命中的 tag 的项目会展示出来， 使用 C-u / 则会隐藏匹配的项目。使用 / / 取消<br>\ntag filter<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-org075d40e\" class=\"outline-4\">\n<h4 id=\"org075d40e\">filter by regexp</h4>\n<div class=\"outline-text-4\" id=\"text-org075d40e\">\n<p>\n在 org-agenda 模式下，可以使用 = 来进行 regexp 的搜索，所有匹配正则表达式的 todo 都会显示出来。C-u = 将所有匹配的<br>\n的 todo 都隐藏起来。C-u C-u = 取消 regexp 匹配搜索。<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-orgae3a17e\" class=\"outline-4\">\n<h4 id=\"orgae3a17e\">filter by categary</h4>\n<div class=\"outline-text-4\" id=\"text-orgae3a17e\">\n<p>\n在 org-agenda 下可以使用 &lt; 来进行按照当前选中 item 的 category 来搜索。C-u &gt; 来隐藏同样 category 的 item.<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-org383a90e\" class=\"outline-4\">\n<h4 id=\"org383a90e\">filter by parent headline</h4>\n<div class=\"outline-text-4\" id=\"text-org383a90e\">\n<p>\n在 org-agenda 下使用 ^ 来现实当前 todo item 的 slibing item.<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-org55ad659\" class=\"outline-4\">\n<h4 id=\"org55ad659\">scheduler</h4>\n<div class=\"outline-text-4\" id=\"text-org55ad659\">\n</div>\n<ul class=\"org-ul\">\n<li><a id=\"org4f7165e\"></a>timestamp<br>\n<div class=\"outline-text-5\" id=\"text-org4f7165e\">\n<p>\n很多时候，我们需要使用 org-agenda 来记录重复的工作。比如一周给父母打一次电话。我们通常使用如下的方式来记录这个任务<br>\n</p>\n\n<p>\n** 给父母打电话<br>\n   SCHEDULED: <span class=\"timestamp-wrapper\"><span class=\"timestamp\">&lt;2019-07-28 Sun +1w&gt;</span></span><br>\n</p>\n\n<p>\n这种情况下，如果你两周没有打电弧，就需要连续标记两次 DONE, 才能让当前事物处于正常状态下。遇到这种情况，我们可以使用 ++ 来处理<br>\n</p>\n\n<p>\n** 给父母打电话<br>\n   SCHEDULED: <span class=\"timestamp-wrapper\"><span class=\"timestamp\">&lt;2019-07-28 Sun ++1w&gt;</span></span><br>\n</p>\n\n<p>\n如果当前时间是周五，但是已经两周没有给父母打电话，这种情况下，将当前事物标记为 DONE, org mode 会自动将日期移动到当前周的周末。<br>\n</p>\n\n<p>\n还有一种情况，比如说去健身房锻炼，往往我们需要一定的时间给肌肉休息，所以我们如果说我们好几天没有去了，我们下次去的时间应该从最近一次去的时间往后推指定的时间。这种情况下我们可以使用 .+ 的方式来指定任务的重复。<br>\n</p>\n\n<p>\n** 去健身房<br>\n   SCHEDULED: <span class=\"timestamp-wrapper\"><span class=\"timestamp\">&lt;2019-07-28 Sun .+2d&gt;</span></span><br>\n</p>\n\n<p>\n比如当前时间是 7 月 29日。去健身房的任务已经过期。当我们标记当前任务为 DONE 的时候，org mode 会自动以当前时间重新计算后面需要去的时间，即 today + 2<br>\n</p>\n</div>\n</li>\n\n<li><a id=\"orgfcd808c\"></a>calendar 函数<br>\n<div class=\"outline-text-5\" id=\"text-orgfcd808c\">\n<p>\n很多时候，我们需要更加自定的方式来支持我们能够灵活的定义任务的重复，此时我们可以使用 diary S-exp 的形式来指定一个事务重复的时间<br>\n</p>\n\n<p>\n** 去健身房<br>\n    SCHEDULED: <span class=\"timestamp-wrapper\"><span class=\"timestamp\">&lt;%%(let ((dayname (calendar-day-of-week date))) (memq dayname '(1 3 5)))&gt;</span></span><br>\n</p>\n\n<p>\n这个表达式的意思为: 当前天处于什么一周的第几天，如果是第一天（周一）， 第三天（周三）， 第五天（周五），这种情况下，当前事务就会出现在当前天的 org-agenda 中<br>\n</p>\n</div>\n</li>\n</ul>\n</div>\n<div id=\"outline-container-orgd467036\" class=\"outline-4\">\n<h4 id=\"orgd467036\">diary</h4>\n<div class=\"outline-text-4\" id=\"text-orgd467036\">\n<p>\n经常会发现我们忘了一些重要的节日，这种情况下我们应该如何处理？可以使用 dairy 来记录纪念日，并在一定的时间展示他们<br>\n</p>\n\n<p>\n%%(diary-remind '(diary-anniversary 1 4 2018) 3) 结婚％d周年<br>\n</p>\n\n<p>\n上述表示的是，结婚是在 2018年4月1日。每个结婚纪念日，都会提前三天给出相应的提醒，告诉我们第多少个结婚纪念日<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-orgfa10543\" class=\"outline-4\">\n<h4 id=\"orgfa10543\">auto save</h4>\n<div class=\"outline-text-4\" id=\"text-orgfa10543\">\n<p>\n使用了网盘同步工具之后，我们希望再我们标记完成某项事务的时候，我们的 buffer 能自动保存，这时候我们可以使用如下的配置文件来进行自动保存。<br>\n</p>\n\n<div class=\"org-src-container\">\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">(advice-add 'org-deadline       :after (lambda (&amp;rest _rest)  (org-save-all-org-buffers)))</span><br><span class=\"line\">(advice-add 'org-schedule       :after (lambda (&amp;rest _rest)  (org-save-all-org-buffers)))</span><br><span class=\"line\">(advice-add 'org-store-log-note :after (lambda (&amp;rest _rest)  (org-save-all-org-buffers)))</span><br><span class=\"line\">(advice-add 'org-todo           :after (lambda (&amp;rest _rest)  (org-save-all-org-buffers)))</span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\n这样在调用 org-deadline, org-schedule, 或者 org-store-log-note, 或者 org-tode 的时候，会插入调用 org-save-org-org-buffers<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-org6a64856\" class=\"outline-4\">\n<h4 id=\"org6a64856\">view</h4>\n<div class=\"outline-text-4\" id=\"text-org6a64856\">\n</div>\n<ul class=\"org-ul\">\n<li><a id=\"org8f69748\"></a>log view<br>\n<div class=\"outline-text-5\" id=\"text-org8f69748\">\n<p>\n当记录循环任务的时候，org-agenda 并没有每天创建一个任务，而是当每次任务完成的时候，将任务的 timestamp 移动到指定的日期。<br>\n这种情况下，如果我们第二天做回顾，我们就不知道昨天我们到底都做了什么。此时可以打开 log view, 可以查看到昨天都做了什么的详细记录信息。 可以在 org-agenda 界面里使用 vl 来打开 log view. v 代表 view, l 代表 log<br>\n</p>\n</div>\n</li>\n</ul>\n</div>\n</div>\n\n\n\n<div id=\"outline-container-orgfd11978\" class=\"outline-3\">\n<h3 id=\"orgfd11978\">lspmode</h3>\n<div class=\"outline-text-3\" id=\"text-orgfd11978\">\n</div>\n<div id=\"outline-container-orgd675284\" class=\"outline-4\">\n<h4 id=\"orgd675284\">补全</h4>\n<div class=\"outline-text-4\" id=\"text-orgd675284\">\n<p>\n可以使用 company-complete 进行补全的操作，一般情况下这个操作都会被绑定到 M-/ 键位上<br>\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-orge59149f\" class=\"outline-3\">\n<h3 id=\"orge59149f\">magit</h3>\n<div class=\"outline-text-3\" id=\"text-orge59149f\">\n</div>\n<div id=\"outline-container-orgaee3a20\" class=\"outline-4\">\n<h4 id=\"orgaee3a20\">分割 unstaged hunk</h4>\n<div class=\"outline-text-4\" id=\"text-orgaee3a20\">\n<p>\n当使用 magit 的 status 的时候，如果一大段代码，只想提交一段，可以使用 C-SPC 选中想要 stage 的代码片段，<br>\n然后使用 S(stage) 就可以将 hunk 分割开。<br>\n</p>\n</div>\n</div>\n</div>\n</div>\n<div id=\"outline-container-org568c36b\" class=\"outline-2\">\n<h2 id=\"org568c36b\">emacs 基本理论</h2>\n<div class=\"outline-text-2\" id=\"text-org568c36b\">\n</div>\n<div id=\"outline-container-org7a90df5\" class=\"outline-3\">\n<h3 id=\"org7a90df5\">emacs 命令</h3>\n<div class=\"outline-text-3\" id=\"text-org7a90df5\">\n<p>\nemacs 中所有的按键都被绑定到 command 上。emacs 上大概有三千多个命令。经常用到的命令都会绑定到相应的快捷键上。<br>\n</p>\n</div>\n</div>\n</div>\n</div>\n</body></html>","prev":{"title":"OpenGL 基本概念","link":"2019/08/31/opengl-spec"},"next":{"title":"如何使用Java Jersey MyBatis 编写微服务 REST API","link":"2014/10/10/jersey-mybatis-rest-api"},"plink":"https://kopinions.com/2019/06/30/emacs/","toc":[{"id":"org034613c","title":"emacs 快捷键","index":"1","children":[{"id":"orgf1b9a0f","title":"ansi-term","index":"1.1"},{"id":"org8873675","title":"mark-ring","index":"1.2"},{"id":"orgf58bee3","title":"eshell","index":"1.3"},{"id":"orgc302954","title":"navigation","index":"1.4"},{"id":"orgfe86516","title":"basic","index":"1.5"},{"id":"org835cf13","title":"window","index":"1.6"},{"id":"org92df4b8","title":"org-mode","index":"1.7"},{"id":"org6f74db5","title":"ivy","index":"1.8"},{"id":"orgbbdc424","title":"org agenda","index":"1.9"},{"id":"orgfd11978","title":"lspmode","index":"1.10"},{"id":"orge59149f","title":"magit","index":"1.11"}]},{"id":"org568c36b","title":"emacs 基本理论","index":"2","children":[{"id":"org7a90df5","title":"emacs 命令","index":"2.1"}]}],"reading_time":"3183 字约 21 分钟"}