{"title":"OpenGL 渲染管线","date":"2019-10-31T12:40:20.000Z","date_formatted":{"ll":"2019年10月31日","L":"2019/10/31","MM-DD":"10-31"},"link":"2019/10/31/render-pipeline","tags":["graphics","opengl"],"categories":["graphics","opengl"],"updated":"2019-10-31T00:00:00.000Z","content":"<html><head></head><body><div id=\"content\">\n<p>\n渲染管线顾名思义就是 OpenGL 在渲染的过程中需要采取的一系列的操作。这一系列操作的组合就被称之为渲染管线。<br>\n</p>\n\n<div id=\"outline-container-org4204f20\" class=\"outline-2\">\n<h2 id=\"org4204f20\">渲染管线</h2>\n<div class=\"outline-text-2\" id=\"text-org4204f20\">\n<p>\n渲染管线出现的主要步骤如下所示<br>\n</p>\n\n<img src=\"https://www.khronos.org/opengl/wiki_opengl/images/RenderingPipeline.png\" alt=\"pipeline\">\n\n<p>\n在 OpenGL 中， 每次发起渲染操作的时候都会生成一个新的渲染管线。<br>\n</p>\n\n<p>\n初始化渲染管线需要两个必要的东西<br>\n</p>\n<ol class=\"org-ol\">\n<li>顶点描述数据 <a href=\"#Vertex Specification\">顶点数据</a>。 描述数据一般来自于：顶点缓冲对象（VBO）或者顶点数组对象（VAO）中。<br></li>\n<li>可执行的渲染程序， 这个可执行程序中包括一个或多个用 GLSL 编写的着色器程序。<br></li>\n</ol>\n\n<p>\n一旦渲染管线完成初始化的工作，渲染管线会按照如下的顺序依次执行（假设顶点数据来自 VBO）：<br>\n</p>\n\n<ol class=\"org-ol\">\n<li>顶点处理 <a href=\"#Vertex Processing\">顶点处理</a><br>\n<ol class=\"org-ol\">\n<li>每一个从 VBO 获取到的数据都会通过 Vertex Shader 的代码进行相应的计算。Vertex Shader 的输入是一个一个的顶点，<br>\n输出是经过 shader 计算处理后的顶点。<br></li>\n<li>[可选] 细分着色<br></li>\n<li>几何着色阶段，这个阶段会根据顶点的属性，生成新的几何图元。<br></li>\n</ol></li>\n<li>顶点后置处理阶段（Vertex Post-Processing）<a href=\"#Vertex Post-Processing\">顶点后置处理阶段</a><br>\n<ol class=\"org-ol\">\n<li>Transform Feedback 在这个阶段完成<br></li>\n<li>图元裁剪，透视分割，视口变换都在这个阶段完成<br></li>\n</ol></li>\n<li>图元装配（Primitive Assembly） <a href=\"#Primitive Assembly\">图元装配</a><br></li>\n<li>光栅化<br></li>\n<li>片段着色阶段<br></li>\n<li>逐个采样操作<br>\n<ol class=\"org-ol\">\n<li>裁剪测试（Scissor Test）<br></li>\n<li>模板测试（Stencil Test）<br></li>\n<li>深度测试（Depth Test）<br></li>\n<li>混合（Blending）<br></li>\n<li>逻辑操作 (Logical Operations)<br></li>\n<li>写入掩码 (Write Mask)<br></li>\n</ol></li>\n</ol>\n</div>\n</div>\n\n\n<div id=\"outline-container-Vertex Specification\" class=\"outline-2\">\n<h2 id=\"Vertex Specification\">顶点数据</h2>\n<div class=\"outline-text-2\" id=\"text-Vertex Specification\">\n<p>\n顶点数据的准备过程发生 CPU 端。 运行在 CPU 上的应用程序生成一组有序的顶点数据，并将这一组顶点数据发送给渲染管线。<br>\n这组顶点数据描述了一个图元的边界，比如三角形的三个顶点的位置。这里的图元指的是，我们在构成复杂模型的基本单元，基本单元<br>\n有三角形，线段，点。这一组顶点在渲染管线的后续阶段会被组装成相对应的图元。<br>\n</p>\n\n<p>\n顶点数据阶段涉及到的对象主要有两个：顶点数组对象，顶点缓存对象。<br>\n顶点数组对象定义了每个顶点的数据是什么。顶点缓冲对象定义了顶点数据的存储缓冲。<br>\n</p>\n\n<p>\n一个顶点数据包含了一系列的顶点属性。每个属性都包含一组数据。比如顶点位置属性 (position), 包含了 x, y, z. 顶点颜色属性包含<br>\nR, G, B, A 四个分量。 渲染管线的后续阶段会使用属性数据进行相应的计算，比如完成波浪的计算，或者颜色的混合。顶点属性并不一定需要<br>\n是位置或者颜色之类的数据，顶点属性可以是任何形式的数据。比如如果你在做一个粒子系统的时候，对于每个顶点处理的时候可能会给顶点<br>\n添加一个加速度的属性，还要给顶点添加一个速度的属性，还需要给顶点添加一个方向的属性，这些都可以通过顶点属性的方式添加到顶点数据中<br>\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-orgf3dd61c\" class=\"outline-2\">\n<h2 id=\"orgf3dd61c\">顶点渲染</h2>\n<div class=\"outline-text-2\" id=\"text-orgf3dd61c\">\n<p>\n准备数据的过程主要在 CPU 端执行，CPU 端会将数据放到 GPU 显存指定的地方. 当应用程序做完所有的准备工作后，可以通过向 GPU 发送一条渲染命令（Draw Call）<br>\n来进行渲染。这条 Draw Call 命令主要包含的内容有几个<br>\n</p>\n\n<ol class=\"org-ol\">\n<li>渲染命令的类型<br></li>\n<li>数据的位置<br></li>\n<li>对应的渲染管线代码在哪里<br></li>\n</ol>\n\n<p>\n在发起 draw call 后，GPU 就会按照渲染管线所定义的阶段依次执行。<br>\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-Vertex Processing\" class=\"outline-2\">\n<h2 id=\"Vertex Processing\">顶点处理</h2>\n<div class=\"outline-text-2\" id=\"text-Vertex Processing\">\n<p>\n顶点着色阶段是完全可编程的。意味着应用程序程序员，完全可以通过编写顶点着色程序来自定义对顶点的操作。顶点着色阶段也被拆分为不同的阶段。每个阶段通过不同的着色程序来完成<br>\n自定义。这些阶段分别如下<br>\n</p>\n</div>\n\n<div id=\"outline-container-orgcbc3363\" class=\"outline-3\">\n<h3 id=\"orgcbc3363\">顶点着色</h3>\n<div class=\"outline-text-3\" id=\"text-orgcbc3363\">\n<p>\n顶点着色程序主要针对单个独立的顶点进行操作。这些操作通过顶点用户定义的 GLSL 程序自定义。 从顶点渲染阶段传入的所有的顶点经过自定义的程序处理后变成输出顶点数据。<br>\n</p>\n\n<p>\n顶点着色可以定义自己的顶点属性作为顶点数据输出。比如定义 <code>out float verlocity</code>. 虽然顶点着色程序是完全可编程的，但是顶点着色还是有一定的限制。<br>\n</p>\n\n<p>\n为了后续的顶点渲染，有一个 特殊的输出变量 gl_Position 必须在顶点着色器中完成这个输出变量的赋值操作。<br>\n</p>\n\n<p>\n另外一个限制是，顶点着色一次只处理一个顶点，并且输出也只能是一个顶点相关的数据，不能新生成顶点。<br>\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-org3abc667\" class=\"outline-3\">\n<h3 id=\"org3abc667\">细分着色</h3>\n<div class=\"outline-text-3\" id=\"text-org3abc667\">\n<p>\n细分着色阶段分为三个阶段，分别为<br>\n</p>\n<ol class=\"org-ol\">\n<li>细分着色控制着色器（可编程）<br></li>\n<li>细分器（固定管线）<br></li>\n<li>细分着色求值器（可编程）<br></li>\n</ol>\n\n<p>\n细分着色器的常用的场景是： 假设你有一个球型的模型，当照相机距离球比较远的时候，你希望在不影响图像质量的情况下尽量用少的多边形进行渲染。当摄像机距离球比较近的时候，你希望<br>\n使用较多的三角形来绘球，这样球展示的会比较平滑。这种情况我们可以通过细分着色阶段来实现。细分着色控制着色器负责计算需要将一个图元拆分为几个更小的图元。并将数量传递给下个阶段。<br>\n固定的不可编程的细分器使用计算出来的细分数进行图元的拆分。我们可以在细分着色求值器中编写自定义的代码来完成插值，或者其他处理代码来完成对细分的图元进行进一步的处理。<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-orgf220693\" class=\"outline-3\">\n<h3 id=\"orgf220693\">几何着色</h3>\n<div class=\"outline-text-3\" id=\"text-orgf220693\">\n<p>\n几何着色主要用来处理图元，决定是否生成新的图元或者抛弃当前图元。<br>\n</p>\n\n<p>\n这个主要的使用场景是：比如你需要做一个撞击破碎的效果，此时在撞击的过程中，你就需要根据撞击的顶点计算，生成不同的顶点用来完成破碎的小碎片的模型。<br>\n</p>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-Vertex Post-Processing\" class=\"outline-2\">\n<h2 id=\"Vertex Post-Processing\">顶点后置处理阶段</h2>\n<div class=\"outline-text-2\" id=\"text-Vertex Post-Processing\">\n<p>\n在顶点数据处理后，进入了顶点后置处理阶段，这个阶段，主要有一些固定的管线程序组成。主要有如下几个<br>\n</p>\n</div>\n\n<div id=\"outline-container-org35313c4\" class=\"outline-3\">\n<h3 id=\"org35313c4\">变换反馈（Transform Feedback）</h3>\n<div class=\"outline-text-3\" id=\"text-org35313c4\">\n<p>\n在做粒子特效的时候，我们在计算一个粒子的速度，位置和方向的时候（在 CPU 端），我们需要使用已经经过顶点处理的数据，这个阶段将我们进过计算的顶点数据发送到指定的缓冲对象中。我们可以通过使用缓冲对象中<br>\n的值完成碰撞检测，速度计算等特性。<br>\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-orgdf6065d\" class=\"outline-3\">\n<h3 id=\"orgdf6065d\">裁剪</h3>\n<div class=\"outline-text-3\" id=\"text-orgdf6065d\">\n<p>\n所有的物体构建的时候都是在模型座标系，或者全局座标系，当需要展示到屏幕的时候，我们需要将所有的顶点转换到观察者座标系。整个裁剪的过程基于 <code>gluPerpestive, glOrtho</code> 等定义的视景体进行裁剪。<br>\n裁剪就是将和视景体边缘有重合的图元分成多个图元，并且将不在视景体内部的图元抛弃。<br>\n</p>\n\n<p>\n裁剪可以通过视景体裁剪，但是一个 draw call 只能指定一个视景体，这种情况下如果需要对多个顶点采用不同的裁剪方式，只能通过多个 draw call 指定不同的视景体来实现。这种情况下会严重的影响性能。这种<br>\n情况下我们可以通过在 glEnable(GL_CLIP_DISTANCE0), 并且在 Vertex Shader 中计算 gl_ClipDistance[0] 的值，就可以完成自定义裁剪。基本上 OpenGL 的实现最少支持 8 通道的自定义裁剪定义（GL_CLIP_DISTANCE0-GL_CLIP_DISTANCE7）。<br>\n这种方式可以完成顶点级别的裁剪。<br>\n</p>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-Primitive Assembly\" class=\"outline-2\">\n<h2 id=\"Primitive Assembly\">图元装配</h2>\n<div class=\"outline-text-2\" id=\"text-Primitive Assembly\">\n<p>\n图元装配是将前面阶段所产生的顶点数据计算并且组装成图元序列。图元的类型由用户通过 OpenGL 接口指定。比如指定了6个顶点，并且指定了图元的类型为三角形，那么此时就会生成两个三角形的图元序列。<br>\n这个阶段还完成一个比较重要的是处理就是背面剔除<br>\n</p>\n</div>\n\n<div id=\"outline-container-orgeb73583\" class=\"outline-3\">\n<h3 id=\"orgeb73583\">背面剔除</h3>\n<div class=\"outline-text-3\" id=\"text-orgeb73583\">\n<p>\n在我们建模的过程中，对于一个球体来讲，有外表面和内表面。往往我们只需要看见一面。对于天空盒我们需要看见内表面，对于篮球，我们需要看见外表面。为了性能考虑，我们不希望另外一面也进行渲染操作,<br>\n所以 OpenGL 会对背面进行剔除操作。从而提升性能。<br>\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-Rasterization\" class=\"outline-2\">\n<h2 id=\"Rasterization\">光栅化（不可编程）</h2>\n<div class=\"outline-text-2\" id=\"text-Rasterization\">\n<p>\n通过前面的渲染管线我们得到了一个图元序列，但是为了展示到二维点阵组成的显示器中，我们必须要对图元进行扫描转换和图元插值，或者称之为光栅化。<br>\n光栅化的结果就是一个片段的序列。一个片段包含了一组数据，这组数据主要有：屏幕空间的位置，采样信息，渲染管线前面阶段所产生的各种数据。<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-org2961a37\" class=\"outline-2\">\n<h2 id=\"org2961a37\">片段处理（可编程）</h2>\n<div class=\"outline-text-2\" id=\"text-org2961a37\">\n<p>\n可以通过片段处理着色程序对光栅化后的片段进行进一步的处理。片段着色器的输出是：深度值，模板值，和颜色值。片段着色器不能控制片段的模板值，只能控制深度值和颜色值。<br>\n</p>\n\n<p>\n片段着色阶段是一个可选的阶段。<br>\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-org44ca908\" class=\"outline-2\">\n<h2 id=\"org44ca908\">逐采样处理</h2>\n<div class=\"outline-text-2\" id=\"text-org44ca908\">\n<p>\n在经过片段处理后，我们得到了一系列的片段，我们如何决定这些片段应该如何展示到屏幕上，还需要进行一系列的操作。<br>\n</p>\n\n<p>\n首先进行的是一些列的测试操作，如果测试不通过，则片段对应的像素不会被更新到屏幕上。这些测试都需要用户通过 glEnable 开启。这些测试包括<br>\n</p>\n</div>\n\n<div id=\"outline-container-org71293f8\" class=\"outline-3\">\n<h3 id=\"org71293f8\">像素归属测试</h3>\n</div>\n\n<div id=\"outline-container-org01d6df8\" class=\"outline-3\">\n<h3 id=\"org01d6df8\">裁剪测试</h3>\n</div>\n\n<div id=\"outline-container-orga96ca6d\" class=\"outline-3\">\n<h3 id=\"orga96ca6d\">模板测试</h3>\n</div>\n\n<div id=\"outline-container-orge97764e\" class=\"outline-3\">\n<h3 id=\"orge97764e\">深度测试</h3>\n<div class=\"outline-text-3\" id=\"text-orge97764e\">\n<p>\n在进过上面的测试后，进入到颜色混合阶段。对于每一个片段的每一个颜色值，需要执行一个特定的混合的操作，这个操作来完成当前已经在帧缓冲中的像素和片段像素的混合计算。很多渐变特新就是通过混合来实现的。<br>\n一些对像素的逻辑操作也发生在这个地方<br>\n</p>\n\n<p>\n最后片段数据被写入帧缓冲区。 写入掩码可以防止特定值的写入。比如不允许写入深度信息。深度信息，模板信息，颜色信息都可以被阻止或者允许写入。颜色的指定的通道也可以被阻止或者允许写入。<br>\n</p>\n</div>\n</div>\n</div>\n</div>\n</body></html>","prev":{"title":"从信号处理的角度理解 OpenGL 多重采样","link":"2019/10/31/multisample-related"},"next":{"title":"高效能实践","link":"2019/10/29/productivity-practices"},"plink":"https://kopinions.com/2019/10/31/render-pipeline/","toc":[{"id":"org4204f20","title":"渲染管线","index":"1"},{"id":"Vertex Specification","title":"顶点数据","index":"2"},{"id":"orgf3dd61c","title":"顶点渲染","index":"3"},{"id":"Vertex Processing","title":"顶点处理","index":"4","children":[{"id":"orgcbc3363","title":"顶点着色","index":"4.1"},{"id":"org3abc667","title":"细分着色","index":"4.2"},{"id":"orgf220693","title":"几何着色","index":"4.3"}]},{"id":"Vertex Post-Processing","title":"顶点后置处理阶段","index":"5","children":[{"id":"org35313c4","title":"变换反馈（Transform Feedback）","index":"5.1"},{"id":"orgdf6065d","title":"裁剪","index":"5.2"}]},{"id":"Primitive Assembly","title":"图元装配","index":"6","children":[{"id":"orgeb73583","title":"背面剔除","index":"6.1"}]},{"id":"Rasterization","title":"光栅化（不可编程）","index":"7"},{"id":"org2961a37","title":"片段处理（可编程）","index":"8"},{"id":"org44ca908","title":"逐采样处理","index":"9","children":[{"id":"org71293f8","title":"像素归属测试","index":"9.1"},{"id":"org01d6df8","title":"裁剪测试","index":"9.2"},{"id":"orga96ca6d","title":"模板测试","index":"9.3"},{"id":"orge97764e","title":"深度测试","index":"9.4"}]}],"reading_time":"2931 字约 20 分钟"}