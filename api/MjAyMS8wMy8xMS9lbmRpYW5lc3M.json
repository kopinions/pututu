{"title":"理解计算机大小端（字节序）","date":"2021-03-11T00:00:00.000Z","date_formatted":{"ll":"2021年3月11日","L":"2021/03/11","MM-DD":"03-11"},"link":"2021/03/11/endianess","tags":["encoding","ic"],"categories":["encoding","ic"],"updated":"2021-03-11T00:00:00.000Z","content":"<html><head></head><body><div id=\"content\">\n<p>\n相信大小端大家都不陌生，常见的定义如下：<br>\n小端模式（Little Endian）：数据的低位保存在低地址，数据的高位保存在高地址。<br>\n大端模式（Big Endian）： 数据的低位保存在高地址，数据的高位保存在低地址。<br>\n</p>\n\n<div id=\"outline-container-orge152d45\" class=\"outline-2\">\n<h2 id=\"orge152d45\">为什么会有大小端</h2>\n<div class=\"outline-text-2\" id=\"text-orge152d45\">\n<p>\n我们知道在计算机中，最基础的数只有 0, 1。所有的其他数都是有 0, 1 的组合来表示。比如我们可以使用 0b1111 来代表 15<br>\n可以用 0b1011 来 代表 11。但是当我们 0b1101 在两个计算机之间传输的时候，问题就出现了。在计算机与计算机传输的过程中，很多时候往往只有一跟数据线，所以很多时候都是以 bit 为单位进行传输的。<br>\n这种时候问题就来了，我们想传输一个数，到底是先传输高位，还是先传输最低位，如下所示<br>\n</p>\n\n<ol class=\"org-ol\">\n<li>先传输最高位，依次传输，最后传输最低位<br></li>\n<li>先传输最低位，依次传输，最后传输最高位<br></li>\n</ol>\n\n<p>\n其实两种方式都是可以的。具体实际的取决与协议。我们把这种情况叫做比特序。bit order<br>\n</p>\n\n<p>\n从历史的观点来看，一个字节表示的是编码单个字符所需要的 bit 数量，ascii 表中总共有 256 个字符，所以总共需要 8 个 bit 来表示字符，所以现在我们使用的一个字节就是 8 个 bit. 通常我们使用 byte<br>\n作为信息计量的单位。比如表示一个 0-65536 之间的数，就需要两个 byte. 往往这些信息需要存储在内存中。内存地址的编址如下所示：<br>\n</p>\n\n\n<div id=\"org1360ddb\" class=\"figure\">\n<p><img src=\"/2021/03/11/endianess/mem.png\"><br>\n</p>\n</div>\n\n<p>\n那么我们在内存中如何写入一个 short(2 byte) 的数字，并且我们还能在正确的把这个数字从内存中读出来？<br>\n</p>\n\n<p>\n按照人类的习惯，我们在表示数字的时候都是 0x1122 这种形式，这个 0x1122 代表的是信息。11 是信息的高位，22 是信息的低位。从上图可以看出我们的存储是以字节为单位的，所以在存储的时候，高位的 11 在高地址，还是在低地址？<br>\n这种时候我们需要一个协议来完成信息的传递，我们称这样的协议为大小端。<br>\n</p>\n\n<p>\n大小端的定义如下：<br>\n</p>\n\n<ul class=\"org-ul\">\n<li>大端字节序：高位字节在前，低位字节在后，这是人类读写数值的方法。<br></li>\n<li>小端字节序：低位字节在前，高位字节在后，即以0x1122形式储存。<br></li>\n</ul>\n\n<p>\n具体存储如下图所示：<br>\n</p>\n\n\n<div id=\"orgaa9b5c3\" class=\"figure\">\n<p><img src=\"/2021/03/11/endianess/big_small_endian.png\"><br>\n</p>\n</div>\n\n\n<p>\n细心的同学一定会发现，如果我们大家都按照一种顺序来进行存储和读取完全是不会出问题了，为什么我们不统一一下呢？ 答案是大小端在硬件设计中各有自己的优缺点，不同场景下可能会有不同的选择。另外<br>\n由于一些历史原因， 所以大小端至今依然是并存的。<br>\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-org8a26ac2\" class=\"outline-2\">\n<h2 id=\"org8a26ac2\">大小端各自的优势</h2>\n<div class=\"outline-text-2\" id=\"text-org8a26ac2\">\n<p>\n在讨论优势前，我们需要知道地是处理器在访问存储地时候，都是从低地址向高地址读取的。<br>\n</p>\n</div>\n<div id=\"outline-container-org2ca8c49\" class=\"outline-3\">\n<h3 id=\"org2ca8c49\">大端优势</h3>\n<div class=\"outline-text-3\" id=\"text-org2ca8c49\">\n<ul class=\"org-ul\">\n<li>符号位（最高位）在低地址，这样 cpu 在处理的时候，能非常快的值的正负情况<br></li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-orge20ec5e\" class=\"outline-3\">\n<h3 id=\"orge20ec5e\">小端优势</h3>\n<div class=\"outline-text-3\" id=\"text-orge20ec5e\">\n<ul class=\"org-ul\">\n<li>最低位在低地址，最高位在高地址，这样在强制类型转换的时候，不需要调整内存的顺序。<br></li>\n<li>CPU 在从低地址读取操作数进行运算，低地址是低位，这样依次计算完成进位，会更加高效。<br></li>\n</ul>\n</div>\n</div>\n</div>\n<div id=\"outline-container-orgc0152f4\" class=\"outline-2\">\n<h2 id=\"orgc0152f4\">如何记忆大小端</h2>\n<div class=\"outline-text-2\" id=\"text-orgc0152f4\">\n<p>\n一直我对大小端的记忆都比较模糊，也容易混淆。究其原因是大小端的翻译容易混淆。大小端在英语中是 endian, 取自一个故事：到底是从小头开始吃鸡蛋，还是大头开始吃鸡蛋。<br>\n</p>\n\n<p>\n所谓大小端，其实应该翻译成大小开端，即高位开始，还是从低位开始。从内存地址开始读取/写入，第一个字节是高位，还是低位（内存地址的读写是从低地址到高地址）。<br>\n</p>\n\n<p>\n大端 <code>= 高位开始（当前内存地址开始读取为高位，下一个内存地址为次高位）\n    小端 =</code> 低位开始（当前内存地址开始读取为低位，下一个内存地址为次低位）<br>\n</p>\n\n<p>\n如下图所示<br>\n<img src=\"/2021/03/11/endianess/memo.png\"><br>\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-org2e5e560\" class=\"outline-2\">\n<h2 id=\"org2e5e560\">如何判断大小端</h2>\n<div class=\"outline-text-2\" id=\"text-org2e5e560\">\n</div>\n<div id=\"outline-container-org6849a45\" class=\"outline-3\">\n<h3 id=\"org6849a45\">命令行</h3>\n<div class=\"outline-text-3\" id=\"text-org6849a45\">\n<ol class=\"org-ol\">\n<li><p>\n使用 octal, decimal, hex, ascii dump 工具<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -n I | <span class=\"built_in\">od</span> -o | <span class=\"built_in\">head</span> -n1 | <span class=\"built_in\">cut</span> -f2 -d<span class=\"string\">\" \"</span> | <span class=\"built_in\">cut</span> -c6</span><br></pre></td></tr></tbody></table></figure>\n</div>\n<p>\n输出 1 为小端模式， 输出为 0, 为大端模式。<br>\n</p></li>\n<li><p>\n使用 lscpu<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">lscpu | grep -i byte</span><br></pre></td></tr></tbody></table></figure>\n</div>\n<p>\n会直接输出大小端。<br>\n</p></li>\n</ol>\n</div>\n</div>\n\n<div id=\"outline-container-orgde08194\" class=\"outline-3\">\n<h3 id=\"orgde08194\">代码</h3>\n<div class=\"outline-text-3\" id=\"text-orgde08194\">\n</div>\n<div id=\"outline-container-org14d9f52\" class=\"outline-4\">\n<h4 id=\"org14d9f52\">使用强制在转换</h4>\n<div class=\"outline-text-4\" id=\"text-org14d9f52\">\n<div class=\"org-src-container\">\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">  <span class=\"type\">int</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(*(<span class=\"type\">char</span>*)&amp;num ==<span class=\"number\">1</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"小端字节序\\n\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    {</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"大端字节序\\n\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</div>\n</div>\n</div>\n\n\n\n<div id=\"outline-container-orge7a64f8\" class=\"outline-4\">\n<h4 id=\"orge7a64f8\">使用 union</h4>\n<div class=\"outline-text-4\" id=\"text-orge7a64f8\">\n<div class=\"org-src-container\">\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">union</span> <span class=\"title class_\">A</span>{</span><br><span class=\"line\">  <span class=\"type\">char</span> c;</span><br><span class=\"line\">  <span class=\"type\">int</span> a;\t</span><br><span class=\"line\">}A;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">  A.a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(A.c == <span class=\"number\">1</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">      cout&lt;&lt;<span class=\"string\">\"小端字节序\"</span>&lt;&lt;endl;</span><br><span class=\"line\">    }</span><br><span class=\"line\">  <span class=\"keyword\">else</span> </span><br><span class=\"line\">    {</span><br><span class=\"line\">      cout&lt;&lt;<span class=\"string\">\"大端字节序\"</span>&lt;&lt;endl;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-org9a8d62a\" class=\"outline-4\">\n<h4 id=\"org9a8d62a\">使用 union 2</h4>\n<div class=\"outline-text-4\" id=\"text-org9a8d62a\">\n<div class=\"org-src-container\">\n<figure class=\"highlight cpp\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">union</span>{</span><br><span class=\"line\">  <span class=\"type\">int</span> i;</span><br><span class=\"line\">  <span class=\"type\">char</span> c[<span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>)];</span><br><span class=\"line\">}num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">  num.i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(num.c[<span class=\"number\">0</span>] == <span class=\"number\">0</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"小端字节序\\n\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">  <span class=\"keyword\">else</span> </span><br><span class=\"line\">    {</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">\"大端字节序\\n\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</body></html>","prev":{"title":"GPU 硬件设计过程中的相关术语","link":"2021/03/20/gpu_related_words"},"next":{"title":"Git 常见问题","link":"2021/02/15/git_faq"},"plink":"https://kopinions.com/2021/03/11/endianess/","toc":[{"id":"orge152d45","title":"为什么会有大小端","index":"1"},{"id":"org8a26ac2","title":"大小端各自的优势","index":"2","children":[{"id":"org2ca8c49","title":"大端优势","index":"2.1"},{"id":"orge20ec5e","title":"小端优势","index":"2.2"}]},{"id":"orgc0152f4","title":"如何记忆大小端","index":"3"},{"id":"org2e5e560","title":"如何判断大小端","index":"4","children":[{"id":"org6849a45","title":"命令行","index":"4.1"},{"id":"orgde08194","title":"代码","index":"4.2"}]}],"reading_time":"1365 字约 9 分钟"}