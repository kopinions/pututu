{"title":"Verilog 笔记","date":"2020-02-15T12:40:20.000Z","date_formatted":{"ll":"2020年2月15日","L":"2020/02/15","MM-DD":"02-15"},"link":"2020/02/15/verilog-tuturial","tags":["ic","verilog"],"categories":["design","ic"],"updated":"2020-02-15T00:00:00.000Z","content":"<html><head></head><body><div id=\"content\">\n\n<div id=\"outline-container-org5f4edad\" class=\"outline-2\">\n<h2 id=\"org5f4edad\">集成电路有两种类型：</h2>\n<div class=\"outline-text-2\" id=\"text-org5f4edad\">\n<ol class=\"org-ol\">\n<li>组合电路<br></li>\n<li>时序电路<br></li>\n</ol>\n\n<p>\n通俗的解释组合电路就是一个短的水管一段放水一边就直接有水。<br>\n时序电路是一个小的蓄水池,隔一段时间去开一次阀门。就会放出一部分的水。可以想象成梯田<br>\n</p>\n\n<p>\nRTL: Register Transfer Level. 寄存器传输级。包括时序电路和组合电路的电路。<br>\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-orgcd5c7a1\" class=\"outline-2\">\n<h2 id=\"orgcd5c7a1\">语言要素</h2>\n<div class=\"outline-text-2\" id=\"text-orgcd5c7a1\">\n</div>\n<div id=\"outline-container-org2a0c809\" class=\"outline-3\">\n<h3 id=\"org2a0c809\">数据类型</h3>\n<div class=\"outline-text-3\" id=\"text-org2a0c809\">\n</div>\n<div id=\"outline-container-orge9fbf0f\" class=\"outline-4\">\n<h4 id=\"orge9fbf0f\">线网类型</h4>\n<div class=\"outline-text-4\" id=\"text-orge9fbf0f\">\n<p>\n表示 Verilog 结构化元器件之间的物理连线。线网的值由连接的元件值决定，例如连续赋值，或者门的输出。<br>\n如果没有连接（驱动元件），线网的缺省值为 z(高阻).<br>\n典型的线网类型为 wire.<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-org4f8f312\" class=\"outline-4\">\n<h4 id=\"org4f8f312\">变量类型</h4>\n<div class=\"outline-text-4\" id=\"text-org4f8f312\">\n<p>\n表示一个抽象的数据单元（在 IEEE 2001 公布之前，称之为寄存器类型）。变量类型只能在 always,或者 initial 语句块中<br>\n进行赋值。变量的值一直保持，直到下一次赋值。未初始化的变量的值为 x(未知)<br>\n</p>\n\n<p>\n变量类型有：reg, integer, time, real, realtime<br>\n</p>\n</div>\n<ul class=\"org-ul\">\n<li><a id=\"orgcac1011\"></a>reg 类型：<br>\n<div class=\"outline-text-5\" id=\"text-orgcac1011\">\n<p>\nreg [signed] [][msb:lsb]] reg1, reg2;<br>\n</p>\n</div>\n</li>\n<li><a id=\"org28f6283\"></a>存储器（memories）<br>\n<div class=\"outline-text-5\" id=\"text-org28f6283\">\n<p>\n寄存器是由 reg 变量组成的数组。存储器的变量申明为：<br>\n</p>\n\n<div class=\"org-src-container\">\n<figure class=\"highlight verilog\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">reg</span> [[msb:lsb]] memory1[upper1:lower1]</span><br><span class=\"line\">\t\tmemory2[upper2:lower2];</span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\n需要注意的是存储器赋值不能在一条语句中完成，但是 reg 变量却可以。<br>\n</p>\n\n<div class=\"org-src-container\">\n<figure class=\"highlight verilog\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// trans 是变量类型</span></span><br><span class=\"line\"><span class=\"keyword\">reg</span> [<span class=\"number\">5</span>:<span class=\"number\">1</span>] trans;</span><br><span class=\"line\"><span class=\"comment\">// reg 变量可以通过一个语句进行赋值</span></span><br><span class=\"line\">trans = <span class=\"number\">5'b00000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是 5 位的存储器类型</span></span><br><span class=\"line\"><span class=\"keyword\">reg</span> trans [<span class=\"number\">1</span>:<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"comment\">// 这个赋值是不合法的</span></span><br><span class=\"line\">trans = <span class=\"number\">5'b00000</span>;</span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\n对于存储器的赋值有如下的几种方式<br>\n</p>\n<ol class=\"org-ol\">\n<li>分别对寄存器中的每个字赋值<br></li>\n</ol>\n<div class=\"org-src-container\">\n<figure class=\"highlight verilog\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// rom 是一个 4 位宽的 reg 组成的存储器</span></span><br><span class=\"line\"><span class=\"keyword\">reg</span> [<span class=\"number\">3</span>:<span class=\"number\">1</span>] rom [<span class=\"number\">3</span>:<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"comment\">// 只能通过字的赋值来对寄存器进行赋值</span></span><br><span class=\"line\">rom[<span class=\"number\">0</span>] = <span class=\"number\">4'h0</span>;</span><br><span class=\"line\">rom[<span class=\"number\">1</span>] = <span class=\"number\">4'h1</span>;</span><br><span class=\"line\">rom[<span class=\"number\">2</span>] = <span class=\"number\">4'h1</span>;</span><br><span class=\"line\">rom[<span class=\"number\">3</span>] = <span class=\"number\">4'h0</span>;</span><br></pre></td></tr></tbody></table></figure>\n</div>\n<ol class=\"org-ol\">\n<li>通过系统任务：readmemb, readmemh 进行赋值<br></li>\n</ol>\n<div class=\"org-src-container\">\n<figure class=\"highlight verilog\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// rom 是存储器类型</span></span><br><span class=\"line\"><span class=\"keyword\">reg</span> [<span class=\"number\">3</span>:<span class=\"number\">0</span>] rom [<span class=\"number\">3</span>:<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"comment\">// 通过 rom.patt 文件对 rom 存储器进行初始化</span></span><br><span class=\"line\"><span class=\"built_in\">$readmemb</span>(<span class=\"string\">\"rom.patt\"</span>, rom);</span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\n其中 rom.patt 内容如下所示<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight text\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">1101 1111</span><br><span class=\"line\">// this line is comment</span><br><span class=\"line\">/* this line is also comment */</span><br><span class=\"line\">@2 1111</span><br><span class=\"line\">@3 0000</span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\n在 rom.patt 中可以包含空白位置（空格，tab, 换行），和注释信息（ //, /*xxxxx*/）。对于 readmemb, 所有的数字只能是 2 进制<br>\n对于 readmemh, 所有的数字只能是 16 进制。也可以通过 @hex_address value 的形式来对存储器指定位置进行赋值。<br>\n</p>\n</div>\n</li>\n<li><a id=\"orgddefed6\"></a>整数型（integer）变量<br>\n<div class=\"outline-text-5\" id=\"text-orgddefed6\">\n<p>\n整型变量可以作为普通变量使用，通常用于高层次的建模。<br>\ninteger integer1,integer2;<br>\n</p>\n</div>\n</li>\n<li><a id=\"org0df2683\"></a>时间（time）变量<br>\n<div class=\"outline-text-5\" id=\"text-org0df2683\">\n<p>\n时间变量用于存储和计算时间。<br>\ntime events[0:31]; // 时间变量数组<br>\n</p>\n</div>\n</li>\n<li><a id=\"orgd9eec4f\"></a>实型（real）和实型时间（real time）变量<br>\n<div class=\"outline-text-5\" id=\"text-orgd9eec4f\">\n<p>\nreal real_reg1;<br>\nrealtime real_time1;<br>\n</p>\n</div>\n</li>\n<li><a id=\"org684f7f9\"></a>数组<br>\n<div class=\"outline-text-5\" id=\"text-org684f7f9\">\n<p>\n线网和变量的多维数组可以通过一条数组语句进行声明。<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight verilog\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">wire</span> push_bts[<span class=\"number\">0</span>:<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">reg</span> [<span class=\"number\">0</span>:<span class=\"number\">7</span>] fifo [<span class=\"number\">0</span>:<span class=\"number\">63</span>];</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n</div>\n</div>\n</li>\n</ul>\n</div>\n<div id=\"outline-container-orgfa0b310\" class=\"outline-4\">\n<h4 id=\"orgfa0b310\">reg 和 wire 的区别</h4>\n<div class=\"outline-text-4\" id=\"text-orgfa0b310\">\n<p>\nreg 变量只能在 always 或者 initial 语句中赋值。<br>\nwire 线网只能使用连续赋值语句进行赋值。assign xx=1'b0。 或者通过模块实例化的的端口赋值。<br>\n初始化后， reg 的值变为 x(未知), wire 的值变为 z(高阻)<br>\n</p>\n\n<p>\nwire 可以被赋予强度值，但是 reg 类型不能被赋予强度值。<br>\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-orgd3d58e1\" class=\"outline-3\">\n<h3 id=\"orgd3d58e1\">参数（parameter）</h3>\n<div class=\"outline-text-3\" id=\"text-orgd3d58e1\">\n<div class=\"org-src-container\">\n<figure class=\"highlight verilog\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">parameter</span> [<span class=\"keyword\">signed</span>][[msb:lsb]] param1 = <span class=\"number\">1</span>b'<span class=\"number\">0</span>, param2=<span class=\"number\">1'b1</span>;</span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\n参数经常用来指定一个模块的位宽之类的配置，从而在实例化的时候，指定不同的位宽行为。parameter 的作用于是模块的内部<br>\n</p>\n\n<div class=\"org-src-container\">\n<figure class=\"highlight verilog\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> addr_decoder(addr, sel);</span><br><span class=\"line\">   <span class=\"keyword\">parameter</span> AW = <span class=\"number\">16</span>;</span><br><span class=\"line\">   <span class=\"keyword\">input</span> <span class=\"keyword\">wire</span> [AW-<span class=\"number\">1</span>:<span class=\"number\">0</span>] addr;</span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过这样的模块初始化的方式，来进行参数的初始化，从而对模块进行更加灵活的配置。</span></span><br><span class=\"line\"><span class=\"keyword\">module</span> addr_decoder </span><br><span class=\"line\">  #(</span><br><span class=\"line\">    <span class=\"variable\">.AW</span>(<span class=\"number\">32</span>))</span><br><span class=\"line\">   m_addr_decoder </span><br><span class=\"line\">     (</span><br><span class=\"line\">      <span class=\"variable\">.addr</span>(xxx),</span><br><span class=\"line\">      <span class=\"variable\">.sel</span>(xxx)</span><br><span class=\"line\">      );</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-org1955c0e\" class=\"outline-3\">\n<h3 id=\"org1955c0e\">局部参数（ localparam ）</h3>\n<div class=\"outline-text-3\" id=\"text-org1955c0e\">\n<p>\n局部参数是模块内部的参数。不能通过模块实例化的过程中通过参数转递，或者重新定义参数来对局部参数进行修改。<br>\n</p>\n\n<div class=\"org-src-container\">\n<figure class=\"highlight verilog\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">localparam</span> hsel = <span class=\"number\">1'b1</span></span><br></pre></td></tr></tbody></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-org2a1e19e\" class=\"outline-3\">\n<h3 id=\"org2a1e19e\">综合相关</h3>\n<div class=\"outline-text-3\" id=\"text-org2a1e19e\">\n</div>\n<div id=\"outline-container-org9535795\" class=\"outline-4\">\n<h4 id=\"org9535795\">异步复位</h4>\n<div class=\"outline-text-4\" id=\"text-org9535795\">\n<div class=\"org-src-container\">\n<figure class=\"highlight verilog\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> test (<span class=\"comment\">/*AUTOARG*/</span></span><br><span class=\"line\">\t     <span class=\"comment\">// Inputs</span></span><br><span class=\"line\">\t     clk,</span><br><span class=\"line\">\t     reset_n</span><br><span class=\"line\">\t     ) ;</span><br><span class=\"line\">  <span class=\"keyword\">input</span> <span class=\"keyword\">wire</span> clk;</span><br><span class=\"line\">  <span class=\"keyword\">input</span> <span class=\"keyword\">wire</span> reset_n;</span><br><span class=\"line\">  <span class=\"keyword\">reg</span>        some_en;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">always</span> @ ( <span class=\"keyword\">posedge</span> clk <span class=\"keyword\">or</span> <span class=\"keyword\">negedge</span> reset_n ) <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (~reset_n) <span class=\"keyword\">begin</span></span><br><span class=\"line\">      some_en &lt;= <span class=\"number\">1'b0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span> <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">      some_en &lt;= <span class=\"number\">1'b1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span> <span class=\"comment\">// test</span></span><br></pre></td></tr></tbody></table></figure>\n</div>\n<p>\n对于上面模块，因为 reset_n 在 always 的信号关注列表，这种情况下会综合成异步复位，同步释放的逻辑<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-org10e5610\" class=\"outline-4\">\n<h4 id=\"org10e5610\">同步复位</h4>\n<div class=\"outline-text-4\" id=\"text-org10e5610\">\n<div class=\"org-src-container\">\n<figure class=\"highlight verilog\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> test (<span class=\"comment\">/*AUTOARG*/</span></span><br><span class=\"line\">\t     <span class=\"comment\">// Inputs</span></span><br><span class=\"line\">\t     clk,</span><br><span class=\"line\">\t     reset_n</span><br><span class=\"line\">\t     ) ;</span><br><span class=\"line\">  <span class=\"keyword\">input</span> <span class=\"keyword\">wire</span> clk;</span><br><span class=\"line\">  <span class=\"keyword\">input</span> <span class=\"keyword\">wire</span> reset_n;</span><br><span class=\"line\">  <span class=\"keyword\">reg</span>        some_en;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">always</span> @ ( <span class=\"keyword\">posedge</span> clk ) <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (~reset_n) <span class=\"keyword\">begin</span></span><br><span class=\"line\">      some_en &lt;= <span class=\"number\">1'b0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span> <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">      some_en &lt;= <span class=\"number\">1'b1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span> <span class=\"comment\">// test</span></span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\n对于这种写法综合出来的就是同步复位的 reset, 因为 电路描述的是，不关心 reset 的沿，意味着 reset 和 clk 应该是<br>\n同步的。<br>\n</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</body></html>","prev":{"title":"Mesa3D 编译","link":"2020/02/15/mesa"},"next":{"title":"如何科（ti）学（zi）冲浪（shangwang）","link":"2020/02/15/vpn-v2ray-ssx-ssr-haproxy"},"plink":"https://kopinions.com/2020/02/15/verilog-tuturial/","toc":[{"id":"org5f4edad","title":"集成电路有两种类型：","index":"1"},{"id":"orgcd5c7a1","title":"语言要素","index":"2","children":[{"id":"org2a0c809","title":"数据类型","index":"2.1"},{"id":"orgd3d58e1","title":"参数（parameter）","index":"2.2"},{"id":"org1955c0e","title":"局部参数（ localparam ）","index":"2.3"},{"id":"org2a1e19e","title":"综合相关","index":"2.4"}]}],"reading_time":"1191 字约 8 分钟"}