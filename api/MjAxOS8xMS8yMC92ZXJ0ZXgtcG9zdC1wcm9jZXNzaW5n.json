{"title":"OpenGL 顶点后处理阶段","date":"2019-11-20T12:40:20.000Z","date_formatted":{"ll":"2019年11月20日","L":"2019/11/20","MM-DD":"11-20"},"link":"2019/11/20/vertex-post-processing","tags":["graphic","opengl"],"categories":["graphics","opengl"],"updated":"2019-11-20T00:00:00.000Z","content":"<html><head></head><body><div id=\"content\">\n\n\n<div id=\"outline-container-orgc69df53\" class=\"outline-2\">\n<h2 id=\"orgc69df53\">顶点后处理阶段</h2>\n<div class=\"outline-text-2\" id=\"text-orgc69df53\">\n<p>\n顶点后处理阶段收到了顶点处理阶段处理后的所有的顶点，在这些顶点上需要进行一系列的处理，以便与后续的图元装配和光栅化。<br>\n</p>\n\n<p>\n顶点处理后，下面的步骤依次执行。<br>\n</p>\n\n<ol class=\"org-ol\">\n<li><a href=\"#org69e75d5\">变换反馈</a><br></li>\n<li><a href=\"#orgaf56fce\">裁剪</a><br>\n<ol class=\"org-ol\">\n<li><a href=\"#org8846318\">深度夹具</a><br></li>\n<li><a href=\"#org8242a37\">自定义裁剪</a><br></li>\n</ol></li>\n<li><a href=\"#org86f455d\">透视分割</a><br></li>\n<li><a href=\"#orgff71a05\">视口裁剪</a><br></li>\n</ol>\n</div>\n\n\n<div id=\"outline-container-orgcf52c69\" class=\"outline-3\">\n<h3 id=\"orgcf52c69\">变换反馈 <a id=\"org69e75d5\"></a></h3>\n<div class=\"outline-text-3\" id=\"text-orgcf52c69\">\n<p>\n变换反馈将顶点处理阶段的结果收集的缓冲对象中。通过这样的机制，可以获取到顶点处理后的结果，从而可以多次提交和使用这些数据。<br>\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-orga13e111\" class=\"outline-3\">\n<h3 id=\"orga13e111\">裁剪（Cliping） <a id=\"orgaf56fce\"></a></h3>\n<div class=\"outline-text-3\" id=\"text-orga13e111\">\n<p>\n裁剪发生在顶点后处理阶段。。裁剪就是这一些列操作中的一个。<br>\n</p>\n\n<p>\n在流水线前序阶段生成的所有图元都会被裁剪以适应视景体。每一个输出顶点都会带有一个裁剪空间的坐标（顶点处理阶段设置的 gl_Position）。<br>\n裁剪视景体通过如下的公式来定义<br>\n</p>\n\n<p>\n-w_{c} &lt;= x_{c} &lt;= w_{c}<br>\n-w_{c} &lt;= y_{c} &lt;= w_{c}<br>\n-w_{c} &lt;= z_{c} &lt;= w_{c}<br>\n</p>\n\n<p>\n在公式中， w_{c} 代表视景体的宽度（一般情况下，视景体是一个正立方体，所以可以用 -w -&gt; w 这种方式来描述）。x, y, z 分别代表<br>\n一个顶点在裁剪坐标系中的位置。<br>\n</p>\n\n<p>\n这个裁剪体可以通过 depth clamping 和用户自定义裁剪平面进行配置。所有裁剪相关空间组成的空间集合称之为裁剪体。<br>\n具体的裁剪算法会随着图元类型变化所变化。<br>\n</p>\n\n<p>\n如果图元为点，裁剪算法只需要判断顶点是否在裁剪体内。如果图元是直线， 此时裁剪算法就需要判断线段是否跟裁剪体相交。 如果线段和裁剪体相交，就需要将线段<br>\n裁剪为多个线段，裁剪掉不再裁剪体内的线段。如果图元为三角形，如果三角形跟裁剪体相交，裁剪算法需要将三角形拆分为多个三角形，<br>\n保留在裁剪体内的三角形，将不再裁剪体内的三角形裁剪掉。<br>\n</p>\n</div>\n\n<div id=\"outline-container-org253c489\" class=\"outline-4\">\n<h4 id=\"org253c489\">深度夹具 <a id=\"org8846318\"></a></h4>\n<div class=\"outline-text-4\" id=\"text-org253c489\">\n<p>\n我们可以通过深度夹具来修改 z 轴上的裁剪行为 (-w_{c} &lt;= z_{c} &lt;= w_{c})。通过 glEnable(GL_DEPTH_CLAMP), 将 z 轴上的裁剪行为关闭。<br>\n</p>\n\n<p>\n所以 Z 轴的值会向后传送，在完成 光栅化后，被 glDepthRange 定义的深度夹具进行规整。<br>\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-org10bc8e6\" class=\"outline-4\">\n<h4 id=\"org10bc8e6\">自定义裁剪 <a id=\"org8242a37\"></a></h4>\n<div class=\"outline-text-4\" id=\"text-org10bc8e6\">\n<p>\n额外的裁剪可以通过在顶点处理阶段指定顶点到裁剪平面的距离来完成。在顶点处理阶段，着色器程序可以输出一组变量 gl_ClipDistance[0-7] 来自定义裁剪。<br>\n</p>\n\n<p>\ngl_ClipDistance 数组的每一个变量都是一个独立控制的裁剪条件。每一个裁剪控制都需要通过 glEnable 单独开启。形式为 glEnable(GL_CLIP_DISTANCE0).<br>\n</p>\n\n<p>\n因为裁剪是固定管线，所以我们只能通过指定顶点距离裁剪平面的距离来自定义裁剪。通过 glEnable(GL_CLIP_DISTANCEi) 开启一个独立的裁剪条件，当裁剪条件开启后，<br>\n裁剪器会检查裁剪条件对应的 gl_ClipDistance[i] 中变量的值（distance to clip plane）. 如果该值非负，顶点处于裁剪平面内，如果该值为负，顶点处于裁剪平面之外。<br>\n</p>\n</div>\n</div>\n</div>\n\n\n<div id=\"outline-container-org9e92dd3\" class=\"outline-3\">\n<h3 id=\"org9e92dd3\">透视分割 <a id=\"org86f455d\"></a></h3>\n</div>\n\n<div id=\"outline-container-org9a46e00\" class=\"outline-3\">\n<h3 id=\"org9a46e00\">视口裁剪 <a id=\"orgff71a05\"></a></h3>\n</div>\n</div>\n</div>\n</body></html>","prev":{"title":"芯片设计过程以及技术（持续更新）","link":"2019/12/29/ic-flow"},"next":{"title":"计算机图形学原理及实践学习笔记","link":"2019/11/09/computer-graphic-principles-practices-chaptor-1"},"plink":"https://kopinions.com/2019/11/20/vertex-post-processing/","toc":[{"id":"orgc69df53","title":"顶点后处理阶段","index":"1","children":[{"id":"orgcf52c69","title":"变换反馈 ","index":"1.1"},{"id":"orga13e111","title":"裁剪（Cliping） ","index":"1.2"},{"id":"org9e92dd3","title":"透视分割 ","index":"1.3"},{"id":"org9a46e00","title":"视口裁剪 ","index":"1.4"}]}],"reading_time":"870 字约 6 分钟"}