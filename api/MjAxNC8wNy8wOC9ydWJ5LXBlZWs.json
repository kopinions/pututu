{"title":"ruby 入门","date":"2014-07-08T11:30:20.000Z","date_formatted":{"ll":"2014年7月8日","L":"2014/07/08","MM-DD":"07-08"},"link":"2014/07/08/ruby-peek","tags":["language"],"categories":["language"],"updated":"2022-09-29T15:48:22.621Z","content":"<p>Ruby是一种纯粹的面向对象编程语言。它由日本的松本行弘创建于1993年.</p>\n<p>Ruby 的特性与 Smalltalk、Perl 和 Python 类似。Perl、Python 和 Smalltalk 是脚本语言。Smalltalk 是一个真正的面向对象语言。Ruby，与 Smalltalk 一样，是一个完美的面向对象语言。使用 Ruby 的语法比使用 Smalltalk 的语法要容易得多。</p>\n<h4 id=\"双引号和单引号的区别\">双引号和单引号的区别<a title=\"#双引号和单引号的区别\" href=\"#双引号和单引号的区别\"></a></h4>\n<p>单引号仅仅是字符串，双引号，ruby会在字符串中寻找表达式，比如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">puts &quot;good #&#123;name.capitalize&#125;&quot;</span><br></pre></td></tr></table></figure>\n<p>此时，当ruby构造这个字符串的时候，他会将name的值替换到{}占位的地方。</p>\n<h4 id=\"array\">Array<a title=\"#array\" href=\"#array\"></a></h4>\n<h6 id=\"1.-&lt;&lt;用来向数组append一个值\">1. &lt;&lt;用来向数组append一个值<a title=\"#1.-&lt;&lt;用来向数组append一个值\" href=\"#1.-&lt;&lt;用来向数组append一个值\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = []</span><br><span class=\"line\">arr &lt;&lt; &#x27;test&#x27;</span><br></pre></td></tr></table></figure>\n<h6 id=\"2.-创建数组\">2. 创建数组<a title=\"#2.-创建数组\" href=\"#2.-创建数组\"></a></h6>\n<p>arr = [‘ant’, ‘bee’]<br>\narr = %w{ ant bee cat}</p>\n<h4 id=\"hash\">Hash<a title=\"#hash\" href=\"#hash\"></a></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">section = &#123;</span><br><span class=\"line\">\t:book =&gt; &#x27;book&#x27;,</span><br><span class=\"line\">\t:fold =&gt; &#x27;fold&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在ruby的hash中，key和value可以是任何的物体，在上面的hash中，我们的key就是一个symbol，这是rails的convention. 所以在ruby1.9中，添加了如下的语法糖，创建一个Symbol为key的Hash.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">section = &#123;</span><br><span class=\"line\">\tbook: &#x27;book&#x27;,</span><br><span class=\"line\">\tfold: &#x27;fold&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当Hash作为最后一个参数的时候，可以省略hash的花括号。 如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redirect_to action: &#x27;show&#x27;, id: product.id</span><br></pre></td></tr></table></figure>\n<h4 id=\"regular-expression\">Regular Expression<a title=\"#regular-expression\" href=\"#regular-expression\"></a></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/pattern/</span><br><span class=\"line\">or</span><br><span class=\"line\">%r&#123;pattern&#125;</span><br></pre></td></tr></table></figure>\n<p>用上面的两个语法糖来创建ruby下的Regular 的对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if line =~ /^matchstring.*/</span><br><span class=\"line\">\t// matched</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h4 id=\"control-structure\">Control Structure<a title=\"#control-structure\" href=\"#control-structure\"></a></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if statement</span><br><span class=\"line\">\t// do something</span><br><span class=\"line\">elsif desicion</span><br><span class=\"line\">\t// do other thing</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">while xxx</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">puts &#x27;danger&#x27; if explode == true</span><br></pre></td></tr></table></figure>\n<h4 id=\"code-block\">Code Block<a title=\"#code-block\" href=\"#code-block\"></a></h4>\n<p>lambda 将一个代码宽转换成Proc的对象</p>\n<h4 id=\"exception\">Exception<a title=\"#exception\" href=\"#exception\"></a></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">begin</span><br><span class=\"line\">rescue ActiveRecord::NotFound</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<h4 id=\"class\">Class<a title=\"#class\" href=\"#class\"></a></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attr_accessor :name # read and write</span><br><span class=\"line\">attr_reader :greet # read only</span><br><span class=\"line\">attr_write :age #write only</span><br></pre></td></tr></table></figure>\n<h4 id=\"modules\">Modules<a title=\"#modules\" href=\"#modules\"></a></h4>\n<p>和class 相似，但是，不能创建Module的实例，<br>\nModule的两个主要用途</p>\n<ol>\n<li>Namespace</li>\n<li>Share functionlity between classes.</li>\n</ol>\n<p>在rails中，Rails自动的将所有的helper mix到相应的view 的template中。</p>\n<h4 id=\"require\">Require<a title=\"#require\" href=\"#require\"></a></h4>\n<p>ruby中的require方法载入一个外部源文件的方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require File.expand_path(&#x27;../../config/enviroment&#x27;, __FILE__)</span><br></pre></td></tr></table></figure>\n<p>上面的语句用来自动include lib的code。通过相对路径。ruby会根据LOAD_PATH来寻找所有的目录。</p>\n<h4 id=\"monkey-patch\">Monkey Patch<a title=\"#monkey-patch\" href=\"#monkey-patch\"></a></h4>\n<p><strong>特别要注意的是Ruby的MonkeyPatch 是个module相关的，在某个module下的monkeypatch在其他的module下是不能用的，相当于不同的命名空间</strong></p>\n<h4 id=\"module-include-vs-extend\">module include vs extend<a title=\"#module-include-vs-extend\" href=\"#module-include-vs-extend\"></a></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module Foo</span><br><span class=\"line\">  def foo</span><br><span class=\"line\">    puts &#x27;heyyyyoooo!&#x27;</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">class Bar</span><br><span class=\"line\">  include Foo</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">Bar.new.foo # heyyyyoooo!</span><br><span class=\"line\">Bar.foo # NoMethodError: undefined method ‘foo’ for Bar:Class</span><br><span class=\"line\"></span><br><span class=\"line\">class Baz</span><br><span class=\"line\">  extend Foo</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">Baz.foo # heyyyyoooo!</span><br><span class=\"line\">Baz.new.foo # NoMethodError: undefined method ‘foo’ for #&lt;Baz:0x1e708&gt;</span><br></pre></td></tr></table></figure>\n<p>include 使得foo里面的方法能被Bar的instance所使用<br>\nextend 使得foo方法能被Baz类使用<br>\n尽管我们经常使用include来包括类方法，但是在很多项目中都使用include来包括类方法。可以使用以下方法来包括类方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module Foo</span><br><span class=\"line\">  def self.included(base)</span><br><span class=\"line\">    base.extend(ClassMethods)</span><br><span class=\"line\">  end</span><br><span class=\"line\">  </span><br><span class=\"line\">  module ClassMethods</span><br><span class=\"line\">    def bar</span><br><span class=\"line\">      puts &#x27;class method&#x27;</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br><span class=\"line\">  </span><br><span class=\"line\">  def foo</span><br><span class=\"line\">    puts &#x27;instance method&#x27;</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">class Baz</span><br><span class=\"line\">  include Foo</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">Baz.bar # class method</span><br><span class=\"line\">Baz.new.foo # instance method</span><br><span class=\"line\">Baz.foo # NoMethodError: undefined method ‘foo’ for Baz:Class</span><br><span class=\"line\">Baz.new.bar # NoMethodError: undefined method ‘bar’ for #&lt;Baz:0x1e3d4&gt;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"如何使用 Heroku 部署应用","link":"2014/07/09/heroku-app-deploy"},"next":{"title":"NodeJS Express 入门","link":"2014/07/07/express-intro"},"plink":"https://kopinions.com/2014/07/08/ruby-peek/","reading_time":"795 字约 5 分钟"}