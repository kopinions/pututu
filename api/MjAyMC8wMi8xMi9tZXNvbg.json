{"title":"Mesa meson 构建系统初探","date":"2020-02-12T12:40:20.000Z","date_formatted":{"ll":"2020年2月12日","L":"2020/02/12","MM-DD":"02-12"},"link":"2020/02/12/meson","tags":["Graphics","OpenGL","mesa"],"categories":["Graphics","OpenGL"],"updated":"2020-02-12T00:00:00.000Z","content":"<html><head></head><body><div id=\"content\">\n\n<div id=\"outline-container-orgaf967a2\" class=\"outline-2\">\n<h2 id=\"orgaf967a2\">meson 是什么？</h2>\n<div class=\"outline-text-2\" id=\"text-orgaf967a2\">\n<p>\nmeson 是一个新的构建工具。meson 提供一套新的 DSL 用来描述我们的项目结构，从而能达到简化我们构建脚本的目的。<br>\n</p>\n\n<p>\nmeson 强制使用代码外构建策略（不在代码目录中写入任何内容），所有的构建过程都在单独的目录。从 meson 的命令也可以看出<br>\n<code class=\"src src-sh\">meson [command] [arguments] [options]</code> , 其中有些 setup 相关的命令必须指定一个目录才可以。<br>\n</p>\n</div>\n</div>\n<div id=\"outline-container-orge21b226\" class=\"outline-2\">\n<h2 id=\"orge21b226\">meson 使用</h2>\n<div class=\"outline-text-2\" id=\"text-orge21b226\">\n<p>\nmeson 构建系统使用项目根目录的 meson.build 文件作为项目构建的描述文件。类似于项目根目录的 CMakeLists.txt<br>\n</p>\n</div>\n\n<div id=\"outline-container-org10110fe\" class=\"outline-3\">\n<h3 id=\"org10110fe\">简单的 meson 示例</h3>\n<div class=\"outline-text-3\" id=\"text-org10110fe\">\n<div class=\"org-src-container\">\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">project(<span class=\"string\">'simple'</span>, <span class=\"string\">'c'</span>)</span><br><span class=\"line\">src = [<span class=\"string\">'source1.c'</span>, <span class=\"string\">'source2.c'</span>, <span class=\"string\">'source3.c'</span>]</span><br><span class=\"line\">exe = executable(<span class=\"string\">'myexe'</span>, src)</span><br><span class=\"line\">test(<span class=\"string\">'simple test'</span>, exe)</span><br></pre></td></tr></tbody></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-orga9affa3\" class=\"outline-3\">\n<h3 id=\"orga9affa3\">配置构建目录</h3>\n<div class=\"outline-text-3\" id=\"text-orga9affa3\">\n<div class=\"org-src-container\">\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /path/to/source/root/</span><br><span class=\"line\"><span class=\"comment\"># 通过 setup 命令创建 builddir, meson 通过加载 meson.build 配置文件，按照对应的后端（ninja,make）生成对应的构建脚本，并将其写入 builddir</span></span><br><span class=\"line\">meson setup builddir --backend=ninja</span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\n在上面的命令中，builddir 是必须的选项。因为这样可以极大的简化构建的过程。我们可以通过指定不同的选项，和不同的构建目录，从而来完成不同的构建。<br>\n比如我们可以使用 <code class=\"src src-sh\">CC=clang CXX=clang++ meson setup buildclang</code> 来完成 clang 环境下的构建。<br>\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-org5a3a296\" class=\"outline-3\">\n<h3 id=\"org5a3a296\">环境变量</h3>\n<div class=\"outline-text-3\" id=\"text-org5a3a296\">\n<p>\n在使用 meson 构建系统的时候，我们可以通过环境变量来控制 meson 不同的行为。比如如下的一些<br>\n</p>\n\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"org-left\">\n\n<col class=\"org-left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"org-left\">Name</th>\n<th scope=\"col\" class=\"org-left\">Comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-left\">CFLAGS</td>\n<td class=\"org-left\">Flags for the C compiler</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">CXXFLAGS</td>\n<td class=\"org-left\">Flags for the C++ compiler</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n\n<div id=\"outline-container-orge34107a\" class=\"outline-3\">\n<h3 id=\"orge34107a\">构建</h3>\n<div class=\"outline-text-3\" id=\"text-orge34107a\">\n<div class=\"org-src-container\">\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">ninja -C builddir</span><br></pre></td></tr></tbody></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-orge2fac58\" class=\"outline-3\">\n<h3 id=\"orge2fac58\">测试</h3>\n<div class=\"outline-text-3\" id=\"text-orge2fac58\">\n<div class=\"org-src-container\">\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">ninja -C builddir <span class=\"built_in\">test</span></span><br></pre></td></tr></tbody></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-org9d7e25b\" class=\"outline-3\">\n<h3 id=\"org9d7e25b\">安装</h3>\n<div class=\"outline-text-3\" id=\"text-org9d7e25b\">\n<div class=\"org-src-container\">\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">ninja -C builddir install</span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\n默认的 meson 会安装到 /usr/local 目录， 我们可以在 setup 的时候，使用 –prefix /my/prefix 来修改安装目录。meson 同时还支持 DESTDIR 环境变量来修改安装目录。示例如下<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">DESTDIR=/path/to/staging ninja -C builddir install</span><br></pre></td></tr></tbody></table></figure>\n</div>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-org0a23789\" class=\"outline-2\">\n<h2 id=\"org0a23789\">构建选项</h2>\n<div class=\"outline-text-2\" id=\"text-org0a23789\">\n<p>\nmeson 支持两种形式的构建选项。一种是通过配置文件(meson_options.txt)指定的构建中的各种配置，同时 meson 还有很多内置的构建选项，包括：全局配置，基础配置，编译配置等等。<br>\n</p>\n</div>\n<div id=\"outline-container-org693976a\" class=\"outline-3\">\n<h3 id=\"org693976a\">配置文件</h3>\n<div class=\"outline-text-3\" id=\"text-org693976a\">\n<p>\n很多软件在发布的时候，一般都会有很多选项供用户进行选择。meson 提供一种选项配置文件的机制，来进行选项的配置。选项配置文件名为 meson_options.txt,<br>\n在项目根目录下。简单的 options 如下所示<br>\n</p>\n\n<div class=\"org-src-container\">\n<figure class=\"highlight ini\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">option('someoption', type : 'string', value : 'optval', description : 'An option')</span><br><span class=\"line\">option('other_one', type : 'boolean', value : false)</span><br><span class=\"line\">option('combo_opt', type : 'combo', choices : <span class=\"section\">['one', 'two', 'three']</span>, value : 'three')</span><br><span class=\"line\">option('integer_opt', type : 'integer', min : 0, max : 5, value : 3) <span class=\"comment\"># Since 0.45.0</span></span><br><span class=\"line\">option('free_array_opt', type : 'array', value : <span class=\"section\">['one', 'two']</span>)  <span class=\"comment\"># Since 0.44.0</span></span><br><span class=\"line\">option('array_opt', type : 'array', choices : <span class=\"section\">['one', 'two', 'three']</span>, value : <span class=\"section\">['one', 'two']</span>)</span><br><span class=\"line\">option('some_feature', type : 'feature', value : 'enabled')  <span class=\"comment\"># Since 0.47.0</span></span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\n在上面的例子中，通过 type 来指定配置选项的类型，并且通过 value 来配置选项值。其中 type 为 combo 的值可以是 choices 中的值，如果是空，则默认选中第一个 choices.<br>\n</p>\n\n<p>\n在 meson 的构建脚本中我们可以使用 get_option(opt_name) 来获取相应的选项的值。<br>\n</p>\n\n<p>\n在 meson 的构建目录下运行 <code class=\"src src-sh\">meson configure</code> 就会显示出当前构建目录所有的配置选项，以及对应的值。<br>\n</p>\n\n<p>\n我们也可以通过如下的几种形式来修改对应选项的值<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">meson configure -Dopt=value</span><br><span class=\"line\">meson configure -Darray_opt=a,b</span><br><span class=\"line\">meson configure -Dsubproject:option=value</span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\n在 meson 中有很多 default 的选项，可以通过 <code class=\"src src-sh\">meson configure</code> 来获取这些选项<br>\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-org4e471d7\" class=\"outline-3\">\n<h3 id=\"org4e471d7\">内置选项</h3>\n<div class=\"outline-text-3\" id=\"text-org4e471d7\">\n<p>\n在 meson 中内置了很多的选项，大致可以分为全局配置，基础配置，编译配置。这些内置的配置，可以通过 meson 的命令行指定或修改，也可以通过 meson_options.txt 进行配置<br>\n</p>\n</div>\n\n<div id=\"outline-container-org60c6c6d\" class=\"outline-4\">\n<h4 id=\"org60c6c6d\">全局配置</h4>\n<div class=\"outline-text-4\" id=\"text-org60c6c6d\">\n</div>\n<ul class=\"org-ul\">\n<li><a id=\"org9019f9a\"></a>目录配置<br>\n<div class=\"outline-text-5\" id=\"text-org9019f9a\">\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"org-left\">\n\n<col class=\"org-left\">\n\n<col class=\"org-left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"org-left\">Option</th>\n<th scope=\"col\" class=\"org-left\">Default value</th>\n<th scope=\"col\" class=\"org-left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-left\">prefix</td>\n<td class=\"org-left\">see below</td>\n<td class=\"org-left\">Installation prefix</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">bindir</td>\n<td class=\"org-left\">bin</td>\n<td class=\"org-left\">Executable directory</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">datadir</td>\n<td class=\"org-left\">share</td>\n<td class=\"org-left\">Data file directory</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">includedir</td>\n<td class=\"org-left\">include</td>\n<td class=\"org-left\">Header file directory</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">infodir</td>\n<td class=\"org-left\">share/info</td>\n<td class=\"org-left\">Info page directory</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">libdir</td>\n<td class=\"org-left\">see below</td>\n<td class=\"org-left\">Library directory</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">libexecdir</td>\n<td class=\"org-left\">libexec</td>\n<td class=\"org-left\">Library executable directory</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">localedir</td>\n<td class=\"org-left\">share/locale</td>\n<td class=\"org-left\">Locale data directory</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">localstatedir</td>\n<td class=\"org-left\">var</td>\n<td class=\"org-left\">Localstate data directory</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">mandir</td>\n<td class=\"org-left\">share/man</td>\n<td class=\"org-left\">Manual page directory</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">sbindir</td>\n<td class=\"org-left\">sbin</td>\n<td class=\"org-left\">System executable directory</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">sharedstatedir</td>\n<td class=\"org-left\">com</td>\n<td class=\"org-left\">Architecture-independent data directory</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">sysconfdir</td>\n<td class=\"org-left\">etc</td>\n<td class=\"org-left\">Sysconf data directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n</li>\n\n<li><a id=\"org5e0589f\"></a>核心配置<br>\n<div class=\"outline-text-5\" id=\"text-org5e0589f\">\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"org-left\">\n\n<col class=\"org-left\">\n\n<col class=\"org-left\">\n\n<col class=\"org-left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"org-left\">Option</th>\n<th scope=\"col\" class=\"org-left\">Default value</th>\n<th scope=\"col\" class=\"org-left\">Description</th>\n<th scope=\"col\" class=\"org-left\">Is per machine</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-left\">auto_features {enabled, disabled, auto}</td>\n<td class=\"org-left\">auto</td>\n<td class=\"org-left\">Override value of all 'auto' features</td>\n<td class=\"org-left\">no</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">backend {ninja, vs, vs2010, vs2015, vs2017, vs2019, xcode}</td>\n<td class=\"org-left\">ninja</td>\n<td class=\"org-left\">Backend to use</td>\n<td class=\"org-left\">no</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">buildtype {plain, debug, debugoptimized, release, minsize, custom}</td>\n<td class=\"org-left\">debug</td>\n<td class=\"org-left\">Build type to use</td>\n<td class=\"org-left\">no</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">debug</td>\n<td class=\"org-left\">true</td>\n<td class=\"org-left\">Debug</td>\n<td class=\"org-left\">no</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">default_library {shared, static, both}</td>\n<td class=\"org-left\">shared</td>\n<td class=\"org-left\">Default library type</td>\n<td class=\"org-left\">no</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">errorlogs</td>\n<td class=\"org-left\">true</td>\n<td class=\"org-left\">Whether to print the logs from failing tests.</td>\n<td class=\"org-left\">no</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">install_umask {preserve, 0000-0777}</td>\n<td class=\"org-left\">022</td>\n<td class=\"org-left\">Default umask to apply on permissions of installed files</td>\n<td class=\"org-left\">no</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">layout {mirror,flat}</td>\n<td class=\"org-left\">mirror</td>\n<td class=\"org-left\">Build directory layout</td>\n<td class=\"org-left\">no</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">optimization {0, g, 1, 2, 3, s}</td>\n<td class=\"org-left\">0</td>\n<td class=\"org-left\">Optimization level</td>\n<td class=\"org-left\">no</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">pkg_config_path {OS separated path}</td>\n<td class=\"org-left\">''</td>\n<td class=\"org-left\">Additional paths for pkg-config to search before builtin paths</td>\n<td class=\"org-left\">yes</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">cmake_prefix_path</td>\n<td class=\"org-left\">[]</td>\n<td class=\"org-left\">Additional prefixes for cmake to search before builtin paths</td>\n<td class=\"org-left\">yes</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">stdsplit</td>\n<td class=\"org-left\">true</td>\n<td class=\"org-left\">Split stdout and stderr in test logs</td>\n<td class=\"org-left\">no</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">strip</td>\n<td class=\"org-left\">false</td>\n<td class=\"org-left\">Strip targets on install</td>\n<td class=\"org-left\">no</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">unity {on, off, subprojects}</td>\n<td class=\"org-left\">off</td>\n<td class=\"org-left\">Unity build</td>\n<td class=\"org-left\">no</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">warning_level {0, 1, 2, 3}</td>\n<td class=\"org-left\">1</td>\n<td class=\"org-left\">Set the warning level. From 0 = none to 3 = highest</td>\n<td class=\"org-left\">no</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">werror</td>\n<td class=\"org-left\">false</td>\n<td class=\"org-left\">Treat warnings as errors</td>\n<td class=\"org-left\">no</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">wrap_mode {default, nofallback, nodownload, forcefallback}</td>\n<td class=\"org-left\">default</td>\n<td class=\"org-left\">Wrap mode to use</td>\n<td class=\"org-left\">no</td>\n</tr>\n</tbody>\n</table>\n</div>\n</li>\n</ul>\n</div>\n\n<div id=\"outline-container-org2b443f2\" class=\"outline-4\">\n<h4 id=\"org2b443f2\">基础配置</h4>\n<div class=\"outline-text-4\" id=\"text-org2b443f2\">\n<p>\n基础配置和其他配置的设置方式一样，但是只能通过在 builddir 下 meson configure 来查看相应的配置。<br>\n</p>\n\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"org-left\">\n\n<col class=\"org-left\">\n\n<col class=\"org-left\">\n\n<col class=\"org-left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"org-left\">Option</th>\n<th scope=\"col\" class=\"org-left\">Default value</th>\n<th scope=\"col\" class=\"org-left\">Possible values</th>\n<th scope=\"col\" class=\"org-left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-left\">b_asneeded</td>\n<td class=\"org-left\">true</td>\n<td class=\"org-left\">true, false</td>\n<td class=\"org-left\">Use -Wl,–as-needed when linking</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">b_bitcode</td>\n<td class=\"org-left\">false</td>\n<td class=\"org-left\">true, false</td>\n<td class=\"org-left\">Embed Apple bitcode, see below</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">b_colorout</td>\n<td class=\"org-left\">always</td>\n<td class=\"org-left\">auto, always, never</td>\n<td class=\"org-left\">Use colored output</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">b_coverage</td>\n<td class=\"org-left\">false</td>\n<td class=\"org-left\">true, false</td>\n<td class=\"org-left\">Enable coverage tracking</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">b_lundef</td>\n<td class=\"org-left\">true</td>\n<td class=\"org-left\">true, false</td>\n<td class=\"org-left\">Don't allow undefined symbols when linking</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">b_lto</td>\n<td class=\"org-left\">false</td>\n<td class=\"org-left\">true, false</td>\n<td class=\"org-left\">Use link time optimization</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">b_ndebug</td>\n<td class=\"org-left\">false</td>\n<td class=\"org-left\">true, false, if-release</td>\n<td class=\"org-left\">Disable asserts</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">b_pch</td>\n<td class=\"org-left\">true</td>\n<td class=\"org-left\">true, false</td>\n<td class=\"org-left\">Use precompiled headers</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">b_pgo</td>\n<td class=\"org-left\">off</td>\n<td class=\"org-left\">off, generate, use</td>\n<td class=\"org-left\">Use profile guided optimization</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">b_sanitize</td>\n<td class=\"org-left\">none</td>\n<td class=\"org-left\">see below</td>\n<td class=\"org-left\">Code sanitizer to use</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">b_staticpic</td>\n<td class=\"org-left\">true</td>\n<td class=\"org-left\">true, false</td>\n<td class=\"org-left\">Build static libraries as position independent</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">b_pie</td>\n<td class=\"org-left\">false</td>\n<td class=\"org-left\">true, false</td>\n<td class=\"org-left\">Build position-independent executables (since 0.49.0)</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">b_vscrt</td>\n<td class=\"org-left\">from_buildtype</td>\n<td class=\"org-left\">none, md, mdd, mt, mtd, from_buildtype</td>\n<td class=\"org-left\">VS runtime library to use (since 0.48.0)</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n\n<div id=\"outline-container-orgf5ff017\" class=\"outline-4\">\n<h4 id=\"orgf5ff017\">编译配置</h4>\n<div class=\"outline-text-4\" id=\"text-orgf5ff017\">\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"org-left\">\n\n<col class=\"org-left\">\n\n<col class=\"org-left\">\n\n<col class=\"org-left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"org-left\">Option</th>\n<th scope=\"col\" class=\"org-left\">Default value</th>\n<th scope=\"col\" class=\"org-left\">Possible values</th>\n<th scope=\"col\" class=\"org-left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-left\">c_args</td>\n<td class=\"org-left\">&nbsp;</td>\n<td class=\"org-left\">free-form comma-separated list</td>\n<td class=\"org-left\">C compile arguments to use</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">c_link_args</td>\n<td class=\"org-left\">&nbsp;</td>\n<td class=\"org-left\">free-form comma-separated list</td>\n<td class=\"org-left\">C link arguments to use</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">c_std</td>\n<td class=\"org-left\">none</td>\n<td class=\"org-left\">none, c89, c99, c11, c17, c18, gnu89, gnu99, gnu11, gnu17, gnu18</td>\n<td class=\"org-left\">C language standard to use</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">c_winlibs</td>\n<td class=\"org-left\">see below</td>\n<td class=\"org-left\">free-form comma-separated list</td>\n<td class=\"org-left\">Standard Windows libs to link against</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">cpp_args</td>\n<td class=\"org-left\">&nbsp;</td>\n<td class=\"org-left\">free-form comma-separated list</td>\n<td class=\"org-left\">C++ compile arguments to use</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">cpp_link_args</td>\n<td class=\"org-left\">&nbsp;</td>\n<td class=\"org-left\">free-form comma-separated list</td>\n<td class=\"org-left\">C++ link arguments to use</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">cpp_std</td>\n<td class=\"org-left\">none</td>\n<td class=\"org-left\">none, c++98, c++03, c++11, c++14, c++17, c++1z, gnu++03, gnu++11, gnu++14, gnu++17, gnu++1z, vc++14, vc++17, vc++latest</td>\n<td class=\"org-left\">C++ language standard to use</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">cpp_debugstl</td>\n<td class=\"org-left\">false</td>\n<td class=\"org-left\">true, false</td>\n<td class=\"org-left\">C++ STL debug mode</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">cpp_eh</td>\n<td class=\"org-left\">default</td>\n<td class=\"org-left\">none, default, a, s, sc</td>\n<td class=\"org-left\">C++ exception handling type</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">cpp_rtti</td>\n<td class=\"org-left\">true</td>\n<td class=\"org-left\">true, false</td>\n<td class=\"org-left\">Whether to enable RTTI (runtime type identification)</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">cpp_winlibs</td>\n<td class=\"org-left\">see below</td>\n<td class=\"org-left\">free-form comma-separated list</td>\n<td class=\"org-left\">Standard Windows libs to link against</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">fortran_std</td>\n<td class=\"org-left\">none</td>\n<td class=\"org-left\">[none, legacy, f95, f2003, f2008, f2018]</td>\n<td class=\"org-left\">Fortran language standard to use</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-org3bea112\" class=\"outline-2\">\n<h2 id=\"org3bea112\">跨平台编译</h2>\n<div class=\"outline-text-2\" id=\"text-org3bea112\">\n<p>\n一个典型的跨平台编译的场景是：cross compile a cross compiler. (跨平台编译一个跨平台编译器). 在一个 Linux 主机上，生成一个在 Windows 上运行的编译器，这个编译器编译的结果，能够在 MIPS 机器上运行。<br>\n在这里有三个概念：build machine, host machine, target machine. 在这里例子中 build machine 是 linux 主机， host machine 是 windows 主机， target machine 是 mips 机器。<br>\n</p>\n\n<p>\n因为在整个跨平台编译的过程中需要用到很多工具链，每个工具链的配置可能都不一样，meson 提供一个比较简单的方式来控制这种跨平台编译： cross build definition file. 一个交叉编译描述文件分为多个部分，示例如下<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight ini\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[binaries]</span></span><br><span class=\"line\"><span class=\"attr\">c</span> = <span class=\"string\">'/usr/bin/i586-mingw32msvc-gcc'</span></span><br><span class=\"line\"><span class=\"attr\">cpp</span> = <span class=\"string\">'/usr/bin/i586-mingw32msvc-g++'</span></span><br><span class=\"line\"><span class=\"attr\">ld</span> = <span class=\"string\">'gold'</span></span><br><span class=\"line\"><span class=\"attr\">ar</span> = <span class=\"string\">'/usr/i586-mingw32msvc/bin/ar'</span></span><br><span class=\"line\"><span class=\"attr\">strip</span> = <span class=\"string\">'/usr/i586-mingw32msvc/bin/strip'</span></span><br><span class=\"line\"><span class=\"attr\">pkgconfig</span> = <span class=\"string\">'/usr/bin/i586-mingw32msvc-pkg-config'</span></span><br><span class=\"line\"><span class=\"attr\">exe_wrapper</span> = <span class=\"string\">'wine'</span> <span class=\"comment\"># A command used to run generated executables.</span></span><br><span class=\"line\"><span class=\"section\">[properties]</span></span><br><span class=\"line\"><span class=\"attr\">sizeof_int</span> = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"attr\">sizeof_wchar_t</span> = <span class=\"number\">4</span></span><br><span class=\"line\">sizeof_void* = 4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">alignment_char</span> = <span class=\"number\">1</span></span><br><span class=\"line\">alignment_void* = 4</span><br><span class=\"line\"><span class=\"attr\">alignment_double</span> = <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">has_function_printf</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"section\">[host_machine]</span></span><br><span class=\"line\"><span class=\"attr\">system</span> = <span class=\"string\">'windows'</span></span><br><span class=\"line\"><span class=\"attr\">cpu_family</span> = <span class=\"string\">'x86'</span></span><br><span class=\"line\"><span class=\"attr\">cpu</span> = <span class=\"string\">'i686'</span></span><br><span class=\"line\"><span class=\"attr\">endian</span> = <span class=\"string\">'little'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[paths]</span></span><br><span class=\"line\"><span class=\"attr\">prefix</span> = <span class=\"string\">'/my/prefix'</span></span><br><span class=\"line\"><span class=\"attr\">libdir</span> = <span class=\"string\">'lib/i386-linux-gnu'</span></span><br><span class=\"line\"><span class=\"attr\">bindir</span> = <span class=\"string\">'bin'</span></span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n\n<p>\n可以使用如下的命令启动交叉编译<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">meson srcdir builddir --cross-file cross_file.txt</span><br></pre></td></tr></tbody></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-org839dce2\" class=\"outline-2\">\n<h2 id=\"org839dce2\">常用的指令</h2>\n<div class=\"outline-text-2\" id=\"text-org839dce2\">\n</div>\n<div id=\"outline-container-org9244f99\" class=\"outline-3\">\n<h3 id=\"org9244f99\">include 目录</h3>\n<div class=\"outline-text-3\" id=\"text-org9244f99\">\n<div class=\"org-src-container\">\n<figure class=\"highlight ini\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义</span></span><br><span class=\"line\">include_object include_directories(directory_names, ...)</span><br><span class=\"line\"><span class=\"comment\"># 示例</span></span><br><span class=\"line\"><span class=\"attr\">incdir</span> = include_directories(<span class=\"string\">'include'</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></tbody></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-orgdf6ca72\" class=\"outline-3\">\n<h3 id=\"orgdf6ca72\">构建目标</h3>\n<div class=\"outline-text-3\" id=\"text-orgdf6ca72\">\n<p>\n我们可以使用通用的目标定义方式，定义和示例如下所示<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"># target_type 的取值可以为</span><br><span class=\"line\"># 1. executable</span><br><span class=\"line\"># 2. shared_library</span><br><span class=\"line\"># 3. shared_module</span><br><span class=\"line\"># 4. static_library</span><br><span class=\"line\"># 5. both_libraries</span><br><span class=\"line\"># 6. library</span><br><span class=\"line\"># 7. jar</span><br><span class=\"line\">build_target build_target(&lt;arguments and keyword arguments&gt;, target_type : 'executable')</span><br><span class=\"line\"></span><br><span class=\"line\"># 同时有一些更为方便的 API 用来定义构建目标</span><br><span class=\"line\">buildtarget executable(*exe_name*, *sources*, ...)</span><br><span class=\"line\">buildtarget shared_library(library_name, list_of_sources, ...)</span><br><span class=\"line\">buildtarget static_library(library_name, list_of_sources, ...)</span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\n上面的定义方式，支持一些配置参数，对目标进行配置，常见的配置选项入下表所示<br>\n</p>\n\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"org-left\">\n\n<col class=\"org-left\">\n\n<col class=\"org-left\">\n\n<col class=\"org-left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"org-left\">选项</th>\n<th scope=\"col\" class=\"org-left\">类型</th>\n<th scope=\"col\" class=\"org-left\">默认取值</th>\n<th scope=\"col\" class=\"org-left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-left\">&lt;language&gt;_args</td>\n<td class=\"org-left\">array</td>\n<td class=\"org-left\">[]</td>\n<td class=\"org-left\">对于某种语言的编译器选项配置，如果是 c, 则该选项为 c_args</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">build_by_default</td>\n<td class=\"org-left\">boolean</td>\n<td class=\"org-left\">true</td>\n<td class=\"org-left\">当 ninja 命令没有参数运行的时候，该目标默认构建</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">dependencies</td>\n<td class=\"org-left\">dependency_object</td>\n<td class=\"org-left\">null</td>\n<td class=\"org-left\">当前构建目标的前置依赖，如果依赖需要编译，则先编译依赖</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">link_args</td>\n<td class=\"org-left\">array</td>\n<td class=\"org-left\">[]</td>\n<td class=\"org-left\">link 的时候，使用的参数</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">link_depends</td>\n<td class=\"org-left\">strings, files, custom_targets</td>\n<td class=\"org-left\">&nbsp;</td>\n<td class=\"org-left\">当依赖的link 目标被重新构建之后，需要触发当前目标的重新链接（relink）</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">link_with</td>\n<td class=\"org-left\">array</td>\n<td class=\"org-left\">[]</td>\n<td class=\"org-left\">当前目标需要和其他的目标进行链接（link）</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">include_directories</td>\n<td class=\"org-left\">array</td>\n<td class=\"org-left\">[]</td>\n<td class=\"org-left\">会被透明的中设置到 include 的目录配置中</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">install</td>\n<td class=\"org-left\">boolean</td>\n<td class=\"org-left\">false</td>\n<td class=\"org-left\">当前构建目标是否会被安装到系统中</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">install_dir</td>\n<td class=\"org-left\">string</td>\n<td class=\"org-left\">&nbsp;</td>\n<td class=\"org-left\">覆盖当前目标的安装目录，这个选项是一个相对目录，根目录为 prefix 指定的目录</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n\n<div id=\"outline-container-org0c94776\" class=\"outline-3\">\n<h3 id=\"org0c94776\">自定义命令</h3>\n</div>\n<div id=\"outline-container-org4871b16\" class=\"outline-3\">\n<h3 id=\"org4871b16\">自定义目标</h3>\n<div class=\"outline-text-3\" id=\"text-org4871b16\">\n<div class=\"org-src-container\">\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">customtarget custom_target(*name*, ...)</span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<p>\n自定义主要有如下一些配置选项进行配置<br>\n</p>\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"org-left\">\n\n<col class=\"org-left\">\n\n<col class=\"org-left\">\n\n<col class=\"org-left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"org-left\">选项</th>\n<th scope=\"col\" class=\"org-left\">类型</th>\n<th scope=\"col\" class=\"org-left\">默认取值</th>\n<th scope=\"col\" class=\"org-left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-left\">build_by_default</td>\n<td class=\"org-left\">boolean</td>\n<td class=\"org-left\">false</td>\n<td class=\"org-left\">当 ninja 命令没有参数运行的时候，该目标默认构建</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">build_always_stale</td>\n<td class=\"org-left\">boolean</td>\n<td class=\"org-left\">-</td>\n<td class=\"org-left\">当前目标一直会被认为是过期的，每次都会重新构建</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td class=\"org-left\">capture</td>\n<td class=\"org-left\">boolean</td>\n<td class=\"org-left\">-</td>\n<td class=\"org-left\">对于一些命令，没法直接处理参数中给出的文件，他们都是将数据输出到标准输出，这种情况 meson</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">&nbsp;</td>\n<td class=\"org-left\">&nbsp;</td>\n<td class=\"org-left\">&nbsp;</td>\n<td class=\"org-left\">获取 stdout, 并将其写入到目标文件</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td class=\"org-left\">command</td>\n<td class=\"org-left\">array</td>\n<td class=\"org-left\">&nbsp;</td>\n<td class=\"org-left\">如何将 input 编程处理成 output, command 的形式为 ['commandname', '-arg1' '-arg2'], 其中</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">&nbsp;</td>\n<td class=\"org-left\">&nbsp;</td>\n<td class=\"org-left\">&nbsp;</td>\n<td class=\"org-left\">commandname 可以是 find_program(), executable(), configrue_file(), files(), custom_target()</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td class=\"org-left\">depend_files</td>\n<td class=\"org-left\">string, files(), confingure_file()</td>\n<td class=\"org-left\">&nbsp;</td>\n<td class=\"org-left\">依赖的文件，但是不会出现在 command 参数中</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">depends</td>\n<td class=\"org-left\">&nbsp;</td>\n<td class=\"org-left\">&nbsp;</td>\n<td class=\"org-left\">依赖的其他目标，需要优先构建</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">input</td>\n<td class=\"org-left\">array</td>\n<td class=\"org-left\">&nbsp;</td>\n<td class=\"org-left\">源文件列表</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">install</td>\n<td class=\"org-left\">boolean</td>\n<td class=\"org-left\">-</td>\n<td class=\"org-left\">是否安装</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">install_dir</td>\n<td class=\"org-left\">string</td>\n<td class=\"org-left\">&nbsp;</td>\n<td class=\"org-left\">&nbsp;</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">output</td>\n<td class=\"org-left\">array</td>\n<td class=\"org-left\">&nbsp;</td>\n<td class=\"org-left\">输出文件列表</td>\n</tr>\n</tbody>\n</table>\n\n<p>\n在 command 中如果需要使用配置选项中的一些值的时候，meson 支持一些特殊的变量，从而对 command 进行替换。<br>\n</p>\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"org-left\">\n\n<col class=\"org-left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"org-left\">变量名</th>\n<th scope=\"col\" class=\"org-left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-left\">@INPUT@</td>\n<td class=\"org-left\">input 变量的完整路径， 如果有多个 input 文件， 每个文件会被处理为单独的参数传递给 command(只有 '@INPUT@' 生效 '.*@INPUT@.*' 都不生效)</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">@OUTPUT@</td>\n<td class=\"org-left\">output 变量的全路径，约束同 @INPUT@</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">@INPUT0@, @INPUT1@</td>\n<td class=\"org-left\">input 数组中的某一项</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">@OUTPUT0@, @OUTPUT1@</td>\n<td class=\"org-left\">output 数组中的某一项</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">@OUTDIR@</td>\n<td class=\"org-left\">output 目录</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">@DEPFILE@</td>\n<td class=\"org-left\">依赖文件</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">@PLAINNAME@</td>\n<td class=\"org-left\">只有文件名，没有目录信息</td>\n</tr>\n\n<tr>\n<td class=\"org-left\">@BASENAME@</td>\n<td class=\"org-left\">只有文件名，没有扩展名信息</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"outline-container-org496cd90\" class=\"outline-3\">\n<h3 id=\"org496cd90\">安装</h3>\n<div class=\"outline-text-3\" id=\"text-org496cd90\">\n<p>\n安装有如下的几种形式<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">executable('prog', 'prog.c', install : true, install_dir : 'my/special/dir')</span><br><span class=\"line\">install_headers('header.h', subdir : 'projname') # -&gt; include/projname/header.h</span><br><span class=\"line\">install_man('foo.1') # -&gt; share/man/man1/foo.1</span><br><span class=\"line\">install_data('datafile.dat', install_dir : get_option('datadir') / 'progname')</span><br><span class=\"line\">install_subdir('mydir', install_dir : 'include') </span><br><span class=\"line\"></span><br><span class=\"line\">custom_target(...</span><br><span class=\"line\">    output: ['file1', 'file2', 'file3'],</span><br><span class=\"line\">    install_dir: ['path1', false, 'path3'],</span><br><span class=\"line\">    ...</span><br><span class=\"line\">)</span><br></pre></td></tr></tbody></table></figure>\n</div>\n</div>\n</div>\n</div>\n<div id=\"outline-container-orgf9ff15a\" class=\"outline-2\">\n<h2 id=\"orgf9ff15a\">meson 实例（mesa）</h2>\n<div class=\"outline-text-2\" id=\"text-orgf9ff15a\">\n<ol class=\"org-ol\">\n<li><p>\n根目录 meson.build 主要用来，检查依赖（dep_xxx）, 配置各种选项（c_args, cpp_args），以及模块是否编译（with_glx, with_xxx），包含子目录 meson.build<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">subdir(include)</span><br><span class=\"line\">subdir(<span class=\"built_in\">bin</span>)</span><br><span class=\"line\">subdir(src)</span><br></pre></td></tr></tbody></table></figure>\n</div></li>\n<li><p>\ninclude/meson.build<br>\n根据 with_gles1, with_gles2, with_opengl, with_egl, with_osmesa, with_platform_haiku, with_gallium_opencl, with_intel_vk 等变量决定安装什么头文件到系统<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight ini\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">if with_gles1</span><br><span class=\"line\">  install_headers(</span><br><span class=\"line\">    'GLES/egl.h',</span><br><span class=\"line\">    'GLES/gl.h',</span><br><span class=\"line\">    'GLES/glext.h',</span><br><span class=\"line\">    'GLES/glplatform.h',</span><br><span class=\"line\">    subdir: 'GLES'</span><br><span class=\"line\">  )</span><br><span class=\"line\">endif</span><br></pre></td></tr></tbody></table></figure>\n</div></li>\n<li><p>\nbin/meson.build<br>\n将构建中会用到的一些工具，引入到 meson 的构建工具中，在其他 meson.build 中可以直接使用<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight ini\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">git_sha1_gen_py</span>=files(<span class=\"string\">'git_sha1_gen.py'</span>)</span><br><span class=\"line\"><span class=\"attr\">symbols_check</span>=find_program(<span class=\"string\">'symbols-check.py'</span>)</span><br></pre></td></tr></tbody></table></figure>\n</div></li>\n<li>src/meson.build<br>\n<ol class=\"org-ol\">\n<li><p>\n为了加速构建，使用 git 的提交号，作为是否构建的一个来源， 通过生成 src/git_sha1.h 来处理 git 提交 hash.<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight ini\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sha1_h</span> = custom_target(</span><br><span class=\"line\">  'git_sha1.h',</span><br><span class=\"line\">  output : 'git_sha1.h',</span><br><span class=\"line\">  command : <span class=\"section\">[prog_python, git_sha1_gen_py, '--output', '@OUTPUT@']</span>,</span><br><span class=\"line\">  build_always : true, <span class=\"comment\"># commit sha1 can change without having touched these files</span></span><br><span class=\"line\">)</span><br></pre></td></tr></tbody></table></figure>\n</div></li>\n<li><p>\n包含一些必须的模块<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight ini\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">subdir('gtest')</span><br><span class=\"line\">subdir('util')</span><br><span class=\"line\">subdir('mapi')</span><br><span class=\"line\">subdir('compiler')</span><br><span class=\"line\">subdir('mesa')</span><br><span class=\"line\">subdir('loader')</span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<ol class=\"org-ol\">\n<li>mapi/meson.build<br>\n<ol class=\"org-ol\">\n<li><p>\n加载代码代码生成可执行 python 文件，以便与glapi, shared_api, es1api, es2api 使用<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">genCommon_py = files('new/genCommon.py')</span><br><span class=\"line\">gelapi_gen_mapi_py = files('new/gen_gldispatch_mapi.py')</span><br><span class=\"line\">mapi_abi_py = files('mapi_abi.py')</span><br></pre></td></tr></tbody></table></figure>\n</div></li>\n\n<li><p>\n加载子目录<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">subdir('glapi')</span><br><span class=\"line\">subdir('shared-glapi')</span><br><span class=\"line\">if with_gles1</span><br><span class=\"line\">  subdir('es1api')</span><br><span class=\"line\">endif</span><br><span class=\"line\">if with_gles2</span><br><span class=\"line\">  subdir('es2api')</span><br><span class=\"line\">endif</span><br></pre></td></tr></tbody></table></figure>\n</div>\n<ol class=\"org-ol\">\n<li><p>\nglapi/meson.build<br>\n其中 glapi 中放置了 gen 文件夹 ~subdir('gen')~，其中 gen 中包含 api 规范的xml 描述文件。并且包含很多根据 xml 生成 c 代码的 python 脚本。<br>\n1<br>\n由于 mesa 支持静态编译和动态编译，静态编译和动态编译使用不同的入口。<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">subdir('gen')</span><br><span class=\"line\">if with_shared_glapi</span><br><span class=\"line\">  static_glapi_files += files(</span><br><span class=\"line\">    '../entry.c',</span><br><span class=\"line\">    '../entry.h',</span><br><span class=\"line\">    '../entry_x86-64_tls.h',</span><br><span class=\"line\">    '../entry_x86_tls.h',</span><br><span class=\"line\">    '../entry_x86_tsd.h',</span><br><span class=\"line\">    '../entry_ppc64le_tls.h',</span><br><span class=\"line\">    '../entry_ppc64le_tsd.h',</span><br><span class=\"line\">    '../mapi_tmp.h',</span><br><span class=\"line\">  )</span><br><span class=\"line\">  static_glapi_files += glapi_mapi_tmp_h</span><br><span class=\"line\">  static_glapi_args += [</span><br><span class=\"line\">    '-DMAPI_MODE_BRIDGE',</span><br><span class=\"line\">    '-DMAPI_ABI_HEADER=\"@0@\"'.format(glapi_mapi_tmp_h.full_path()),</span><br><span class=\"line\">    gcc_lto_quirk,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">else</span><br><span class=\"line\">  static_glapi_args += '-DMAPI_MODE_UTIL'</span><br><span class=\"line\">  static_glapi_files += files(</span><br><span class=\"line\">    'glapi_dispatch.c',</span><br><span class=\"line\">    'glapi_entrypoint.c',</span><br><span class=\"line\">    'glapi_getproc.c',</span><br><span class=\"line\">    'glapi_nop.c',</span><br><span class=\"line\">    'glapi.c',</span><br><span class=\"line\">    'glapi.h',</span><br><span class=\"line\">    'glapi_priv.h',</span><br><span class=\"line\">  )</span><br><span class=\"line\">  static_glapi_files += files_mapi_util</span><br><span class=\"line\">  static_glapi_files += [</span><br><span class=\"line\">    glapitable_h, glapi_mapi_tmp_h, glprocs_h, glapitemp_h,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  if with_asm_arch == 'x86'</span><br><span class=\"line\">    static_glapi_files += glapi_x86_s</span><br><span class=\"line\">  elif with_asm_arch == 'x86_64'</span><br><span class=\"line\">    static_glapi_files += glapi_x86_64_s</span><br><span class=\"line\">  elif with_asm_arch == 'sparc'</span><br><span class=\"line\">    static_glapi_files += glapi_sparc_s</span><br><span class=\"line\">  endif</span><br><span class=\"line\">endif</span><br><span class=\"line\">libglapi_static = static_library(</span><br><span class=\"line\">  'glapi_static',</span><br><span class=\"line\">  static_glapi_files,</span><br><span class=\"line\">  include_directories : [inc_mesa, inc_include, inc_src, inc_mapi],</span><br><span class=\"line\">  c_args : [c_msvc_compat_args, static_glapi_args],</span><br><span class=\"line\">  dependencies : [dep_thread, dep_selinux],</span><br><span class=\"line\">  build_by_default : false,</span><br><span class=\"line\">)</span><br></pre></td></tr></tbody></table></figure>\n</div></li>\n<li><p>\nshared-glapi/meson.build<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">files_mapi_glapi = files(</span><br><span class=\"line\">  '../entry.c',</span><br><span class=\"line\">  '../mapi_glapi.c',</span><br><span class=\"line\">  '../stub.c',</span><br><span class=\"line\">  '../stub.h',</span><br><span class=\"line\">  '../table.c',</span><br><span class=\"line\">  '../table.h',</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"># 生成 glapi_mapi_tmp.h, 使用 Application Binary Interface 生成对应的低层次调用接口。</span><br><span class=\"line\"># 这个调用接口包含，</span><br><span class=\"line\"># 1. 数据类型大小， 布局，对齐</span><br><span class=\"line\"># 2. 调用约定</span><br><span class=\"line\"># 3. 系统调用编码</span><br><span class=\"line\"># 4. 目标文件，二进制格式，程序库等</span><br><span class=\"line\">shared_glapi_mapi_tmp_h = custom_target(</span><br><span class=\"line\">  'shared_glapi_mapi_tmp.h',</span><br><span class=\"line\">  input : [mapi_abi_py, gl_and_es_api_files],</span><br><span class=\"line\">  output : 'glapi_mapi_tmp.h',</span><br><span class=\"line\">  command : [prog_python, '@INPUT0@', '--printer', 'shared-glapi', '@INPUT1@'],</span><br><span class=\"line\">  depend_files : api_xml_files,</span><br><span class=\"line\">  capture : true,</span><br><span class=\"line\">)</span><br><span class=\"line\"># 生成 libglapi.so, 并且将刚才生成的 abi 的头文件引入到 glapi.so 中；</span><br><span class=\"line\">libglapi = shared_library(</span><br><span class=\"line\">  'glapi',</span><br><span class=\"line\">  [files_mapi_glapi, files_mapi_util, shared_glapi_mapi_tmp_h],</span><br><span class=\"line\">  c_args : [</span><br><span class=\"line\">    c_msvc_compat_args, c_vis_args, '-DMAPI_MODE_GLAPI',</span><br><span class=\"line\">    '-DMAPI_ABI_HEADER=\"@0@\"'.format(shared_glapi_mapi_tmp_h.full_path()),</span><br><span class=\"line\">    gcc_lto_quirk,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  link_args : [ld_args_gc_sections],</span><br><span class=\"line\">  include_directories : [inc_src, inc_include, inc_mapi],</span><br><span class=\"line\">  dependencies : [dep_thread, dep_selinux],</span><br><span class=\"line\">  version : '0.0.0',</span><br><span class=\"line\">  install : true,</span><br><span class=\"line\">)</span><br></pre></td></tr></tbody></table></figure>\n</div></li>\n<li><p>\nes1api/meson.build<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"># 生成 es1 的 ABI 接口描述头文件</span><br><span class=\"line\">es1_glapi_mapi_tmp_h = custom_target(</span><br><span class=\"line\">  'es1_glapi_mapi_tmp.h',</span><br><span class=\"line\">  input : [glapi_gen_mapi_py, glapi_gen_gl_xml],</span><br><span class=\"line\">  output : 'glapi_mapi_tmp.h',</span><br><span class=\"line\">  command : [prog_python, '@INPUT0@', 'glesv1', '@INPUT1@'],</span><br><span class=\"line\">  depend_files : glapi_gen_mapi_deps,</span><br><span class=\"line\">  capture : true,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"># 生成 libglesv1_cm.so 动态库</span><br><span class=\"line\">libglesv1_cm = shared_library(</span><br><span class=\"line\">  'GLESv1_CM' + get_option('gles-lib-suffix'),</span><br><span class=\"line\">  ['../entry.c', es1_glapi_mapi_tmp_h],</span><br><span class=\"line\">  c_args : [</span><br><span class=\"line\">    c_msvc_compat_args, c_vis_args, '-DMAPI_MODE_BRIDGE',</span><br><span class=\"line\">    '-DMAPI_ABI_HEADER=\"@0@\"'.format(es1_glapi_mapi_tmp_h.full_path()),</span><br><span class=\"line\">    gcc_lto_quirk,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  link_args : [ld_args_gc_sections],</span><br><span class=\"line\">  include_directories : [inc_src, inc_include, inc_mapi],</span><br><span class=\"line\">  link_with : libglapi,</span><br><span class=\"line\">  dependencies : [dep_thread, dep_libdrm, dep_m, dep_dl],</span><br><span class=\"line\">  version : '1.1.0',</span><br><span class=\"line\">  install : true,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n</div></li>\n</ol></li>\n</ol></li>\n<li><p>\ncompiler/meson.build<br>\n编译器相关的 meson 配置<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"># 准备头文件</span><br><span class=\"line\">inc_compiler = include_directories('.')</span><br><span class=\"line\">inc_glsl = include_directories('glsl')</span><br><span class=\"line\">inc_spirv = include_directories('spirv')</span><br><span class=\"line\"></span><br><span class=\"line\">subdir('spirv')</span><br><span class=\"line\">subdir('nir')</span><br><span class=\"line\">subdir('glsl')</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n</div></li>\n<li>mesa/meson.build<br>\n<ol class=\"org-ol\">\n<li><p>\n加载 src/mesa/program/meson.build(subdir('program'))<br>\n先使用 flex, 生成 glsl 的词法分析代码，生成的代码被放在 lex.yy.c, 然后使用 bison 生成语法分析代码，放在 program_parse.tab.ch<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mesa_lex = custom_target(</span><br><span class=\"line\">  'mesa_lex',</span><br><span class=\"line\">  input : 'program_lexer.l',</span><br><span class=\"line\">  output : 'lex.yy.c',</span><br><span class=\"line\">  command : [prog_flex, '-o', '@OUTPUT@', '@INPUT@'],</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">program_parse_tab = custom_target(</span><br><span class=\"line\">  'program_parse_tab.[ch]',</span><br><span class=\"line\">  input : 'program_parse.y',</span><br><span class=\"line\">  output : ['program_parse.tab.c', 'program_parse.tab.h'],</span><br><span class=\"line\">  command : [prog_bison, '-o', '@OUTPUT0@', '--defines=@OUTPUT1@', '@INPUT@'],</span><br><span class=\"line\">)</span><br></pre></td></tr></tbody></table></figure>\n</div>\n<p>\n具体示意图如下，红色部分为生成了词法分析器，和语法分析器之后的，对 GLSL 进行处理的路线。具体可以参考 <a href=\"https://longfangsong.github.io/2019/05/22/flex-bison%25E5%2585%25A5%25E9%2597%25A8/\">flex bison 入门</a><br>\n</p></li>\n\n<li><p>\n加载 src/meson/main/meson.build(subdir('main'))<br>\n根据 gl_and_es_api_files 来生成相应的头文件。 gl_and_es_api_files 的取值为 gl_and_es_API.xml.<br>\n这些自定义的目标依赖与 glapi_gen_depends, glapi_gen_depends, 的取值为 xml 相关 python 文件，以及 glapi spec 的 xml 描述文件。xml 样例如下所示<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">name</span>=<span class=\"string\">\"es1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- from GL_OES_fixed_point --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">enum</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FIXED\"</span>                                    <span class=\"attr\">value</span>=<span class=\"string\">\"0x140C\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">type</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fixed\"</span>   <span class=\"attr\">size</span>=<span class=\"string\">\"4\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">type</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clampx\"</span>  <span class=\"attr\">size</span>=<span class=\"string\">\"4\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">function</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Color4x\"</span> <span class=\"attr\">es1</span>=<span class=\"string\">\"1.0\"</span> <span class=\"attr\">desktop</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"red\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"GLfixed\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"green\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"GLfixed\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"blue\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"GLfixed\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"alpha\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"GLfixed\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">function</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">category</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n</div>\n<div class=\"org-src-container\">\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">main_dispatch_h = custom_target(</span><br><span class=\"line\">  'dispatch.h',</span><br><span class=\"line\">  input : [files('../../mapi/glapi/gen/gl_table.py'), gl_and_es_api_files],</span><br><span class=\"line\">  output : 'dispatch.h',</span><br><span class=\"line\">  command : [prog_python, '@INPUT0@', '-f', '@INPUT1@', '-m', 'remap_table'],</span><br><span class=\"line\">  depend_files : glapi_gen_depends,</span><br><span class=\"line\">  capture : true,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">main_marshal_generated_h = custom_target(</span><br><span class=\"line\">  'marshal_generated.h',</span><br><span class=\"line\">  input : [files('../../mapi/glapi/gen/gl_marshal_h.py'), gl_and_es_api_files],</span><br><span class=\"line\">  output : 'marshal_generated.h',</span><br><span class=\"line\">  command : [prog_python, '@INPUT0@', '-f', '@INPUT1@'],</span><br><span class=\"line\">  depend_files : files('../../mapi/glapi/gen/marshal_XML.py') + glapi_gen_depends,</span><br><span class=\"line\">  capture : true,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">main_remap_helper_h = custom_target(</span><br><span class=\"line\">  'remap_helper.h',</span><br><span class=\"line\">  input : [files('../../mapi/glapi/gen/remap_helper.py'), gl_and_es_api_files],</span><br><span class=\"line\">  output : 'remap_helper.h',</span><br><span class=\"line\">  command : [prog_python, '@INPUT0@', '-f', '@INPUT1@'],</span><br><span class=\"line\">  depend_files : glapi_gen_depends,</span><br><span class=\"line\">  capture : true,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n</div></li>\n<li>生成 meson_gallium 静态库，将相应的代码文件汇集到 files_libmesa_comon, files_libmesa_classic, files_libmesa_gallium 几个变量中<br></li>\n<li><p>\n加载驱动模块<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">subdir('drivers/dri')</span><br><span class=\"line\">if with_os_mesa == 'classic'</span><br><span class=\"line\">  subdir('drivers/osmessa')</span><br><span class=\"line\">endif</span><br></pre></td></tr></tbody></table></figure>\n</div></li>\n</ol></li>\n<li>loader/meson.build<br></li>\n</ol></li>\n<li><p>\n根据 with_xxx 来决定是否引入其他的一些模块， 示例如下<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight ini\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">if (with_gbm)</span><br><span class=\"line\">   subdir('gbm')</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">if with_egl</span><br><span class=\"line\">   subdir('egl')</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">if with_gallium</span><br><span class=\"line\">   subdir('gallium')</span><br><span class=\"line\">endif</span><br></pre></td></tr></tbody></table></figure>\n</div>\n<p>\n并且通过 pkgconfig 模块，来生成 *.pc 文件， 来指导第三方应用程序去构建<br>\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight ini\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">if with_glx != 'disabled' and not with_glvnd</span><br><span class=\"line\">  pkg.generate(</span><br><span class=\"line\">    name : 'gl',</span><br><span class=\"line\">    description : 'Mesa OpenGL Library',</span><br><span class=\"line\">    version : meson.project_version(),</span><br><span class=\"line\">    libraries : libgl,</span><br><span class=\"line\">    libraries_private : gl_priv_libs,</span><br><span class=\"line\">    requires_private : gl_priv_reqs,</span><br><span class=\"line\">    variables : <span class=\"section\">['glx_tls=yes']</span>,</span><br><span class=\"line\">  )</span><br><span class=\"line\">endif</span><br></pre></td></tr></tbody></table></figure>\n</div>\n\n<ol class=\"org-ol\">\n<li>src/gallium/meson.build<br></li>\n</ol></li>\n</ol></li>\n</ol>\n</div>\n</div>\n</div>\n</body></html>","prev":{"title":"如何科（ti）学（zi）冲浪（shangwang）","link":"2020/02/15/vpn-v2ray-ssx-ssr-haproxy"},"next":{"title":"芯片设计过程以及技术（持续更新）","link":"2019/12/29/ic-flow"},"plink":"https://kopinions.com/2020/02/12/meson/","toc":[{"id":"orgaf967a2","title":"meson 是什么？","index":"1"},{"id":"orge21b226","title":"meson 使用","index":"2","children":[{"id":"org10110fe","title":"简单的 meson 示例","index":"2.1"},{"id":"orga9affa3","title":"配置构建目录","index":"2.2"},{"id":"org5a3a296","title":"环境变量","index":"2.3"},{"id":"orge34107a","title":"构建","index":"2.4"},{"id":"orge2fac58","title":"测试","index":"2.5"},{"id":"org9d7e25b","title":"安装","index":"2.6"}]},{"id":"org0a23789","title":"构建选项","index":"3","children":[{"id":"org693976a","title":"配置文件","index":"3.1"},{"id":"org4e471d7","title":"内置选项","index":"3.2"}]},{"id":"org3bea112","title":"跨平台编译","index":"4"},{"id":"org839dce2","title":"常用的指令","index":"5","children":[{"id":"org9244f99","title":"include 目录","index":"5.1"},{"id":"orgdf6ca72","title":"构建目标","index":"5.2"},{"id":"org0c94776","title":"自定义命令","index":"5.3"},{"id":"org4871b16","title":"自定义目标","index":"5.4"},{"id":"org496cd90","title":"安装","index":"5.5"}]},{"id":"orgf9ff15a","title":"meson 实例（mesa）","index":"6"}],"reading_time":"3878 字约 26 分钟"}