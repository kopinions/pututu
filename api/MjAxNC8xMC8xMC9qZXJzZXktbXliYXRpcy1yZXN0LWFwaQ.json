{"title":"如何使用Java Jersey MyBatis 编写微服务 REST API","date":"2014-10-10T12:22:50.000Z","date_formatted":{"ll":"2014年10月10日","L":"2014/10/10","MM-DD":"10-10"},"link":"2014/10/10/jersey-mybatis-rest-api","tags":["java","mybatis","rest api"],"categories":["java","mybatis","rest api"],"updated":"2022-09-29T15:48:22.613Z","content":"<p>具体代码库请见<a href=\"https://github.com/sjkyspa/order_jersey\" target=\"_blank\">jersey tdd</a></p>\n<h6 id=\"安装需要的库\">安装需要的库<a title=\"#安装需要的库\" href=\"#安装需要的库\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile &#x27;javax.ws.rs:javax.ws.rs-api:2.0&#x27;</span><br><span class=\"line\">compile &#x27;org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.10.1&#x27;</span><br><span class=\"line\">compile &#x27;org.glassfish.jersey.core:jersey-server:2.10.1&#x27;</span><br><span class=\"line\">compile &#x27;org.glassfish.jersey.media:jersey-media-json-jackson:2.10.1&#x27;</span><br><span class=\"line\">compile &quot;org.mybatis:mybatis:3.2.7&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">testCompile &quot;org.glassfish.jersey.test-framework:jersey-test-framework-core:2.10.1&quot;</span><br><span class=\"line\">testCompile &#x27;org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.10.1&#x27;</span><br><span class=\"line\">testCompile &quot;org.mockito:mockito-core:1.9.5&quot;</span><br></pre></td></tr></table></figure>\n<h6 id=\"gradle-安装所有文件\">gradle 安装所有文件<a title=\"#gradle-安装所有文件\" href=\"#gradle-安装所有文件\"></a></h6>\n<h5 id=\"product\">Product<a title=\"#product\" href=\"#product\"></a></h5>\n<h6 id=\"200-测试\">200 测试<a title=\"#200-测试\" href=\"#200-测试\"></a></h6>\n<p>在intelij中，需要注意的是只有把测试目录设置为test root的时候才能跑测试。<br>\n只需要测试200，保证get能够找到正确的路径</p>\n<h6 id=\"404-测试\">404 测试<a title=\"#404-测试\" href=\"#404-测试\"></a></h6>\n<p>与200测试相同的代码，但是此时需要表示404，此时就需要mock一个repository，而且在特定的情况下抛出相应的异常，使得程序返回404,此时可以驱动出来需要调用repository来拿相应的product，此时接口应该为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Product getProductById(@Param(&quot;productId&quot;) int productId);</span><br></pre></td></tr></table></figure>\n<h6 id=\"post-测试\">Post 测试<a title=\"#post-测试\" href=\"#post-测试\"></a></h6>\n<ol>\n<li>\n<p>测试201，以一个很简单的Map来当做product的数据来测试route的正确性</p>\n</li>\n<li>\n<p>测试uri，此时可以驱动出来需要使用指定的repository来createproduct，此时createProduct的接口应该为：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int createProduct(@Param(&quot;product&quot;)Product product</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>测试以一定的参数保存product</p>\n<p>此时如何测post接口呢？可以使用test spy来测试，我们查看我们spy的对象接到了相应的调用参数，这样就保证我们的api是调用了指定的repository去保存我们的domain对象的，但是至于后面保存正确与否，这就是由repository的测试来保证。下面的ArgumentCaptor就是我们的TestSpy</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Captor</span><br><span class=\"line\">ArgumentCaptor&lt;Product&gt; productArgumentCaptor;</span><br><span class=\"line\">    </span><br><span class=\"line\">Map&lt;String, Object&gt; product = new HashMap&lt;&gt;();</span><br><span class=\"line\">product.put(&quot;name&quot;, &quot;productName&quot;);</span><br><span class=\"line\">product.put(&quot;description&quot;, &quot;description&quot;);</span><br><span class=\"line\">       </span><br><span class=\"line\">assertThat(productArgumentCaptor.getValue().getName(), is(&quot;productName&quot;));</span><br><span class=\"line\">assertThat(productArgumentCaptor.getValue().getDescription(), is(&quot;description&quot;));</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>\n<p>以一定的参数保存Price</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Object&gt; price = new HashMap&lt;&gt;();</span><br><span class=\"line\">price.put(&quot;amount&quot;, 1.0);</span><br><span class=\"line\">price.put(&quot;effectDate&quot;, &quot;2014-01-01&quot;);</span><br><span class=\"line\">product.put(&quot;price&quot;, price);</span><br><span class=\"line\">assertThat(priceArgumentCaptor.getValue().getAmount(), is(1.0));</span><br><span class=\"line\">assertThat(priceArgumentCaptor.getValue().getEffectDate(), is(new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(&quot;2014-01-01&quot;)));</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h6 id=\"补齐200-测试\">补齐200 测试<a title=\"#补齐200-测试\" href=\"#补齐200-测试\"></a></h6>\n<ol start=\"3\">\n<li>get basic info</li>\n<li>get uri</li>\n<li>get price info</li>\n<li>get price uri</li>\n</ol>\n<h5 id=\"price\">Price<a title=\"#price\" href=\"#price\"></a></h5>\n<h6 id=\"/products/1/prices/1-200\">/products/1/prices/1 200<a title=\"#/products/1/prices/1-200\" href=\"#/products/1/prices/1-200\"></a></h6>\n<p>同product</p>\n<h6 id=\"/products/999/prices/1-404\">/products/999/prices/1 404<a title=\"#/products/999/prices/1-404\" href=\"#/products/999/prices/1-404\"></a></h6>\n<p>此时驱动出来需要在我们的price的route中需要调用product.getProductById(productID),但是由于jersey可以使用subresource，此时我们可以在product resource将构造好的product作为参数传给subresource，所以我们在subresource中，就不用再次getProduct，再多一份处理异常的代码</p>\n<h6 id=\"/products/1/prices/999-404\">/products/1/prices/999 404<a title=\"#/products/1/prices/999-404\" href=\"#/products/1/prices/999-404\"></a></h6>\n<p>此时驱动出来一个方法product.getProductPriceById(Product, priceId)</p>\n<h6 id=\"/products/1/prices-post-201\">/products/1/prices post 201<a title=\"#/products/1/prices-post-201\" href=\"#/products/1/prices-post-201\"></a></h6>\n<ol>\n<li>201</li>\n<li>uri<br>\n此时可以驱动出来需要使用指定的repository来保存我们需要创建的资源，因为此时我们需要使用如下的方面去测试。我们在stub中返回了我们创建的price的ID。驱动出我们需要在我们的controller中调用这个方法来创建我们的资源</li>\n</ol>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">when(productRepository.createProductPrice(any(Product.class), any(Price.class))).thenReturn(2);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>product的captor的测试</li>\n<li>price captor的测试</li>\n</ol>\n<h5 id=\"order\">Order<a title=\"#order\" href=\"#order\"></a></h5>\n<h6 id=\"/users/1/orders/1-200\">/users/1/orders/1 200<a title=\"#/users/1/orders/1-200\" href=\"#/users/1/orders/1-200\"></a></h6>\n<h6 id=\"/users/999/orders/1-404\">/users/999/orders/1 404<a title=\"#/users/999/orders/1-404\" href=\"#/users/999/orders/1-404\"></a></h6>\n<p>此时可以驱动出调用userRepository.findUserById()</p>\n<h6 id=\"/users/1/orders/999-404\">/users/1/orders/999 404<a title=\"#/users/1/orders/999-404\" href=\"#/users/1/orders/999-404\"></a></h6>\n<p>此时可以驱动出userRepository.findUserOrderById()</p>\n<h6 id=\"post-/users/999/orders-201\">post /users/999/orders 201<a title=\"#post-/users/999/orders-201\" href=\"#post-/users/999/orders-201\"></a></h6>\n<p>此时可以驱动出userRepository.createOrderForUser(User, Order),<br>\n也可以驱动出需要将user，和userRepository传入subResource</p>\n<ol>\n<li>201</li>\n<li>uri(mock repo return created order id)</li>\n<li>user argument captor</li>\n<li>order argument captor</li>\n</ol>\n<h5 id=\"payment\">Payment<a title=\"#payment\" href=\"#payment\"></a></h5>\n<p>当资源不是集合的时候此时post的驱动方式就会有一定的不同</p>\n<h6 id=\"get-/users/1/orders/1/payment\">get /users/1/orders/1/payment<a title=\"#get-/users/1/orders/1/payment\" href=\"#get-/users/1/orders/1/payment\"></a></h6>\n<ol>\n<li>200</li>\n<li>404</li>\n</ol>\n<h6 id=\"post-/users/1/orders/1/payment\">post /users/1/orders/1/payment<a title=\"#post-/users/1/orders/1/payment\" href=\"#post-/users/1/orders/1/payment\"></a></h6>\n<ol>\n<li>post /users/1/orders/1/payment {type: “CASH”} return 201</li>\n<li>uri,但是此时驱动不出来以repository来保存相应的payment</li>\n<li>user argument captor</li>\n<li>order argument captor</li>\n<li>payment argument captor</li>\n</ol>\n<h4 id=\"reposotory-测试\">Reposotory 测试<a title=\"#reposotory-测试\" href=\"#reposotory-测试\"></a></h4>\n<h6 id=\"configure-file\">Configure file<a title=\"#configure-file\" href=\"#configure-file\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE configuration</span><br><span class=\"line\">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class=\"line\">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">    &lt;!--&lt;settings&gt;--&gt;</span><br><span class=\"line\">    &lt;!--&lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;--&gt;</span><br><span class=\"line\">    &lt;!--&lt;/settings&gt;--&gt;</span><br><span class=\"line\">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class=\"line\">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class=\"line\">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class=\"line\">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class=\"line\">                &lt;property name=&quot;driver&quot; value=&quot;org.postgresql.Driver&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;url&quot; value=&quot;jdbc:postgresql://localhost:5432/order0625&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;username&quot; value=&quot;twer&quot;/&gt;</span><br><span class=\"line\">                &lt;property name=&quot;password&quot; value=&quot;&quot;/&gt;</span><br><span class=\"line\">            &lt;/dataSource&gt;</span><br><span class=\"line\">        &lt;/environment&gt;</span><br><span class=\"line\">    &lt;/environments&gt;</span><br><span class=\"line\">    &lt;mappers&gt;</span><br><span class=\"line\">        &lt;mapper resource=&quot;org/thoughtworks/com/provider/ProductMapper.xml&quot;/&gt;</span><br><span class=\"line\">    &lt;/mappers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<h6 id=\"config-load\">config load<a title=\"#config-load\" href=\"#config-load\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InputStream resourceAsStream = Resources.getResourceAsStream(&quot;mybatis.xml&quot;);</span><br><span class=\"line\">        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);</span><br></pre></td></tr></table></figure>\n<h6 id=\"mapper-file\">Mapper file<a title=\"#mapper-file\" href=\"#mapper-file\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE mapper</span><br><span class=\"line\">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class=\"line\">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class=\"line\">&lt;mapper namespace=&quot;thoughtworks.com.repository.ProductRepository&quot;&gt;</span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>\n<h6 id=\"migration\">Migration<a title=\"#migration\" href=\"#migration\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenCentral()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath &quot;org.flywaydb:flyway-gradle-plugin:3.0&quot;</span><br><span class=\"line\">        classpath &#x27;org.postgresql:postgresql:9.3-1101-jdbc41&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: &#x27;flyway&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">flyway &#123;</span><br><span class=\"line\">    driver = &#x27;org.postgresql.Driver&#x27;</span><br><span class=\"line\">    url = &#x27;jdbc:postgresql://localhost:5432/orderjersey&#x27;</span><br><span class=\"line\">    user = &#x27;twer&#x27;</span><br><span class=\"line\">    password = &#x27;&#x27;</span><br><span class=\"line\">    locations = [&#x27;filesystem:src/main/resources/dbmigration&#x27;]</span><br><span class=\"line\">    sqlMigrationPrefix = &#x27;0&#x27;</span><br><span class=\"line\">    sqlMigrationSeparator = &#x27;_&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"mybatis-sql-log\">mybatis sql log<a title=\"#mybatis-sql-log\" href=\"#mybatis-sql-log\"></a></h6>\n<ol>\n<li>gradle<br>\n<code>compile &quot;log4j:log4j:1.2.16&quot;</code></li>\n<li>mybatis config <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings&gt;</span><br><span class=\"line\">\t&lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;</span><br><span class=\"line\">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li>gradle idea</li>\n<li>log4.properties <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.rootLogger=ERROR, stdout</span><br><span class=\"line\"># MyBatis logging configuration...</span><br><span class=\"line\">log4j.logger.thoughtworks.com.repository.ProductRepository=TRACE</span><br><span class=\"line\"># Console output...</span><br><span class=\"line\">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>其中log4j.logger.thoughtworks.com.repository.ProductRepository=TRACE 必须是mapper中存在的namespace才可以</p>\n<h6 id=\"插入多个表\">插入多个表<a title=\"#插入多个表\" href=\"#插入多个表\"></a></h6>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;insert id=&quot;createProduct&quot; parameterType=&quot;thoughtworks.com.domain.Product&quot;&gt;</span><br><span class=\"line\">        &lt;selectKey keyProperty=&quot;product.id&quot; resultType=&quot;Integer&quot; order=&quot;BEFORE&quot;&gt;</span><br><span class=\"line\">            select NEXTVAL(&#x27;products_id_seq&#x27;);</span><br><span class=\"line\">        &lt;/selectKey&gt;</span><br><span class=\"line\">        insert into products (id, name, description) values (#&#123;product.id&#125;, #&#123;product.name&#125;, #&#123;product.description&#125;);</span><br><span class=\"line\">        insert into prices (amount, effectDate, productId) values (#&#123;price.amount&#125;, #&#123;price.effectDate&#125;, #&#123;product.id&#125;);</span><br><span class=\"line\">&lt;/insert&gt;</span><br></pre></td></tr></table></figure>\n<p>这时候我们的selectKey会将product上的id置为我们生成的id。<a href=\"http://xn--product-hc5kp88a8xu9rytoo8s5ig7a.id\">此时就可以通过product.id</a>。<br>\n此时price也可以同时被插入进去。<br>\ninsert 的时候，我们的如果selectKey上的order为BEFOR，此时mybatis会首先取得插入的key，然后再将我们keyProperty设置为对应的ID，然后再进行insert操作，所以在insert的时候我们需要制定我们插入的id primary key.</p>\n<h6 id=\"查询多个表\">查询多个表<a title=\"#查询多个表\" href=\"#查询多个表\"></a></h6>\n<p>有时候我们对象上的数据可能是来自多个数据库表，此时可以使用如下的方式来获取。比如此时我需要获取product上当前的price，我可以使用以下方式来获得product，或得到的product上就会默认的带上currentPrice</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resultMap id=&quot;productDetail&quot; type=&quot;thoughtworks.com.domain.Product&quot;&gt;</span><br><span class=\"line\">        &lt;id property=&quot;id&quot; column=&quot;product_id&quot;&gt;&lt;/id&gt;</span><br><span class=\"line\">        &lt;result property=&quot;name&quot; column=&quot;product_name&quot;&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;result property=&quot;description&quot; column=&quot;product_description&quot;&gt;&lt;/result&gt;</span><br><span class=\"line\">        &lt;association property=&quot;currentPrice&quot; javaType=&quot;thoughtworks.com.domain.Price&quot;&gt;</span><br><span class=\"line\">            &lt;id property=&quot;id&quot; column=&quot;price_id&quot;/&gt;</span><br><span class=\"line\">            &lt;result property=&quot;amount&quot; column=&quot;price_amount&quot;/&gt;</span><br><span class=\"line\">            &lt;result property=&quot;effectDate&quot; column=&quot;price_effect_date&quot;/&gt;</span><br><span class=\"line\">        &lt;/association&gt;</span><br><span class=\"line\">&lt;/resultMap&gt;    </span><br><span class=\"line\">&lt;select id=&quot;getProductById&quot; resultMap=&quot;productDetail&quot;&gt;</span><br><span class=\"line\">      select</span><br><span class=\"line\">        product.id as product_id,</span><br><span class=\"line\">        product.name as product_name,</span><br><span class=\"line\">        product.description as product_description,</span><br><span class=\"line\">        a.id as price_id,</span><br><span class=\"line\">        a.amount as price_amount,</span><br><span class=\"line\">        a.effectDate as price_effect_date</span><br><span class=\"line\">      from products product</span><br><span class=\"line\">      left join (</span><br><span class=\"line\">\t    select price.amount, price.productId, price.effectDate, price.id from prices price</span><br><span class=\"line\">\t    inner join (select price.productId, max(effectDate) as effectDate from prices price group by price.productId) as p on p.productId=price.productId and p.effectDate=price.effectDate</span><br><span class=\"line\">\t  ) as a on product.id = a.productId where product.id = #&#123;productId&#125;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n<h6 id=\"插入集合对象\">插入集合对象<a title=\"#插入集合对象\" href=\"#插入集合对象\"></a></h6>\n<p>比如我们有个order，但是order上有个集合的orderItems，此时我们可以使用如下的方式来插入orderItems</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;insert id=&quot;createOrderForUser&quot; parameterType=&quot;thoughtworks.com.domain.Order&quot;&gt;</span><br><span class=\"line\">        &lt;selectKey keyProperty=&quot;order.id&quot; resultType=&quot;Integer&quot; order=&quot;BEFORE&quot;&gt;</span><br><span class=\"line\">            select NEXTVAL(&#x27;orders_id_seq&#x27;);</span><br><span class=\"line\">        &lt;/selectKey&gt;</span><br><span class=\"line\">        insert into orders (id, name, phone, address, userId) values (#&#123;order.id&#125;, #&#123;order.name&#125;, #&#123;order.phone&#125;,</span><br><span class=\"line\">        #&#123;order.address&#125;, #&#123;user.id&#125;);</span><br><span class=\"line\">        &lt;foreach collection=&quot;order.orderItems&quot; item=&quot;orderItem&quot;&gt;</span><br><span class=\"line\">            insert into order_items(orderId, productId, quantity) values (#&#123;order.id&#125;, #&#123;orderItem.productId&#125;, #&#123;orderItem.quantity&#125;);</span><br><span class=\"line\">        &lt;/foreach&gt;</span><br><span class=\"line\">&lt;/insert&gt;</span><br></pre></td></tr></table></figure>\n<p>其中order的结构如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Order &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String address;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private String phone;</span><br><span class=\"line\">    private List&lt;OrderItem&gt; orderItems;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int createOrderForUser(@Param(&quot;user&quot;) User user, @Param(&quot;order&quot;) Order order);</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用gradle来启动我们的server\">使用gradle来启动我们的server<a title=\"#使用gradle来启动我们的server\" href=\"#使用gradle来启动我们的server\"></a></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin:&#x27;application&#x27;</span><br><span class=\"line\">mainClassName = &quot;thoughtworks.com.Server&quot;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>Failed to load class “org.slf4j.impl.StaticLoggerBinder”</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// use to log slf4j</span><br><span class=\"line\">compile &#x27;org.slf4j:slf4j-api:1.7.5&#x27;</span><br><span class=\"line\">compile &#x27;org.slf4j:slf4j-log4j12:1.7.5&#x27;</span><br></pre></td></tr></table></figure>\n<h4 id=\"常见错误\">常见错误<a title=\"#常见错误\" href=\"#常见错误\"></a></h4>\n<h6 id=\"error-instantiating-class-thoughtworks.com.domain.order-with-invalid-types-()-or-values-().-cause:-java.lang.nosuchmethodexception:-thoughtworks.com.domain.order.&lt;init&gt;()\">Error instantiating class thoughtworks.com.domain.Order with invalid types () or values (). Cause: java.lang.NoSuchMethodException: thoughtworks.com.domain.Order.<init>()<a title=\"#error-instantiating-class-thoughtworks.com.domain.order-with-invalid-types-()-or-values-().-cause:-java.lang.nosuchmethodexception:-thoughtworks.com.domain.order.&lt;init&gt;()\" href=\"#error-instantiating-class-thoughtworks.com.domain.order-with-invalid-types-()-or-values-().-cause:-java.lang.nosuchmethodexception:-thoughtworks.com.domain.order.&lt;init&gt;()\"></a></h6>\n<p>mybatis默认使用的是默认的构造函数来反射我们的类，然后将值一个一个的塞到我们相应的字段上，所以在我们的类中需要有一个默认参数的构造函数，出现这个错误的原因是因为我们重新声明了构造函数，没有默认参数的构造函数存在，所以mybatis不知道如何去初始化我们的domain对象。</p>\n<h6 id=\"当总是出现500错误的时候，很有可能是repository没有注册\">当总是出现500错误的时候，很有可能是repository没有注册<a title=\"#当总是出现500错误的时候，很有可能是repository没有注册\" href=\"#当总是出现500错误的时候，很有可能是repository没有注册\"></a></h6>\n<p>还有可能是因为返回了一个对象，但是没有加@produce(MediaType.APPLICATION_JSON)</p>\n","prev":{"title":"Emacs 奇淫巧计","link":"2019/06/30/emacs"},"next":{"title":"初尝ruby on rails","link":"2014/08/20/ror-first"},"plink":"https://kopinions.com/2014/10/10/jersey-mybatis-rest-api/","reading_time":"2099 字约 14 分钟"}